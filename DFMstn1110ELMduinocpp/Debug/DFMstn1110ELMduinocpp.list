
DFMstn1110ELMduinocpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009efc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001204  0800a0a0  0800a0a0  0001a0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2a4  0800b2a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2a4  0800b2a4  0001b2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2ac  0800b2ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b2ac  0800b2ac  0001b2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2b4  0800b2b4  0001b2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200001e0  0800b498  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800b498  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c761  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b94  00000000  00000000  0003c971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0003f508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0003fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae4e  00000000  00000000  00040a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddf4  00000000  00000000  0005b86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da54  00000000  00000000  00069662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f70b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042bc  00000000  00000000  000f710c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a084 	.word	0x0800a084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a084 	.word	0x0800a084

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b9a4 	b.w	8001214 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f83c 	bl	8000f50 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_d2lz>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	f7ff fdfd 	bl	8000aec <__aeabi_dcmplt>
 8000ef2:	b928      	cbnz	r0, 8000f00 <__aeabi_d2lz+0x1c>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000efc:	f000 b80a 	b.w	8000f14 <__aeabi_d2ulz>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f06:	f000 f805 	bl	8000f14 <__aeabi_d2ulz>
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
 8000f12:	bf00      	nop

08000f14 <__aeabi_d2ulz>:
 8000f14:	b5d0      	push	{r4, r6, r7, lr}
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__aeabi_d2ulz+0x34>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	460f      	mov	r7, r1
 8000f1e:	f7ff fb73 	bl	8000608 <__aeabi_dmul>
 8000f22:	f7ff fe49 	bl	8000bb8 <__aeabi_d2uiz>
 8000f26:	4604      	mov	r4, r0
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_ui2d>
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <__aeabi_d2ulz+0x38>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f7ff fb6a 	bl	8000608 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4630      	mov	r0, r6
 8000f3a:	4639      	mov	r1, r7
 8000f3c:	f7ff f9ac 	bl	8000298 <__aeabi_dsub>
 8000f40:	f7ff fe3a 	bl	8000bb8 <__aeabi_d2uiz>
 8000f44:	4621      	mov	r1, r4
 8000f46:	bdd0      	pop	{r4, r6, r7, pc}
 8000f48:	3df00000 	.word	0x3df00000
 8000f4c:	41f00000 	.word	0x41f00000

08000f50 <__udivmoddi4>:
 8000f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f54:	9d08      	ldr	r5, [sp, #32]
 8000f56:	4604      	mov	r4, r0
 8000f58:	468c      	mov	ip, r1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 8083 	bne.w	8001066 <__udivmoddi4+0x116>
 8000f60:	428a      	cmp	r2, r1
 8000f62:	4617      	mov	r7, r2
 8000f64:	d947      	bls.n	8000ff6 <__udivmoddi4+0xa6>
 8000f66:	fab2 f282 	clz	r2, r2
 8000f6a:	b142      	cbz	r2, 8000f7e <__udivmoddi4+0x2e>
 8000f6c:	f1c2 0020 	rsb	r0, r2, #32
 8000f70:	fa24 f000 	lsr.w	r0, r4, r0
 8000f74:	4091      	lsls	r1, r2
 8000f76:	4097      	lsls	r7, r2
 8000f78:	ea40 0c01 	orr.w	ip, r0, r1
 8000f7c:	4094      	lsls	r4, r2
 8000f7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f82:	0c23      	lsrs	r3, r4, #16
 8000f84:	fbbc f6f8 	udiv	r6, ip, r8
 8000f88:	fa1f fe87 	uxth.w	lr, r7
 8000f8c:	fb08 c116 	mls	r1, r8, r6, ip
 8000f90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f94:	fb06 f10e 	mul.w	r1, r6, lr
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d909      	bls.n	8000fb0 <__udivmoddi4+0x60>
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000fa2:	f080 8119 	bcs.w	80011d8 <__udivmoddi4+0x288>
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	f240 8116 	bls.w	80011d8 <__udivmoddi4+0x288>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	443b      	add	r3, r7
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc4:	45a6      	cmp	lr, r4
 8000fc6:	d909      	bls.n	8000fdc <__udivmoddi4+0x8c>
 8000fc8:	193c      	adds	r4, r7, r4
 8000fca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fce:	f080 8105 	bcs.w	80011dc <__udivmoddi4+0x28c>
 8000fd2:	45a6      	cmp	lr, r4
 8000fd4:	f240 8102 	bls.w	80011dc <__udivmoddi4+0x28c>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	443c      	add	r4, r7
 8000fdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fe0:	eba4 040e 	sub.w	r4, r4, lr
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	b11d      	cbz	r5, 8000ff0 <__udivmoddi4+0xa0>
 8000fe8:	40d4      	lsrs	r4, r2
 8000fea:	2300      	movs	r3, #0
 8000fec:	e9c5 4300 	strd	r4, r3, [r5]
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	b902      	cbnz	r2, 8000ffa <__udivmoddi4+0xaa>
 8000ff8:	deff      	udf	#255	; 0xff
 8000ffa:	fab2 f282 	clz	r2, r2
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d150      	bne.n	80010a4 <__udivmoddi4+0x154>
 8001002:	1bcb      	subs	r3, r1, r7
 8001004:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001008:	fa1f f887 	uxth.w	r8, r7
 800100c:	2601      	movs	r6, #1
 800100e:	fbb3 fcfe 	udiv	ip, r3, lr
 8001012:	0c21      	lsrs	r1, r4, #16
 8001014:	fb0e 331c 	mls	r3, lr, ip, r3
 8001018:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800101c:	fb08 f30c 	mul.w	r3, r8, ip
 8001020:	428b      	cmp	r3, r1
 8001022:	d907      	bls.n	8001034 <__udivmoddi4+0xe4>
 8001024:	1879      	adds	r1, r7, r1
 8001026:	f10c 30ff 	add.w	r0, ip, #4294967295
 800102a:	d202      	bcs.n	8001032 <__udivmoddi4+0xe2>
 800102c:	428b      	cmp	r3, r1
 800102e:	f200 80e9 	bhi.w	8001204 <__udivmoddi4+0x2b4>
 8001032:	4684      	mov	ip, r0
 8001034:	1ac9      	subs	r1, r1, r3
 8001036:	b2a3      	uxth	r3, r4
 8001038:	fbb1 f0fe 	udiv	r0, r1, lr
 800103c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001040:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001044:	fb08 f800 	mul.w	r8, r8, r0
 8001048:	45a0      	cmp	r8, r4
 800104a:	d907      	bls.n	800105c <__udivmoddi4+0x10c>
 800104c:	193c      	adds	r4, r7, r4
 800104e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001052:	d202      	bcs.n	800105a <__udivmoddi4+0x10a>
 8001054:	45a0      	cmp	r8, r4
 8001056:	f200 80d9 	bhi.w	800120c <__udivmoddi4+0x2bc>
 800105a:	4618      	mov	r0, r3
 800105c:	eba4 0408 	sub.w	r4, r4, r8
 8001060:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001064:	e7bf      	b.n	8000fe6 <__udivmoddi4+0x96>
 8001066:	428b      	cmp	r3, r1
 8001068:	d909      	bls.n	800107e <__udivmoddi4+0x12e>
 800106a:	2d00      	cmp	r5, #0
 800106c:	f000 80b1 	beq.w	80011d2 <__udivmoddi4+0x282>
 8001070:	2600      	movs	r6, #0
 8001072:	e9c5 0100 	strd	r0, r1, [r5]
 8001076:	4630      	mov	r0, r6
 8001078:	4631      	mov	r1, r6
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	fab3 f683 	clz	r6, r3
 8001082:	2e00      	cmp	r6, #0
 8001084:	d14a      	bne.n	800111c <__udivmoddi4+0x1cc>
 8001086:	428b      	cmp	r3, r1
 8001088:	d302      	bcc.n	8001090 <__udivmoddi4+0x140>
 800108a:	4282      	cmp	r2, r0
 800108c:	f200 80b8 	bhi.w	8001200 <__udivmoddi4+0x2b0>
 8001090:	1a84      	subs	r4, r0, r2
 8001092:	eb61 0103 	sbc.w	r1, r1, r3
 8001096:	2001      	movs	r0, #1
 8001098:	468c      	mov	ip, r1
 800109a:	2d00      	cmp	r5, #0
 800109c:	d0a8      	beq.n	8000ff0 <__udivmoddi4+0xa0>
 800109e:	e9c5 4c00 	strd	r4, ip, [r5]
 80010a2:	e7a5      	b.n	8000ff0 <__udivmoddi4+0xa0>
 80010a4:	f1c2 0320 	rsb	r3, r2, #32
 80010a8:	fa20 f603 	lsr.w	r6, r0, r3
 80010ac:	4097      	lsls	r7, r2
 80010ae:	fa01 f002 	lsl.w	r0, r1, r2
 80010b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010b6:	40d9      	lsrs	r1, r3
 80010b8:	4330      	orrs	r0, r6
 80010ba:	0c03      	lsrs	r3, r0, #16
 80010bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80010c0:	fa1f f887 	uxth.w	r8, r7
 80010c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80010c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010cc:	fb06 f108 	mul.w	r1, r6, r8
 80010d0:	4299      	cmp	r1, r3
 80010d2:	fa04 f402 	lsl.w	r4, r4, r2
 80010d6:	d909      	bls.n	80010ec <__udivmoddi4+0x19c>
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	f106 3cff 	add.w	ip, r6, #4294967295
 80010de:	f080 808d 	bcs.w	80011fc <__udivmoddi4+0x2ac>
 80010e2:	4299      	cmp	r1, r3
 80010e4:	f240 808a 	bls.w	80011fc <__udivmoddi4+0x2ac>
 80010e8:	3e02      	subs	r6, #2
 80010ea:	443b      	add	r3, r7
 80010ec:	1a5b      	subs	r3, r3, r1
 80010ee:	b281      	uxth	r1, r0
 80010f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80010f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80010f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010fc:	fb00 f308 	mul.w	r3, r0, r8
 8001100:	428b      	cmp	r3, r1
 8001102:	d907      	bls.n	8001114 <__udivmoddi4+0x1c4>
 8001104:	1879      	adds	r1, r7, r1
 8001106:	f100 3cff 	add.w	ip, r0, #4294967295
 800110a:	d273      	bcs.n	80011f4 <__udivmoddi4+0x2a4>
 800110c:	428b      	cmp	r3, r1
 800110e:	d971      	bls.n	80011f4 <__udivmoddi4+0x2a4>
 8001110:	3802      	subs	r0, #2
 8001112:	4439      	add	r1, r7
 8001114:	1acb      	subs	r3, r1, r3
 8001116:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800111a:	e778      	b.n	800100e <__udivmoddi4+0xbe>
 800111c:	f1c6 0c20 	rsb	ip, r6, #32
 8001120:	fa03 f406 	lsl.w	r4, r3, r6
 8001124:	fa22 f30c 	lsr.w	r3, r2, ip
 8001128:	431c      	orrs	r4, r3
 800112a:	fa20 f70c 	lsr.w	r7, r0, ip
 800112e:	fa01 f306 	lsl.w	r3, r1, r6
 8001132:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8001136:	fa21 f10c 	lsr.w	r1, r1, ip
 800113a:	431f      	orrs	r7, r3
 800113c:	0c3b      	lsrs	r3, r7, #16
 800113e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001142:	fa1f f884 	uxth.w	r8, r4
 8001146:	fb0e 1119 	mls	r1, lr, r9, r1
 800114a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800114e:	fb09 fa08 	mul.w	sl, r9, r8
 8001152:	458a      	cmp	sl, r1
 8001154:	fa02 f206 	lsl.w	r2, r2, r6
 8001158:	fa00 f306 	lsl.w	r3, r0, r6
 800115c:	d908      	bls.n	8001170 <__udivmoddi4+0x220>
 800115e:	1861      	adds	r1, r4, r1
 8001160:	f109 30ff 	add.w	r0, r9, #4294967295
 8001164:	d248      	bcs.n	80011f8 <__udivmoddi4+0x2a8>
 8001166:	458a      	cmp	sl, r1
 8001168:	d946      	bls.n	80011f8 <__udivmoddi4+0x2a8>
 800116a:	f1a9 0902 	sub.w	r9, r9, #2
 800116e:	4421      	add	r1, r4
 8001170:	eba1 010a 	sub.w	r1, r1, sl
 8001174:	b2bf      	uxth	r7, r7
 8001176:	fbb1 f0fe 	udiv	r0, r1, lr
 800117a:	fb0e 1110 	mls	r1, lr, r0, r1
 800117e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001182:	fb00 f808 	mul.w	r8, r0, r8
 8001186:	45b8      	cmp	r8, r7
 8001188:	d907      	bls.n	800119a <__udivmoddi4+0x24a>
 800118a:	19e7      	adds	r7, r4, r7
 800118c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001190:	d22e      	bcs.n	80011f0 <__udivmoddi4+0x2a0>
 8001192:	45b8      	cmp	r8, r7
 8001194:	d92c      	bls.n	80011f0 <__udivmoddi4+0x2a0>
 8001196:	3802      	subs	r0, #2
 8001198:	4427      	add	r7, r4
 800119a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800119e:	eba7 0708 	sub.w	r7, r7, r8
 80011a2:	fba0 8902 	umull	r8, r9, r0, r2
 80011a6:	454f      	cmp	r7, r9
 80011a8:	46c6      	mov	lr, r8
 80011aa:	4649      	mov	r1, r9
 80011ac:	d31a      	bcc.n	80011e4 <__udivmoddi4+0x294>
 80011ae:	d017      	beq.n	80011e0 <__udivmoddi4+0x290>
 80011b0:	b15d      	cbz	r5, 80011ca <__udivmoddi4+0x27a>
 80011b2:	ebb3 020e 	subs.w	r2, r3, lr
 80011b6:	eb67 0701 	sbc.w	r7, r7, r1
 80011ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80011be:	40f2      	lsrs	r2, r6
 80011c0:	ea4c 0202 	orr.w	r2, ip, r2
 80011c4:	40f7      	lsrs	r7, r6
 80011c6:	e9c5 2700 	strd	r2, r7, [r5]
 80011ca:	2600      	movs	r6, #0
 80011cc:	4631      	mov	r1, r6
 80011ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d2:	462e      	mov	r6, r5
 80011d4:	4628      	mov	r0, r5
 80011d6:	e70b      	b.n	8000ff0 <__udivmoddi4+0xa0>
 80011d8:	4606      	mov	r6, r0
 80011da:	e6e9      	b.n	8000fb0 <__udivmoddi4+0x60>
 80011dc:	4618      	mov	r0, r3
 80011de:	e6fd      	b.n	8000fdc <__udivmoddi4+0x8c>
 80011e0:	4543      	cmp	r3, r8
 80011e2:	d2e5      	bcs.n	80011b0 <__udivmoddi4+0x260>
 80011e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80011e8:	eb69 0104 	sbc.w	r1, r9, r4
 80011ec:	3801      	subs	r0, #1
 80011ee:	e7df      	b.n	80011b0 <__udivmoddi4+0x260>
 80011f0:	4608      	mov	r0, r1
 80011f2:	e7d2      	b.n	800119a <__udivmoddi4+0x24a>
 80011f4:	4660      	mov	r0, ip
 80011f6:	e78d      	b.n	8001114 <__udivmoddi4+0x1c4>
 80011f8:	4681      	mov	r9, r0
 80011fa:	e7b9      	b.n	8001170 <__udivmoddi4+0x220>
 80011fc:	4666      	mov	r6, ip
 80011fe:	e775      	b.n	80010ec <__udivmoddi4+0x19c>
 8001200:	4630      	mov	r0, r6
 8001202:	e74a      	b.n	800109a <__udivmoddi4+0x14a>
 8001204:	f1ac 0c02 	sub.w	ip, ip, #2
 8001208:	4439      	add	r1, r7
 800120a:	e713      	b.n	8001034 <__udivmoddi4+0xe4>
 800120c:	3802      	subs	r0, #2
 800120e:	443c      	add	r4, r7
 8001210:	e724      	b.n	800105c <__udivmoddi4+0x10c>
 8001212:	bf00      	nop

08001214 <__aeabi_idiv0>:
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <__io_putchar>:
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
}

PUTCHAR_PROTOTYPE
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001220:	1d39      	adds	r1, r7, #4
 8001222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001226:	2201      	movs	r2, #1
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <__io_putchar+0x20>)
 800122a:	f003 fa78 	bl	800471e <HAL_UART_Transmit>

    return ch;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001fc 	.word	0x200001fc

0800123c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_GPIO_Init+0xd0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a2c      	ldr	r2, [pc, #176]	; (800130c <MX_GPIO_Init+0xd0>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_GPIO_Init+0xd0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a25      	ldr	r2, [pc, #148]	; (800130c <MX_GPIO_Init+0xd0>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_GPIO_Init+0xd0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <MX_GPIO_Init+0xd0>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_GPIO_Init+0xd0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <MX_GPIO_Init+0xd0>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2120      	movs	r1, #32
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_GPIO_Init+0xd4>)
 80012c8:	f002 fd4e 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_GPIO_Init+0xd8>)
 80012e4:	f002 fbbc 	bl	8003a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012e8:	2320      	movs	r3, #32
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001300:	f002 fbae 	bl	8003a60 <HAL_GPIO_Init>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020800 	.word	0x40020800

08001318 <_ZN7STN1110C1Ev>:
const int8_t ELM_GENERAL_ERROR     = -1;




class STN1110
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	711a      	strb	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3306      	adds	r3, #6
 800132a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f004 f9a9 	bl	8005688 <memset>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	22ff      	movs	r2, #255	; 0xff
 8001342:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	f8c3 2003 	str.w	r2, [r3, #3]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  //UART에 수신인터럽트 일어나면 이놈이 호출됨
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 if (huart->Instance == USART6) //current UART
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_UART_RxCpltCallback+0x3c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10a      	bne.n	8001390 <HAL_UART_RxCpltCallback+0x28>
  {
	 stn.push(stn.rxData);
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_UART_RxCpltCallback+0x40>)
 800137c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8001380:	4619      	mov	r1, r3
 8001382:	4809      	ldr	r0, [pc, #36]	; (80013a8 <HAL_UART_RxCpltCallback+0x40>)
 8001384:	f001 fe78 	bl	8003078 <_ZN7STN11104pushEh>
	 stn.rxFlag = true;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_UART_RxCpltCallback+0x40>)
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
  }
 	 HAL_UART_Receive_IT(&huart6, &stn.rxData, 1); //다음 수신인터럽트를 준비
 8001390:	2201      	movs	r2, #1
 8001392:	4906      	ldr	r1, [pc, #24]	; (80013ac <HAL_UART_RxCpltCallback+0x44>)
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <HAL_UART_RxCpltCallback+0x48>)
 8001396:	f003 fa54 	bl	8004842 <HAL_UART_Receive_IT>
 }
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40011400 	.word	0x40011400
 80013a8:	20000288 	.word	0x20000288
 80013ac:	20000490 	.word	0x20000490
 80013b0:	20000240 	.word	0x20000240

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b098      	sub	sp, #96	; 0x60
 80013b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f002 f917 	bl	80035ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 fa2b 	bl	8001818 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f7ff ff3b 	bl	800123c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013c6:	f001 ffd9 	bl	800337c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80013ca:	f001 ffad 	bl	8003328 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80013ce:	f001 ffff 	bl	80033d0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  stn.queue_init();
 80013d2:	4859      	ldr	r0, [pc, #356]	; (8001538 <main+0x184>)
 80013d4:	f001 fe9c 	bl	8003110 <_ZN7STN111010queue_initEv>
  HAL_UART_Receive_IT(&huart6, &stn.rxData, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	4958      	ldr	r1, [pc, #352]	; (800153c <main+0x188>)
 80013dc:	4858      	ldr	r0, [pc, #352]	; (8001540 <main+0x18c>)
 80013de:	f003 fa30 	bl	8004842 <HAL_UART_Receive_IT>


	if (!stn.begin(&huart6, true, 2000))
 80013e2:	2301      	movs	r3, #1
 80013e4:	717b      	strb	r3, [r7, #5]
 80013e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013ea:	80fb      	strh	r3, [r7, #6]
	byte responseByte_7;

	


	bool begin(UART_HandleTypeDef *STN_PORT, const bool& debug = false, const uint16_t& timeout = 1000, const char& protocol = '0', const uint16_t& payloadLen = 200);
 80013ec:	2330      	movs	r3, #48	; 0x30
 80013ee:	727b      	strb	r3, [r7, #9]
 80013f0:	23c8      	movs	r3, #200	; 0xc8
 80013f2:	817b      	strh	r3, [r7, #10]
 80013f4:	1db9      	adds	r1, r7, #6
 80013f6:	1d7a      	adds	r2, r7, #5
 80013f8:	f107 030a 	add.w	r3, r7, #10
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	f107 0309 	add.w	r3, r7, #9
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	494e      	ldr	r1, [pc, #312]	; (8001540 <main+0x18c>)
 8001408:	484b      	ldr	r0, [pc, #300]	; (8001538 <main+0x184>)
 800140a:	f000 faf9 	bl	8001a00 <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_>
 800140e:	4603      	mov	r3, r0
 8001410:	f083 0301 	eor.w	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <main+0x6c>
	{
		printf("Couldn't connect to STN1110");
 800141a:	484a      	ldr	r0, [pc, #296]	; (8001544 <main+0x190>)
 800141c:	f005 f860 	bl	80064e0 <iprintf>
	}
	printf("Connected to STN1110\r\n");
 8001420:	4849      	ldr	r0, [pc, #292]	; (8001548 <main+0x194>)
 8001422:	f005 f8e3 	bl	80065ec <puts>
  while (1)
  {
	    static int8_t cur_myELM327_STATUS; // 현재상태 정적변수
	    static int8_t pre_myELM327_STATUS; // 이전상태 정적변수

	    c_time = millis() / 1000; //시간
 8001426:	f002 f947 	bl	80036b8 <HAL_GetTick>
 800142a:	4603      	mov	r3, r0
 800142c:	4a47      	ldr	r2, [pc, #284]	; (800154c <main+0x198>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	099b      	lsrs	r3, r3, #6
 8001434:	4a46      	ldr	r2, [pc, #280]	; (8001550 <main+0x19c>)
 8001436:	6013      	str	r3, [r2, #0]

	    SEC = c_time % 60;
 8001438:	4b45      	ldr	r3, [pc, #276]	; (8001550 <main+0x19c>)
 800143a:	6819      	ldr	r1, [r3, #0]
 800143c:	4b45      	ldr	r3, [pc, #276]	; (8001554 <main+0x1a0>)
 800143e:	fba3 2301 	umull	r2, r3, r3, r1
 8001442:	095a      	lsrs	r2, r3, #5
 8001444:	4613      	mov	r3, r2
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	1aca      	subs	r2, r1, r3
 800144e:	4b42      	ldr	r3, [pc, #264]	; (8001558 <main+0x1a4>)
 8001450:	601a      	str	r2, [r3, #0]
	    MIN = (c_time / 60) % 60;
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <main+0x19c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a3f      	ldr	r2, [pc, #252]	; (8001554 <main+0x1a0>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0959      	lsrs	r1, r3, #5
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <main+0x1a0>)
 8001460:	fba3 2301 	umull	r2, r3, r3, r1
 8001464:	095a      	lsrs	r2, r3, #5
 8001466:	4613      	mov	r3, r2
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	1aca      	subs	r2, r1, r3
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <main+0x1a8>)
 8001472:	601a      	str	r2, [r3, #0]
	    HOUR = (c_time / (60 * 60)) % 24;
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <main+0x19c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a39      	ldr	r2, [pc, #228]	; (8001560 <main+0x1ac>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0ad9      	lsrs	r1, r3, #11
 8001480:	4b38      	ldr	r3, [pc, #224]	; (8001564 <main+0x1b0>)
 8001482:	fba3 2301 	umull	r2, r3, r3, r1
 8001486:	091a      	lsrs	r2, r3, #4
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1aca      	subs	r2, r1, r3
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <main+0x1b4>)
 8001494:	601a      	str	r2, [r3, #0]

	    curS = stn.status; //현재상태 갱신
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <main+0x184>)
 8001498:	f993 2212 	ldrsb.w	r2, [r3, #530]	; 0x212
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <main+0x1b8>)
 800149e:	701a      	strb	r2, [r3, #0]

	    switch (curS) {
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <main+0x1b8>)
 80014a2:	f993 3000 	ldrsb.w	r3, [r3]
 80014a6:	2b07      	cmp	r3, #7
 80014a8:	d872      	bhi.n	8001590 <main+0x1dc>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <main+0xfc>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014d1 	.word	0x080014d1
 80014b4:	080014dd 	.word	0x080014dd
 80014b8:	080014eb 	.word	0x080014eb
 80014bc:	08001591 	.word	0x08001591
 80014c0:	080014fd 	.word	0x080014fd
 80014c4:	08001515 	.word	0x08001515
 80014c8:	08001521 	.word	0x08001521
 80014cc:	0800152d 	.word	0x0800152d
	         case ELM_SUCCESS:
	         strcpy(car_state, "ELM_SUCCESS");
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <main+0x1bc>)
 80014d2:	4a28      	ldr	r2, [pc, #160]	; (8001574 <main+0x1c0>)
 80014d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	         break;
 80014da:	e05f      	b.n	800159c <main+0x1e8>

	         case ELM_NO_RESPONSE:
	         strcpy(car_state, "ELM_NO_RESPONSE");
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <main+0x1bc>)
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <main+0x1c4>)
 80014e0:	4614      	mov	r4, r2
 80014e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	         break;
 80014e8:	e058      	b.n	800159c <main+0x1e8>

	         case ELM_BUFFER_OVERFLOW:
	         strcpy(car_state, "ELM_BUFFER_OVERFLOW");
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <main+0x1bc>)
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <main+0x1c8>)
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	682b      	ldr	r3, [r5, #0]
 80014f8:	6023      	str	r3, [r4, #0]
	         break;
 80014fa:	e04f      	b.n	800159c <main+0x1e8>

	         case ELM_UNABLE_TO_CONNECT:
	         strcpy(car_state, "ELM_UNABLE_TO_CONNECT");
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <main+0x1bc>)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <main+0x1cc>)
 8001500:	4614      	mov	r4, r2
 8001502:	461d      	mov	r5, r3
 8001504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001508:	e895 0003 	ldmia.w	r5, {r0, r1}
 800150c:	6020      	str	r0, [r4, #0]
 800150e:	3404      	adds	r4, #4
 8001510:	8021      	strh	r1, [r4, #0]
	         break;
 8001512:	e043      	b.n	800159c <main+0x1e8>

	         case ELM_NO_DATA:
	         strcpy(car_state, "ELM_NO_DATA");
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <main+0x1bc>)
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <main+0x1d0>)
 8001518:	ca07      	ldmia	r2, {r0, r1, r2}
 800151a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	         break;
 800151e:	e03d      	b.n	800159c <main+0x1e8>

	         case ELM_STOPPED:
	         strcpy(car_state, "ELM_STOPPED");
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <main+0x1bc>)
 8001522:	4a19      	ldr	r2, [pc, #100]	; (8001588 <main+0x1d4>)
 8001524:	ca07      	ldmia	r2, {r0, r1, r2}
 8001526:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	         break;
 800152a:	e037      	b.n	800159c <main+0x1e8>

	         case ELM_TIMEOUT:
	         strcpy(car_state, "ELM_TIMEOUT");
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <main+0x1bc>)
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <main+0x1d8>)
 8001530:	ca07      	ldmia	r2, {r0, r1, r2}
 8001532:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	         break;
 8001536:	e031      	b.n	800159c <main+0x1e8>
 8001538:	20000288 	.word	0x20000288
 800153c:	20000490 	.word	0x20000490
 8001540:	20000240 	.word	0x20000240
 8001544:	0800a494 	.word	0x0800a494
 8001548:	0800a4b0 	.word	0x0800a4b0
 800154c:	10624dd3 	.word	0x10624dd3
 8001550:	2000054c 	.word	0x2000054c
 8001554:	88888889 	.word	0x88888889
 8001558:	20000558 	.word	0x20000558
 800155c:	20000554 	.word	0x20000554
 8001560:	91a2b3c5 	.word	0x91a2b3c5
 8001564:	aaaaaaab 	.word	0xaaaaaaab
 8001568:	20000550 	.word	0x20000550
 800156c:	2000055c 	.word	0x2000055c
 8001570:	2000052c 	.word	0x2000052c
 8001574:	0800a4c8 	.word	0x0800a4c8
 8001578:	0800a4d4 	.word	0x0800a4d4
 800157c:	0800a4e4 	.word	0x0800a4e4
 8001580:	0800a4f8 	.word	0x0800a4f8
 8001584:	0800a510 	.word	0x0800a510
 8001588:	0800a51c 	.word	0x0800a51c
 800158c:	0800a528 	.word	0x0800a528

	         default:
	         strcpy(car_state, "UNKNOWN_ERROR");
 8001590:	4a85      	ldr	r2, [pc, #532]	; (80017a8 <main+0x3f4>)
 8001592:	4b86      	ldr	r3, [pc, #536]	; (80017ac <main+0x3f8>)
 8001594:	4614      	mov	r4, r2
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	c407      	stmia	r4!, {r0, r1, r2}
 800159a:	8023      	strh	r3, [r4, #0]
	       }

	    float tempRPM = stn.rpm();
 800159c:	4884      	ldr	r0, [pc, #528]	; (80017b0 <main+0x3fc>)
 800159e:	f000 fda3 	bl	80020e8 <_ZN7STN11103rpmEv>
 80015a2:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	    uint32_t tempVEHICLE_SPEED = stn.kph();
 80015a6:	4882      	ldr	r0, [pc, #520]	; (80017b0 <main+0x3fc>)
 80015a8:	f000 fdd0 	bl	800214c <_ZN7STN11103kphEv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	653b      	str	r3, [r7, #80]	; 0x50
	    float tempENGINE_LOAD = stn.engineLoad();
 80015b0:	487f      	ldr	r0, [pc, #508]	; (80017b0 <main+0x3fc>)
 80015b2:	f000 fcfb 	bl	8001fac <_ZN7STN111010engineLoadEv>
 80015b6:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	    uint16_t tempRUN_TIME_SINCE_ENGINE_START = stn.runTime();
 80015ba:	487d      	ldr	r0, [pc, #500]	; (80017b0 <main+0x3fc>)
 80015bc:	f000 fece 	bl	800235c <_ZN7STN11107runTimeEv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	    uint8_t tempFUEL_TYPE = stn.fuelType();
 80015c6:	487a      	ldr	r0, [pc, #488]	; (80017b0 <main+0x3fc>)
 80015c8:	f001 f8a0 	bl	800270c <_ZN7STN11108fuelTypeEv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	    float tempENGINE_OIL_TEMP = stn.oilTemp();
 80015d2:	4877      	ldr	r0, [pc, #476]	; (80017b0 <main+0x3fc>)
 80015d4:	f001 f904 	bl	80027e0 <_ZN7STN11107oilTempEv>
 80015d8:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	    float tempENGINE_COOLANT_TEMP = stn.engineCoolantTemp();
 80015dc:	4874      	ldr	r0, [pc, #464]	; (80017b0 <main+0x3fc>)
 80015de:	f000 fd19 	bl	8002014 <_ZN7STN111017engineCoolantTempEv>
 80015e2:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	    float tempRELATIVE_ACCELERATOR_PEDAL_POS = stn.relativePedalPos();
 80015e6:	4872      	ldr	r0, [pc, #456]	; (80017b0 <main+0x3fc>)
 80015e8:	f001 f8c6 	bl	8002778 <_ZN7STN111016relativePedalPosEv>
 80015ec:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	    float tempTHROTTLE_POSITION = stn.throttle();
 80015f0:	486f      	ldr	r0, [pc, #444]	; (80017b0 <main+0x3fc>)
 80015f2:	f000 fe49 	bl	8002288 <_ZN7STN11108throttleEv>
 80015f6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	    float tempCOMMANDED_THROTTLE_ACTUATOR = stn.commandedThrottleActuator();
 80015fa:	486d      	ldr	r0, [pc, #436]	; (80017b0 <main+0x3fc>)
 80015fc:	f001 f852 	bl	80026a4 <_ZN7STN111025commandedThrottleActuatorEv>
 8001600:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	    float tempRELATIVE_THROTTLE_POSITION = stn.relativeThrottle();
 8001604:	486a      	ldr	r0, [pc, #424]	; (80017b0 <main+0x3fc>)
 8001606:	f000 ffe5 	bl	80025d4 <_ZN7STN111016relativeThrottleEv>
 800160a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	    float tempINTAKE_AIR_TEMP = stn.intakeAirTemp();
 800160e:	4868      	ldr	r0, [pc, #416]	; (80017b0 <main+0x3fc>)
 8001610:	f000 fdd2 	bl	80021b8 <_ZN7STN111013intakeAirTempEv>
 8001614:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	    uint8_t tempINTAKE_MANIFOLD_ABS_PRESSURE = stn.manifoldPressure();
 8001618:	4865      	ldr	r0, [pc, #404]	; (80017b0 <main+0x3fc>)
 800161a:	f000 fd2f 	bl	800207c <_ZN7STN111016manifoldPressureEv>
 800161e:	4603      	mov	r3, r0
 8001620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	    float tempFUEL_TANK_LEVEL_INPUT = stn.fuelLevel();
 8001624:	4862      	ldr	r0, [pc, #392]	; (80017b0 <main+0x3fc>)
 8001626:	f000 ff05 	bl	8002434 <_ZN7STN11109fuelLevelEv>
 800162a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	    uint8_t tempOBD_STANDARDS = stn.obdStandards();
 800162e:	4860      	ldr	r0, [pc, #384]	; (80017b0 <main+0x3fc>)
 8001630:	f000 fe5e 	bl	80022f0 <_ZN7STN111012obdStandardsEv>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    float tempCONTROL_MODULE_VOLTAGE = stn.ctrlModVoltage();
 800163a:	485d      	ldr	r0, [pc, #372]	; (80017b0 <main+0x3fc>)
 800163c:	f000 ff64 	bl	8002508 <_ZN7STN111014ctrlModVoltageEv>
 8001640:	ed87 0a07 	vstr	s0, [r7, #28]
	    float tempAMBIENT_AIR_TEMP = stn.ambientAirTemp();
 8001644:	485a      	ldr	r0, [pc, #360]	; (80017b0 <main+0x3fc>)
 8001646:	f000 fff9 	bl	800263c <_ZN7STN111014ambientAirTempEv>
 800164a:	ed87 0a06 	vstr	s0, [r7, #24]
	    uint16_t tempDISTANCE_TRAVELED_WITH_MIL_ON = stn.distTravelWithMIL();
 800164e:	4858      	ldr	r0, [pc, #352]	; (80017b0 <main+0x3fc>)
 8001650:	f000 feba 	bl	80023c8 <_ZN7STN111017distTravelWithMILEv>
 8001654:	4603      	mov	r3, r0
 8001656:	82fb      	strh	r3, [r7, #22]
	    uint16_t tempDIST_TRAV_SINCE_CODES_CLEARED = stn.distSinceCodesCleared();
 8001658:	4855      	ldr	r0, [pc, #340]	; (80017b0 <main+0x3fc>)
 800165a:	f000 ff1f 	bl	800249c <_ZN7STN111021distSinceCodesClearedEv>
 800165e:	4603      	mov	r3, r0
 8001660:	82bb      	strh	r3, [r7, #20]
	    float tempMAF_FLOW_RATE = stn.mafRate();
 8001662:	4853      	ldr	r0, [pc, #332]	; (80017b0 <main+0x3fc>)
 8001664:	f000 fddc 	bl	8002220 <_ZN7STN11107mafRateEv>
 8001668:	ed87 0a04 	vstr	s0, [r7, #16]
	    float tempFUEL_AIR_MANDED_EQUIV_RATIO = stn.commandedAirFuelRatio();
 800166c:	4850      	ldr	r0, [pc, #320]	; (80017b0 <main+0x3fc>)
 800166e:	f000 ff7f 	bl	8002570 <_ZN7STN111021commandedAirFuelRatioEv>
 8001672:	ed87 0a03 	vstr	s0, [r7, #12]

	    preS = curS; // 이전상태 현재상태로 갱신
 8001676:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <main+0x400>)
 8001678:	f993 2000 	ldrsb.w	r2, [r3]
 800167c:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <main+0x404>)
 800167e:	701a      	strb	r2, [r3, #0]

	  if (curS == ELM_SUCCESS)
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <main+0x400>)
 8001682:	f993 3000 	ldrsb.w	r3, [r3]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 8085 	bne.w	8001796 <main+0x3e2>
	  {
		  runTime = (uint16_t)tempRUN_TIME_SINCE_ENGINE_START; //엔진켜진시점 이후 운행시간
 800168c:	4a4b      	ldr	r2, [pc, #300]	; (80017bc <main+0x408>)
 800168e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001692:	8013      	strh	r3, [r2, #0]
		  fuelType = (int32_t)tempFUEL_TYPE; //사용 연료정보
 8001694:	4a4a      	ldr	r2, [pc, #296]	; (80017c0 <main+0x40c>)
 8001696:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800169a:	7013      	strb	r3, [r2, #0]
		  rpm = (uint32_t)tempRPM; //차량 RPM
 800169c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a4:	ee17 2a90 	vmov	r2, s15
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <main+0x410>)
 80016aa:	601a      	str	r2, [r3, #0]
		  kph = (uint32_t)tempVEHICLE_SPEED; //차량속도
 80016ac:	4a46      	ldr	r2, [pc, #280]	; (80017c8 <main+0x414>)
 80016ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b0:	6013      	str	r3, [r2, #0]
		  engineLoad = (uint32_t)tempENGINE_LOAD; //엔진부하
 80016b2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80016b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ba:	ee17 2a90 	vmov	r2, s15
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <main+0x418>)
 80016c0:	601a      	str	r2, [r3, #0]
		  oilTemp = (int32_t)tempENGINE_OIL_TEMP; //오일온도
 80016c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ca:	ee17 2a90 	vmov	r2, s15
 80016ce:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <main+0x41c>)
 80016d0:	601a      	str	r2, [r3, #0]
		  engineCoolantTemp = (int32_t)tempENGINE_COOLANT_TEMP; //엔진 냉각수 온도
 80016d2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016da:	ee17 2a90 	vmov	r2, s15
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <main+0x420>)
 80016e0:	601a      	str	r2, [r3, #0]
		  relativePedalPos = (uint32_t)tempRELATIVE_ACCELERATOR_PEDAL_POS;
 80016e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ea:	ee17 2a90 	vmov	r2, s15
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <main+0x424>)
 80016f0:	601a      	str	r2, [r3, #0]
		  throttle = (uint32_t)tempTHROTTLE_POSITION; //스로틀 포지션
 80016f2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80016f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fa:	ee17 2a90 	vmov	r2, s15
 80016fe:	4b37      	ldr	r3, [pc, #220]	; (80017dc <main+0x428>)
 8001700:	601a      	str	r2, [r3, #0]
		  relativeThrottle = (uint32_t)tempRELATIVE_THROTTLE_POSITION; //상대 스로틀 포지션
 8001702:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800170a:	ee17 2a90 	vmov	r2, s15
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <main+0x42c>)
 8001710:	601a      	str	r2, [r3, #0]
		  commandedThrottleActuator = (float)tempCOMMANDED_THROTTLE_ACTUATOR; //스로틀 엑츄에이터
 8001712:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <main+0x430>)
 8001714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001716:	6013      	str	r3, [r2, #0]
		  intakeAirTemp = (int32_t)tempINTAKE_AIR_TEMP; //흡입공기 온도
 8001718:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800171c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001720:	ee17 2a90 	vmov	r2, s15
 8001724:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <main+0x434>)
 8001726:	601a      	str	r2, [r3, #0]
		  mafRate = (float)tempMAF_FLOW_RATE; //공기유량
 8001728:	4a30      	ldr	r2, [pc, #192]	; (80017ec <main+0x438>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6013      	str	r3, [r2, #0]
		  manifoldPressure = (uint8_t)tempINTAKE_MANIFOLD_ABS_PRESSURE; //흡기매니폴드 절대압력
 800172e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001732:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <main+0x43c>)
 8001734:	6013      	str	r3, [r2, #0]
		  ambientAirTemp = (int16_t)tempAMBIENT_AIR_TEMP; //외기온도
 8001736:	edd7 7a06 	vldr	s15, [r7, #24]
 800173a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173e:	ee17 3a90 	vmov	r3, s15
 8001742:	b21a      	sxth	r2, r3
 8001744:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <main+0x440>)
 8001746:	801a      	strh	r2, [r3, #0]
		  distTravelWithMIL = (uint16_t)tempDISTANCE_TRAVELED_WITH_MIL_ON; //경고등 점등이후 주행거리
 8001748:	4a2b      	ldr	r2, [pc, #172]	; (80017f8 <main+0x444>)
 800174a:	8afb      	ldrh	r3, [r7, #22]
 800174c:	8013      	strh	r3, [r2, #0]
		  distSinceCodesCleared = (uint16_t)tempDIST_TRAV_SINCE_CODES_CLEARED; //DTC 소거후 주행거리
 800174e:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <main+0x448>)
 8001750:	8abb      	ldrh	r3, [r7, #20]
 8001752:	8013      	strh	r3, [r2, #0]
		  fuelLevel = (uint32_t)tempFUEL_TANK_LEVEL_INPUT; //연료레벨
 8001754:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800175c:	ee17 2a90 	vmov	r2, s15
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <main+0x44c>)
 8001762:	601a      	str	r2, [r3, #0]
		  ctrlModVoltage = (uint32_t)tempCONTROL_MODULE_VOLTAGE; //컨트롤 모듈 전압
 8001764:	edd7 7a07 	vldr	s15, [r7, #28]
 8001768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800176c:	ee17 2a90 	vmov	r2, s15
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <main+0x450>)
 8001772:	601a      	str	r2, [r3, #0]
		  obdStandards = (uint8_t)tempOBD_STANDARDS; //OBD 정보 - 수치값 wikipedia 검색
 8001774:	4a24      	ldr	r2, [pc, #144]	; (8001808 <main+0x454>)
 8001776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800177a:	7013      	strb	r3, [r2, #0]
		  commandedAirFuelRatio = (float)tempFUEL_AIR_MANDED_EQUIV_RATIO;
 800177c:	4a23      	ldr	r2, [pc, #140]	; (800180c <main+0x458>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6013      	str	r3, [r2, #0]
	   	  printf("RPM :");
 8001782:	4823      	ldr	r0, [pc, #140]	; (8001810 <main+0x45c>)
 8001784:	f004 feac 	bl	80064e0 <iprintf>
	 	  printf("%lu\r\n", rpm);
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <main+0x410>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	4821      	ldr	r0, [pc, #132]	; (8001814 <main+0x460>)
 8001790:	f004 fea6 	bl	80064e0 <iprintf>
 8001794:	e647      	b.n	8001426 <main+0x72>
 	  }

	  else
		  stn.printError(curS);
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <main+0x400>)
 8001798:	f993 3000 	ldrsb.w	r3, [r3]
 800179c:	4619      	mov	r1, r3
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <main+0x3fc>)
 80017a0:	f001 fbfa 	bl	8002f98 <_ZN7STN111010printErrorEa>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80017a4:	e63f      	b.n	8001426 <main+0x72>
 80017a6:	bf00      	nop
 80017a8:	2000052c 	.word	0x2000052c
 80017ac:	0800a534 	.word	0x0800a534
 80017b0:	20000288 	.word	0x20000288
 80017b4:	2000055c 	.word	0x2000055c
 80017b8:	2000055d 	.word	0x2000055d
 80017bc:	200004ec 	.word	0x200004ec
 80017c0:	200004ee 	.word	0x200004ee
 80017c4:	200004e0 	.word	0x200004e0
 80017c8:	200004e4 	.word	0x200004e4
 80017cc:	200004e8 	.word	0x200004e8
 80017d0:	200004f0 	.word	0x200004f0
 80017d4:	20000520 	.word	0x20000520
 80017d8:	200004f4 	.word	0x200004f4
 80017dc:	200004f8 	.word	0x200004f8
 80017e0:	200004fc 	.word	0x200004fc
 80017e4:	20000524 	.word	0x20000524
 80017e8:	20000500 	.word	0x20000500
 80017ec:	20000508 	.word	0x20000508
 80017f0:	2000051c 	.word	0x2000051c
 80017f4:	20000518 	.word	0x20000518
 80017f8:	2000050e 	.word	0x2000050e
 80017fc:	20000510 	.word	0x20000510
 8001800:	20000504 	.word	0x20000504
 8001804:	20000514 	.word	0x20000514
 8001808:	2000050c 	.word	0x2000050c
 800180c:	20000528 	.word	0x20000528
 8001810:	0800a544 	.word	0x0800a544
 8001814:	0800a54c 	.word	0x0800a54c

08001818 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b094      	sub	sp, #80	; 0x50
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	2230      	movs	r2, #48	; 0x30
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f003 ff2e 	bl	8005688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <_Z18SystemClock_Configv+0xe0>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <_Z18SystemClock_Configv+0xe0>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <_Z18SystemClock_Configv+0xe0>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <_Z18SystemClock_Configv+0xe4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <_Z18SystemClock_Configv+0xe4>)
 8001862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <_Z18SystemClock_Configv+0xe4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001874:	2301      	movs	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001878:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187e:	2302      	movs	r3, #2
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001888:	2308      	movs	r3, #8
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800188c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001892:	2304      	movs	r3, #4
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001896:	2304      	movs	r3, #4
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fa7c 	bl	8003d9c <HAL_RCC_OscConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80018b4:	f000 f824 	bl	8001900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	2302      	movs	r3, #2
 80018be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	2102      	movs	r1, #2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fcd9 	bl	800428c <HAL_RCC_ClockConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80018ea:	f000 f809 	bl	8001900 <Error_Handler>
  }
}
 80018ee:	bf00      	nop
 80018f0:	3750      	adds	r7, #80	; 0x50
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x8>
	...

0800190c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001922:	4293      	cmp	r3, r2
 8001924:	d102      	bne.n	800192c <_Z41__static_initialization_and_destruction_0ii+0x20>
STN1110 stn;
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001928:	f7ff fcf6 	bl	8001318 <_ZN7STN1110C1Ev>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000288 	.word	0x20000288

08001938 <_GLOBAL__sub_I_huart2>:
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
 800193c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001940:	2001      	movs	r0, #1
 8001942:	f7ff ffe3 	bl	800190c <_Z41__static_initialization_and_destruction_0ii>
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_MspInit+0x4c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_MspInit+0x4c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001986:	2007      	movs	r0, #7
 8001988:	f001 ff96 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800199c:	e7fe      	b.n	800199c <NMI_Handler+0x4>

0800199e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <MemManage_Handler+0x4>

080019aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <BusFault_Handler+0x4>

080019b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <UsageFault_Handler+0x4>

080019b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e4:	f001 fe54 	bl	8003690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <USART6_IRQHandler+0x10>)
 80019f2:	f002 ff57 	bl	80048a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000240 	.word	0x20000240

08001a00 <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_>:
 -------
  * bool - Whether or not the ELM327 was propperly
  initialized
*/
bool STN1110::begin(UART_HandleTypeDef *STN_PORT, const bool& debug, const uint16_t& timeout, const char& protocol, const uint16_t& payloadLen)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
	stn_port	= STN_PORT;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	601a      	str	r2, [r3, #0]
	PAYLOAD_LEN = payloadLen;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	debugMode   = debug;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	715a      	strb	r2, [r3, #5]
	timeout_ms  = timeout;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	881a      	ldrh	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224

	payload = (char*)malloc(PAYLOAD_LEN + 1); // allow for terminating '\0'
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8001a36:	3301      	adds	r3, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 fe1d 	bl	8005678 <malloc>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	// test if serial port is connected
	if (HAL_UART_Init(stn_port) != HAL_OK)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fe19 	bl	8004684 <HAL_UART_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_+0x6c>
		{
		printf("Failed to initiate stn_port\r\n");
 8001a62:	480c      	ldr	r0, [pc, #48]	; (8001a94 <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_+0x94>)
 8001a64:	f004 fdc2 	bl	80065ec <puts>
		return false;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e00f      	b.n	8001a8c <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_+0x8c>
		}

	// try to connect
	if (!initializeELM(protocol))
 8001a6c:	69b9      	ldr	r1, [r7, #24]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f814 	bl	8001a9c <_ZN7STN111013initializeELMERKc>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f083 0301 	eor.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_+0x8a>
	{
		printf("Failed to initiate\r\n");
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_+0x98>)
 8001a82:	f004 fdb3 	bl	80065ec <puts>
		return false;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_+0x8c>
	}

	return true;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	0800a948 	.word	0x0800a948
 8001a98:	0800a968 	.word	0x0800a968

08001a9c <_ZN7STN111013initializeELMERKc>:
  * C        - User2 CAN (11* bit ID, 50* kbaud)

  * --> *user adjustable
*/
bool STN1110::initializeELM(const char& protocol)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]


	char command[10] = { '\0' };
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	809a      	strh	r2, [r3, #4]
	connected = false;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	711a      	strb	r2, [r3, #4]

	sendCommand(SET_ALL_TO_DEFAULTS);
 8001aba:	494a      	ldr	r1, [pc, #296]	; (8001be4 <_ZN7STN111013initializeELMERKc+0x148>)
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fec3 	bl	8002848 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8001ac2:	2064      	movs	r0, #100	; 0x64
 8001ac4:	f001 fe04 	bl	80036d0 <HAL_Delay>

	sendCommand(RESET_ALL);
 8001ac8:	4947      	ldr	r1, [pc, #284]	; (8001be8 <_ZN7STN111013initializeELMERKc+0x14c>)
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 febc 	bl	8002848 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8001ad0:	2064      	movs	r0, #100	; 0x64
 8001ad2:	f001 fdfd 	bl	80036d0 <HAL_Delay>

	sendCommand(ECHO_OFF);
 8001ad6:	4945      	ldr	r1, [pc, #276]	; (8001bec <_ZN7STN111013initializeELMERKc+0x150>)
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 feb5 	bl	8002848 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8001ade:	2064      	movs	r0, #100	; 0x64
 8001ae0:	f001 fdf6 	bl	80036d0 <HAL_Delay>

	sendCommand(PRINTING_SPACES_OFF);
 8001ae4:	4942      	ldr	r1, [pc, #264]	; (8001bf0 <_ZN7STN111013initializeELMERKc+0x154>)
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 feae 	bl	8002848 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8001aec:	2064      	movs	r0, #100	; 0x64
 8001aee:	f001 fdef 	bl	80036d0 <HAL_Delay>

	sendCommand(ALLOW_LONG_MESSAGES);
 8001af2:	4940      	ldr	r1, [pc, #256]	; (8001bf4 <_ZN7STN111013initializeELMERKc+0x158>)
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fea7 	bl	8002848 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8001afa:	2064      	movs	r0, #100	; 0x64
 8001afc:	f001 fde8 	bl	80036d0 <HAL_Delay>

	// Set protocol
	sprintf(command, TRY_PROT_H_AUTO_SEARCH, protocol);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	493b      	ldr	r1, [pc, #236]	; (8001bf8 <_ZN7STN111013initializeELMERKc+0x15c>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 fdbf 	bl	8006690 <siprintf>

	if (sendCommand(command) == ELM_SUCCESS)
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4619      	mov	r1, r3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fe95 	bl	8002848 <_ZN7STN111011sendCommandEPKc>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00f      	beq.n	8001b4e <_ZN7STN111013initializeELMERKc+0xb2>
	{
		if (strstr(payload, "OK") != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001b34:	4931      	ldr	r1, [pc, #196]	; (8001bfc <_ZN7STN111013initializeELMERKc+0x160>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fdca 	bl	80066d0 <strstr>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <_ZN7STN111013initializeELMERKc+0xb2>
		{
			connected = true;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	711a      	strb	r2, [r3, #4]
			return connected;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	791b      	ldrb	r3, [r3, #4]
 8001b4c:	e045      	b.n	8001bda <_ZN7STN111013initializeELMERKc+0x13e>
		}
	}

	if (debugMode)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	795b      	ldrb	r3, [r3, #5]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <_ZN7STN111013initializeELMERKc+0xd6>
	{
		printf("Setting protocol via ");
 8001b56:	482a      	ldr	r0, [pc, #168]	; (8001c00 <_ZN7STN111013initializeELMERKc+0x164>)
 8001b58:	f004 fcc2 	bl	80064e0 <iprintf>
		printf("%s\r\n", TRY_PROT_H_AUTO_SEARCH);
 8001b5c:	4926      	ldr	r1, [pc, #152]	; (8001bf8 <_ZN7STN111013initializeELMERKc+0x15c>)
 8001b5e:	4829      	ldr	r0, [pc, #164]	; (8001c04 <_ZN7STN111013initializeELMERKc+0x168>)
 8001b60:	f004 fcbe 	bl	80064e0 <iprintf>
		printf(" did not work - trying via ");
 8001b64:	4828      	ldr	r0, [pc, #160]	; (8001c08 <_ZN7STN111013initializeELMERKc+0x16c>)
 8001b66:	f004 fcbb 	bl	80064e0 <iprintf>
		printf("%s\r\n", SET_PROTOCOL_TO_H_SAVE);
 8001b6a:	4928      	ldr	r1, [pc, #160]	; (8001c0c <_ZN7STN111013initializeELMERKc+0x170>)
 8001b6c:	4825      	ldr	r0, [pc, #148]	; (8001c04 <_ZN7STN111013initializeELMERKc+0x168>)
 8001b6e:	f004 fcb7 	bl	80064e0 <iprintf>
	}
	
	// Set protocol and save
	sprintf(command, SET_PROTOCOL_TO_H_SAVE, protocol);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4923      	ldr	r1, [pc, #140]	; (8001c0c <_ZN7STN111013initializeELMERKc+0x170>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 fd86 	bl	8006690 <siprintf>

    if (sendCommand(command) == ELM_SUCCESS)
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fe5c 	bl	8002848 <_ZN7STN111011sendCommandEPKc>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf0c      	ite	eq
 8001b96:	2301      	moveq	r3, #1
 8001b98:	2300      	movne	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00c      	beq.n	8001bba <_ZN7STN111013initializeELMERKc+0x11e>
    {
    	if (strstr(payload, "OK") != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001ba6:	4915      	ldr	r1, [pc, #84]	; (8001bfc <_ZN7STN111013initializeELMERKc+0x160>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fd91 	bl	80066d0 <strstr>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <_ZN7STN111013initializeELMERKc+0x11e>
    	{
    		connected = true;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	711a      	strb	r2, [r3, #4]
    	}
    }

	if (debugMode)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	795b      	ldrb	r3, [r3, #5]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <_ZN7STN111013initializeELMERKc+0x13a>
	{
		printf("Setting protocol via ");
 8001bc2:	480f      	ldr	r0, [pc, #60]	; (8001c00 <_ZN7STN111013initializeELMERKc+0x164>)
 8001bc4:	f004 fc8c 	bl	80064e0 <iprintf>
		printf("%s", SET_PROTOCOL_TO_H_SAVE);
 8001bc8:	4910      	ldr	r1, [pc, #64]	; (8001c0c <_ZN7STN111013initializeELMERKc+0x170>)
 8001bca:	4811      	ldr	r0, [pc, #68]	; (8001c10 <_ZN7STN111013initializeELMERKc+0x174>)
 8001bcc:	f004 fc88 	bl	80064e0 <iprintf>
		printf(" did not work\r\n");
 8001bd0:	4810      	ldr	r0, [pc, #64]	; (8001c14 <_ZN7STN111013initializeELMERKc+0x178>)
 8001bd2:	f004 fd0b 	bl	80065ec <puts>
	}

	return connected;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	791b      	ldrb	r3, [r3, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	0800a650 	.word	0x0800a650
 8001be8:	0800a940 	.word	0x0800a940
 8001bec:	0800a680 	.word	0x0800a680
 8001bf0:	0800a880 	.word	0x0800a880
 8001bf4:	0800a578 	.word	0x0800a578
 8001bf8:	0800a908 	.word	0x0800a908
 8001bfc:	0800a97c 	.word	0x0800a97c
 8001c00:	0800a980 	.word	0x0800a980
 8001c04:	0800a998 	.word	0x0800a998
 8001c08:	0800a9a0 	.word	0x0800a9a0
 8001c0c:	0800a8b8 	.word	0x0800a8b8
 8001c10:	0800a9bc 	.word	0x0800a9bc
 8001c14:	0800a9c0 	.word	0x0800a9c0

08001c18 <_ZN7STN111016formatQueryArrayEht>:
 Return:
 -------
  * void
*/
void STN1110::formatQueryArray(uint8_t service, uint16_t pid)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
 8001c24:	4613      	mov	r3, r2
 8001c26:	803b      	strh	r3, [r7, #0]
	if (debugMode)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	795b      	ldrb	r3, [r3, #5]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00f      	beq.n	8001c50 <_ZN7STN111016formatQueryArrayEht+0x38>
	{
		printf("Service: ");
 8001c30:	4852      	ldr	r0, [pc, #328]	; (8001d7c <_ZN7STN111016formatQueryArrayEht+0x164>)
 8001c32:	f004 fc55 	bl	80064e0 <iprintf>
		printf("%u\r\n", service);
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4851      	ldr	r0, [pc, #324]	; (8001d80 <_ZN7STN111016formatQueryArrayEht+0x168>)
 8001c3c:	f004 fc50 	bl	80064e0 <iprintf>
		printf("PID: ");
 8001c40:	4850      	ldr	r0, [pc, #320]	; (8001d84 <_ZN7STN111016formatQueryArrayEht+0x16c>)
 8001c42:	f004 fc4d 	bl	80064e0 <iprintf>
		printf("%u\r\n", pid);
 8001c46:	883b      	ldrh	r3, [r7, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	484d      	ldr	r0, [pc, #308]	; (8001d80 <_ZN7STN111016formatQueryArrayEht+0x168>)
 8001c4c:	f004 fc48 	bl	80064e0 <iprintf>
	}

	query[0] = ((service >> 4) & 0xF) + '0';
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3330      	adds	r3, #48	; 0x30
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
	query[1] = (service & 0xF) + '0';
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	3330      	adds	r3, #48	; 0x30
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249

	// determine PID length (standard queries have 16-bit PIDs,
	// but some custom queries have PIDs with 32-bit values)
	if (pid & 0xFF00)
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d03c      	beq.n	8001cf6 <_ZN7STN111016formatQueryArrayEht+0xde>
	{
		if (debugMode)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	795b      	ldrb	r3, [r3, #5]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <_ZN7STN111016formatQueryArrayEht+0x72>
			printf("Long query detected\r\n");
 8001c84:	4840      	ldr	r0, [pc, #256]	; (8001d88 <_ZN7STN111016formatQueryArrayEht+0x170>)
 8001c86:	f004 fcb1 	bl	80065ec <puts>

		longQuery = true;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f

		query[2] = ((pid >> 12) & 0xF) + '0';
 8001c92:	883b      	ldrh	r3, [r7, #0]
 8001c94:	0b1b      	lsrs	r3, r3, #12
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3330      	adds	r3, #48	; 0x30
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
		query[3] = ((pid >> 8) & 0xF) + '0';
 8001ca4:	883b      	ldrh	r3, [r7, #0]
 8001ca6:	121b      	asrs	r3, r3, #8
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3330      	adds	r3, #48	; 0x30
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
		query[4] = ((pid >> 4) & 0xF) + '0';
 8001cba:	883b      	ldrh	r3, [r7, #0]
 8001cbc:	111b      	asrs	r3, r3, #4
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3330      	adds	r3, #48	; 0x30
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
		query[5] = (pid & 0xF) + '0';
 8001cd0:	883b      	ldrh	r3, [r7, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3330      	adds	r3, #48	; 0x30
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d

		upper(query, 6);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001cea:	2206      	movs	r2, #6
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f852 	bl	8001d98 <_ZN7STN11105upperEPch>
 8001cf4:	e02f      	b.n	8001d56 <_ZN7STN111016formatQueryArrayEht+0x13e>
	}
	else
	{
		if (debugMode)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	795b      	ldrb	r3, [r3, #5]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <_ZN7STN111016formatQueryArrayEht+0xec>
			printf("Normal length query detected\r\n");
 8001cfe:	4823      	ldr	r0, [pc, #140]	; (8001d8c <_ZN7STN111016formatQueryArrayEht+0x174>)
 8001d00:	f004 fc74 	bl	80065ec <puts>

		longQuery = false;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f

		query[2] = ((pid >> 4) & 0xF) + '0';
 8001d0c:	883b      	ldrh	r3, [r7, #0]
 8001d0e:	111b      	asrs	r3, r3, #4
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3330      	adds	r3, #48	; 0x30
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
		query[3] = (pid & 0xF) + '0';
 8001d22:	883b      	ldrh	r3, [r7, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3330      	adds	r3, #48	; 0x30
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
		query[4] = '\0';
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
		query[5] = '\0';
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d

		upper(query, 4);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f821 	bl	8001d98 <_ZN7STN11105upperEPch>
	}

	if (debugMode)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	795b      	ldrb	r3, [r3, #5]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <_ZN7STN111016formatQueryArrayEht+0x15a>
	{
		printf("Query string: ");
 8001d5e:	480c      	ldr	r0, [pc, #48]	; (8001d90 <_ZN7STN111016formatQueryArrayEht+0x178>)
 8001d60:	f004 fbbe 	bl	80064e0 <iprintf>
		printf("%s\r\n", query);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <_ZN7STN111016formatQueryArrayEht+0x17c>)
 8001d6e:	f004 fbb7 	bl	80064e0 <iprintf>
	}
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	0800a9d0 	.word	0x0800a9d0
 8001d80:	0800a9dc 	.word	0x0800a9dc
 8001d84:	0800a9e4 	.word	0x0800a9e4
 8001d88:	0800a9ec 	.word	0x0800a9ec
 8001d8c:	0800aa04 	.word	0x0800aa04
 8001d90:	0800aa24 	.word	0x0800aa24
 8001d94:	0800a998 	.word	0x0800a998

08001d98 <_ZN7STN11105upperEPch>:
 Return:
 -------
  * void
*/
void STN1110::upper(char string[], uint8_t buflen)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	4613      	mov	r3, r2
 8001da4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < buflen; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
 8001daa:	7dfa      	ldrb	r2, [r7, #23]
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d22a      	bcs.n	8001e08 <_ZN7STN11105upperEPch+0x70>
	{
		if (string[i] > 'Z')
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	4413      	add	r3, r2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b5a      	cmp	r3, #90	; 0x5a
 8001dbc:	d90a      	bls.n	8001dd4 <_ZN7STN11105upperEPch+0x3c>
			string[i] -= 32;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	440b      	add	r3, r1
 8001dcc:	3a20      	subs	r2, #32
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e015      	b.n	8001e00 <_ZN7STN11105upperEPch+0x68>
		else if ((string[i] > '9') && (string[i] < 'A'))
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4413      	add	r3, r2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b39      	cmp	r3, #57	; 0x39
 8001dde:	d90f      	bls.n	8001e00 <_ZN7STN11105upperEPch+0x68>
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d809      	bhi.n	8001e00 <_ZN7STN11105upperEPch+0x68>
			string[i] += 7;
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4413      	add	r3, r2
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	440b      	add	r3, r1
 8001dfa:	3207      	adds	r2, #7
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < buflen; i++)
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	3301      	adds	r3, #1
 8001e04:	75fb      	strb	r3, [r7, #23]
 8001e06:	e7d0      	b.n	8001daa <_ZN7STN11105upperEPch+0x12>
	}
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_ZN7STN11107timeoutEv>:
 Return:
 -------
  * bool - whether or not a time-out has occurred
*/
bool STN1110::timeout()
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	currentTime = millis();
 8001e1c:	f001 fc4c 	bl	80036b8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	if ((currentTime - previousTime) >= timeout_ms)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	f8b2 2224 	ldrh.w	r2, [r2, #548]	; 0x224
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d301      	bcc.n	8001e44 <_ZN7STN11107timeoutEv+0x30>
		return true;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <_ZN7STN11107timeoutEv+0x32>
	return false;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_ZN7STN11104ctoiEh>:
 Return:
 -------
  * uint8_t - int value of parameter "value"
*/
uint8_t STN1110::ctoi(uint8_t value)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
	if (value >= 'A')
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d903      	bls.n	8001e68 <_ZN7STN11104ctoiEh+0x1a>
		return value - 'A' + 10;
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	3b37      	subs	r3, #55	; 0x37
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e002      	b.n	8001e6e <_ZN7STN11104ctoiEh+0x20>
	else
		return value - '0';
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	3b30      	subs	r3, #48	; 0x30
 8001e6c:	b2db      	uxtb	r3, r3
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_ZN7STN11109nextIndexEPKcS1_h>:
  numOccur'th instance of target in str
*/
int8_t STN1110::nextIndex(char const *str,
                         char const *target,
                         uint8_t numOccur=1)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b088      	sub	sp, #32
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	70fb      	strb	r3, [r7, #3]
	char const *p = str;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	61fb      	str	r3, [r7, #28]
	char const *r = str;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	617b      	str	r3, [r7, #20]
	uint8_t count;

	for (count = 0; ; ++count)
 8001e90:	2300      	movs	r3, #0
 8001e92:	76fb      	strb	r3, [r7, #27]
	{
		p = strstr(p, target);
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	69f8      	ldr	r0, [r7, #28]
 8001e98:	f004 fc1a 	bl	80066d0 <strstr>
 8001e9c:	61f8      	str	r0, [r7, #28]

		if (count == (numOccur - 1))
 8001e9e:	7efa      	ldrb	r2, [r7, #27]
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d009      	beq.n	8001ebc <_ZN7STN11109nextIndexEPKcS1_h+0x42>
			break;

		if (!p)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <_ZN7STN11109nextIndexEPKcS1_h+0x46>
			break;

		p++;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
	for (count = 0; ; ++count)
 8001eb4:	7efb      	ldrb	r3, [r7, #27]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	76fb      	strb	r3, [r7, #27]
		p = strstr(p, target);
 8001eba:	e7eb      	b.n	8001e94 <_ZN7STN11109nextIndexEPKcS1_h+0x1a>
			break;
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <_ZN7STN11109nextIndexEPKcS1_h+0x48>
			break;
 8001ec0:	bf00      	nop
	}

	if (!p)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_ZN7STN11109nextIndexEPKcS1_h+0x54>
		return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ecc:	e003      	b.n	8001ed6 <_ZN7STN11109nextIndexEPKcS1_h+0x5c>

	return p - r;
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	b25b      	sxtb	r3, r3
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>:




float STN1110::conditionResponse(const uint64_t& response, const uint8_t& numExpectedBytes, const float& scaleFactor, const float& bias)
{
 8001ede:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
	return ((response >> (((numPayChars / 2) - numExpectedBytes) * 8)) * scaleFactor) + bias;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	68f9      	ldr	r1, [r7, #12]
 8001ef4:	f891 1222 	ldrb.w	r1, [r1, #546]	; 0x222
 8001ef8:	0849      	lsrs	r1, r1, #1
 8001efa:	b2c9      	uxtb	r1, r1
 8001efc:	4608      	mov	r0, r1
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	7809      	ldrb	r1, [r1, #0]
 8001f02:	1a41      	subs	r1, r0, r1
 8001f04:	00c9      	lsls	r1, r1, #3
 8001f06:	f1c1 0620 	rsb	r6, r1, #32
 8001f0a:	f1a1 0020 	sub.w	r0, r1, #32
 8001f0e:	fa22 f401 	lsr.w	r4, r2, r1
 8001f12:	fa03 f606 	lsl.w	r6, r3, r6
 8001f16:	4334      	orrs	r4, r6
 8001f18:	fa23 f000 	lsr.w	r0, r3, r0
 8001f1c:	4304      	orrs	r4, r0
 8001f1e:	fa23 f501 	lsr.w	r5, r3, r1
 8001f22:	4620      	mov	r0, r4
 8001f24:	4629      	mov	r1, r5
 8001f26:	f7fe ff7f 	bl	8000e28 <__aeabi_ul2f>
 8001f2a:	ee07 0a10 	vmov	s14, r0
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001f42:	eeb0 0a67 	vmov.f32	s0, s15
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f4c <_ZN7STN111014flushInputBuffEv>:
 Return:
 -------
  * void
*/
void STN1110::flushInputBuff()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	if (debugMode)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	795b      	ldrb	r3, [r3, #5]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <_ZN7STN111014flushInputBuffEv+0x16>
		printf("Clearing input serial Ring buffer\r\n");
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <_ZN7STN111014flushInputBuffEv+0x24>)
 8001f5e:	f004 fb45 	bl	80065ec <puts>

	delimiter_found();
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f001 f8ec 	bl	8003140 <_ZN7STN111015delimiter_foundEv>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	0800aa34 	.word	0x0800aa34

08001f74 <_ZN7STN11108queryPIDEht>:
 -------
  * bool - Whether or not the query was submitted successfully
*/
bool STN1110::queryPID(uint8_t service,
                      uint16_t pid)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
 8001f80:	4613      	mov	r3, r2
 8001f82:	803b      	strh	r3, [r7, #0]
	formatQueryArray(service, pid);
 8001f84:	883a      	ldrh	r2, [r7, #0]
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fe44 	bl	8001c18 <_ZN7STN111016formatQueryArrayEht>
	sendCommand(query);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fc55 	bl	8002848 <_ZN7STN111011sendCommandEPKc>
	
	return connected;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	791b      	ldrb	r3, [r3, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <_ZN7STN111010engineLoadEv>:
 Return:
 -------
  * float - Engine load %
*/
float STN1110::engineLoad()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, ENGINE_LOAD))
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffdb 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01d      	beq.n	8002000 <_ZN7STN111010engineLoadEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fe17 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <_ZN7STN111010engineLoadEv+0x64>)
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	f107 0018 	add.w	r0, r7, #24
 8001fe4:	f107 0217 	add.w	r2, r7, #23
 8001fe8:	f107 0108 	add.w	r1, r7, #8
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff72 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8001ffa:	eef0 7a40 	vmov.f32	s15, s0
 8001ffe:	e001      	b.n	8002004 <_ZN7STN111010engineLoadEv+0x58>

	return ELM_GENERAL_ERROR;
 8002000:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002004:	eeb0 0a67 	vmov.f32	s0, s15
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	3ec8c8c9 	.word	0x3ec8c8c9

08002014 <_ZN7STN111017engineCoolantTempEv>:
 Return:
 -------
  * float - Engine load %
*/
float STN1110::engineCoolantTemp()
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af02      	add	r7, sp, #8
 800201a:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, ENGINE_COOLANT_TEMP))
 800201c:	2205      	movs	r2, #5
 800201e:	2101      	movs	r1, #1
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffa7 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01d      	beq.n	8002068 <_ZN7STN111017engineCoolantTempEv+0x54>
		return conditionResponse(findResponse(), 1, 1, -40.0);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fde3 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800203a:	2301      	movs	r3, #1
 800203c:	75fb      	strb	r3, [r7, #23]
 800203e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <_ZN7STN111017engineCoolantTempEv+0x64>)
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	f107 0018 	add.w	r0, r7, #24
 800204c:	f107 0217 	add.w	r2, r7, #23
 8002050:	f107 0108 	add.w	r1, r7, #8
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4603      	mov	r3, r0
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff3e 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8002062:	eef0 7a40 	vmov.f32	s15, s0
 8002066:	e001      	b.n	800206c <_ZN7STN111017engineCoolantTempEv+0x58>

	return ELM_GENERAL_ERROR;
 8002068:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 800206c:	eeb0 0a67 	vmov.f32	s0, s15
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	c2200000 	.word	0xc2200000

0800207c <_ZN7STN111016manifoldPressureEv>:
 Return:
 -------
  * uint8_t - Intake manifold absolute pressure in kPa
*/
uint8_t STN1110::manifoldPressure()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af02      	add	r7, sp, #8
 8002082:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, INTAKE_MANIFOLD_ABS_PRESSURE))
 8002084:	220b      	movs	r2, #11
 8002086:	2101      	movs	r1, #1
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff73 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d024      	beq.n	80020de <_ZN7STN111016manifoldPressureEv+0x62>
		return conditionResponse(findResponse(), 1);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fdaf 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
 80020a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	f107 0018 	add.w	r0, r7, #24
 80020b6:	f107 0217 	add.w	r2, r7, #23
 80020ba:	f107 0108 	add.w	r1, r7, #8
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	4603      	mov	r3, r0
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ff09 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80020cc:	eef0 7a40 	vmov.f32	s15, s0
 80020d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d4:	edc7 7a00 	vstr	s15, [r7]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	e000      	b.n	80020e0 <_ZN7STN111016manifoldPressureEv+0x64>

	return ELM_GENERAL_ERROR;
 80020de:	23ff      	movs	r3, #255	; 0xff
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZN7STN11103rpmEv>:
 Return:
 -------
  * float - Vehicle RPM
*/
float STN1110::rpm()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, ENGINE_RPM))
 80020f0:	220c      	movs	r2, #12
 80020f2:	2101      	movs	r1, #1
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff3d 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01e      	beq.n	800213e <_ZN7STN11103rpmEv+0x56>
		return conditionResponse(findResponse(), 2, 1.0 / 4.0);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fd79 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800210e:	2302      	movs	r3, #2
 8002110:	75fb      	strb	r3, [r7, #23]
 8002112:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	f107 0018 	add.w	r0, r7, #24
 8002122:	f107 0217 	add.w	r2, r7, #23
 8002126:	f107 0108 	add.w	r1, r7, #8
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4603      	mov	r3, r0
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fed3 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8002138:	eef0 7a40 	vmov.f32	s15, s0
 800213c:	e001      	b.n	8002142 <_ZN7STN11103rpmEv+0x5a>

	return ELM_GENERAL_ERROR;
 800213e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002142:	eeb0 0a67 	vmov.f32	s0, s15
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN7STN11103kphEv>:
 Return:
 -------
  * int32_t - Vehicle speed in kph
*/
int32_t STN1110::kph()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af02      	add	r7, sp, #8
 8002152:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, VEHICLE_SPEED))
 8002154:	220d      	movs	r2, #13
 8002156:	2101      	movs	r1, #1
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff0b 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d022      	beq.n	80021aa <_ZN7STN11103kphEv+0x5e>
		return conditionResponse(findResponse(), 1);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fd47 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
 8002176:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	f107 0018 	add.w	r0, r7, #24
 8002186:	f107 0217 	add.w	r2, r7, #23
 800218a:	f107 0108 	add.w	r1, r7, #8
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4603      	mov	r3, r0
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fea1 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 800219c:	eef0 7a40 	vmov.f32	s15, s0
 80021a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a4:	ee17 3a90 	vmov	r3, s15
 80021a8:	e001      	b.n	80021ae <_ZN7STN11103kphEv+0x62>

	return ELM_GENERAL_ERROR;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <_ZN7STN111013intakeAirTempEv>:
 Return:
 -------
  * float - Intake air temperature in C
*/
float STN1110::intakeAirTemp()
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af02      	add	r7, sp, #8
 80021be:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, INTAKE_AIR_TEMP))
 80021c0:	220f      	movs	r2, #15
 80021c2:	2101      	movs	r1, #1
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fed5 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01d      	beq.n	800220c <_ZN7STN111013intakeAirTempEv+0x54>
		return conditionResponse(findResponse(), 1, 1, -40.0);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fd11 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
 80021e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <_ZN7STN111013intakeAirTempEv+0x64>)
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	f107 0018 	add.w	r0, r7, #24
 80021f0:	f107 0217 	add.w	r2, r7, #23
 80021f4:	f107 0108 	add.w	r1, r7, #8
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4603      	mov	r3, r0
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fe6c 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8002206:	eef0 7a40 	vmov.f32	s15, s0
 800220a:	e001      	b.n	8002210 <_ZN7STN111013intakeAirTempEv+0x58>

	return ELM_GENERAL_ERROR;
 800220c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	c2200000 	.word	0xc2200000

08002220 <_ZN7STN11107mafRateEv>:
 Return:
 -------
  * float - Mass air flow sensor (MAF) air flow rate rate in g/s
*/
float STN1110::mafRate()
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, MAF_FLOW_RATE))
 8002228:	2210      	movs	r2, #16
 800222a:	2101      	movs	r1, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fea1 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01d      	beq.n	8002274 <_ZN7STN11107mafRateEv+0x54>
		return conditionResponse(findResponse(), 2, 1.0 / 100.0);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fcdd 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002246:	2302      	movs	r3, #2
 8002248:	75fb      	strb	r3, [r7, #23]
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <_ZN7STN11107mafRateEv+0x64>)
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	f107 0018 	add.w	r0, r7, #24
 8002258:	f107 0217 	add.w	r2, r7, #23
 800225c:	f107 0108 	add.w	r1, r7, #8
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	4603      	mov	r3, r0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fe38 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 800226e:	eef0 7a40 	vmov.f32	s15, s0
 8002272:	e001      	b.n	8002278 <_ZN7STN11107mafRateEv+0x58>

	return ELM_GENERAL_ERROR;
 8002274:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002278:	eeb0 0a67 	vmov.f32	s0, s15
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	3c23d70a 	.word	0x3c23d70a

08002288 <_ZN7STN11108throttleEv>:
 Return:
 -------
  * float - Throttle position in %
*/
float STN1110::throttle()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, THROTTLE_POSITION))
 8002290:	2211      	movs	r2, #17
 8002292:	2101      	movs	r1, #1
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fe6d 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01d      	beq.n	80022dc <_ZN7STN11108throttleEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fca9 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <_ZN7STN11108throttleEv+0x64>)
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	f107 0018 	add.w	r0, r7, #24
 80022c0:	f107 0217 	add.w	r2, r7, #23
 80022c4:	f107 0108 	add.w	r1, r7, #8
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4603      	mov	r3, r0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fe04 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80022d6:	eef0 7a40 	vmov.f32	s15, s0
 80022da:	e001      	b.n	80022e0 <_ZN7STN11108throttleEv+0x58>

	return ELM_GENERAL_ERROR;
 80022dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 80022e0:	eeb0 0a67 	vmov.f32	s0, s15
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	3ec8c8c9 	.word	0x3ec8c8c9

080022f0 <_ZN7STN111012obdStandardsEv>:
 Return:
 -------
  * uint8_t - Bit encoded (https://en.wikipedia.org/wiki/OBD-II_PIDs#Service_01_PID_1C)
*/
uint8_t STN1110::obdStandards()
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, OBD_STANDARDS))
 80022f8:	221c      	movs	r2, #28
 80022fa:	2101      	movs	r1, #1
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fe39 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d024      	beq.n	8002352 <_ZN7STN111012obdStandardsEv+0x62>
		return conditionResponse(findResponse(), 1);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fc75 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
 800231a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	f107 0018 	add.w	r0, r7, #24
 800232a:	f107 0217 	add.w	r2, r7, #23
 800232e:	f107 0108 	add.w	r1, r7, #8
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4603      	mov	r3, r0
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff fdcf 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8002340:	eef0 7a40 	vmov.f32	s15, s0
 8002344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002348:	edc7 7a00 	vstr	s15, [r7]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e000      	b.n	8002354 <_ZN7STN111012obdStandardsEv+0x64>

	return ELM_GENERAL_ERROR;
 8002352:	23ff      	movs	r3, #255	; 0xff
}
 8002354:	4618      	mov	r0, r3
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_ZN7STN11107runTimeEv>:
 Return:
 -------
  * uint16_t - Run time since engine start in s
*/
uint16_t STN1110::runTime()
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af02      	add	r7, sp, #8
 8002362:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, RUN_TIME_SINCE_ENGINE_START))
 8002364:	221f      	movs	r2, #31
 8002366:	2101      	movs	r1, #1
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fe03 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <_ZN7STN11107runTimeEv+0x60>
		return conditionResponse(findResponse(), 2);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fc3f 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002382:	2302      	movs	r3, #2
 8002384:	75fb      	strb	r3, [r7, #23]
 8002386:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	f107 0018 	add.w	r0, r7, #24
 8002396:	f107 0217 	add.w	r2, r7, #23
 800239a:	f107 0108 	add.w	r1, r7, #8
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4603      	mov	r3, r0
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fd99 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80023ac:	eef0 7a40 	vmov.f32	s15, s0
 80023b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b4:	ee17 3a90 	vmov	r3, s15
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	e001      	b.n	80023c0 <_ZN7STN11107runTimeEv+0x64>

	return ELM_GENERAL_ERROR;
 80023bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_ZN7STN111017distTravelWithMILEv>:
 Return:
 -------
  * uint16_t - Distance traveled with malfunction indicator lamp (MIL) on in km
*/
uint16_t STN1110::distTravelWithMIL()
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, DISTANCE_TRAVELED_WITH_MIL_ON))
 80023d0:	2221      	movs	r2, #33	; 0x21
 80023d2:	2101      	movs	r1, #1
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fdcd 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <_ZN7STN111017distTravelWithMILEv+0x60>
		return conditionResponse(findResponse(), 2);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fc09 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80023ee:	2302      	movs	r3, #2
 80023f0:	75fb      	strb	r3, [r7, #23]
 80023f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	f107 0018 	add.w	r0, r7, #24
 8002402:	f107 0217 	add.w	r2, r7, #23
 8002406:	f107 0108 	add.w	r1, r7, #8
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4603      	mov	r3, r0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fd63 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8002418:	eef0 7a40 	vmov.f32	s15, s0
 800241c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002420:	ee17 3a90 	vmov	r3, s15
 8002424:	b29b      	uxth	r3, r3
 8002426:	e001      	b.n	800242c <_ZN7STN111017distTravelWithMILEv+0x64>

	return ELM_GENERAL_ERROR;
 8002428:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800242c:	4618      	mov	r0, r3
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_ZN7STN11109fuelLevelEv>:
 Return:
 -------
  * float - Fuel tank level input in %
*/
float STN1110::fuelLevel()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, FUEL_TANK_LEVEL_INPUT))
 800243c:	222f      	movs	r2, #47	; 0x2f
 800243e:	2101      	movs	r1, #1
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fd97 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01d      	beq.n	8002488 <_ZN7STN11109fuelLevelEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fbd3 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <_ZN7STN11109fuelLevelEv+0x64>)
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	f107 0018 	add.w	r0, r7, #24
 800246c:	f107 0217 	add.w	r2, r7, #23
 8002470:	f107 0108 	add.w	r1, r7, #8
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	4603      	mov	r3, r0
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fd2e 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8002482:	eef0 7a40 	vmov.f32	s15, s0
 8002486:	e001      	b.n	800248c <_ZN7STN11109fuelLevelEv+0x58>

	return ELM_GENERAL_ERROR;
 8002488:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 800248c:	eeb0 0a67 	vmov.f32	s0, s15
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	3ec8c8c9 	.word	0x3ec8c8c9

0800249c <_ZN7STN111021distSinceCodesClearedEv>:
 Return:
 -------
  * uint16_t - Distance traveled since codes cleared in km
*/
uint16_t STN1110::distSinceCodesCleared()
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, DIST_TRAV_SINCE_CODES_CLEARED))
 80024a4:	2231      	movs	r2, #49	; 0x31
 80024a6:	2101      	movs	r1, #1
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff fd63 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <_ZN7STN111021distSinceCodesClearedEv+0x60>
		return conditionResponse(findResponse(), 2);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fb9f 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80024c2:	2302      	movs	r3, #2
 80024c4:	75fb      	strb	r3, [r7, #23]
 80024c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	f107 0018 	add.w	r0, r7, #24
 80024d6:	f107 0217 	add.w	r2, r7, #23
 80024da:	f107 0108 	add.w	r1, r7, #8
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4603      	mov	r3, r0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fcf9 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80024ec:	eef0 7a40 	vmov.f32	s15, s0
 80024f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f4:	ee17 3a90 	vmov	r3, s15
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	e001      	b.n	8002500 <_ZN7STN111021distSinceCodesClearedEv+0x64>

	return ELM_GENERAL_ERROR;
 80024fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8002500:	4618      	mov	r0, r3
 8002502:	3720      	adds	r7, #32
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN7STN111014ctrlModVoltageEv>:
 Return:
 -------
  * float - Control module voltage in V
*/
float STN1110::ctrlModVoltage()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af02      	add	r7, sp, #8
 800250e:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, CONTROL_MODULE_VOLTAGE))
 8002510:	2242      	movs	r2, #66	; 0x42
 8002512:	2101      	movs	r1, #1
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff fd2d 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01d      	beq.n	800255c <_ZN7STN111014ctrlModVoltageEv+0x54>
		return conditionResponse(findResponse(), 2, 1.0 / 1000.0);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fb69 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800252e:	2302      	movs	r3, #2
 8002530:	75fb      	strb	r3, [r7, #23]
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <_ZN7STN111014ctrlModVoltageEv+0x64>)
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	f107 0018 	add.w	r0, r7, #24
 8002540:	f107 0217 	add.w	r2, r7, #23
 8002544:	f107 0108 	add.w	r1, r7, #8
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4603      	mov	r3, r0
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fcc4 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8002556:	eef0 7a40 	vmov.f32	s15, s0
 800255a:	e001      	b.n	8002560 <_ZN7STN111014ctrlModVoltageEv+0x58>

	return ELM_GENERAL_ERROR;
 800255c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002560:	eeb0 0a67 	vmov.f32	s0, s15
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	3a83126f 	.word	0x3a83126f

08002570 <_ZN7STN111021commandedAirFuelRatioEv>:
 Return:
 -------
  * float - Commanded air-fuel equivalence ratio
*/
float STN1110::commandedAirFuelRatio()
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af02      	add	r7, sp, #8
 8002576:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, FUEL_AIR_COMMANDED_EQUIV_RATIO))
 8002578:	2244      	movs	r2, #68	; 0x44
 800257a:	2101      	movs	r1, #1
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fcf9 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01e      	beq.n	80025c6 <_ZN7STN111021commandedAirFuelRatioEv+0x56>
		return conditionResponse(findResponse(), 2, 2.0 / 65536.0);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb35 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002596:	2302      	movs	r3, #2
 8002598:	75fb      	strb	r3, [r7, #23]
 800259a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	f107 0018 	add.w	r0, r7, #24
 80025aa:	f107 0217 	add.w	r2, r7, #23
 80025ae:	f107 0108 	add.w	r1, r7, #8
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4603      	mov	r3, r0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fc8f 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80025c0:	eef0 7a40 	vmov.f32	s15, s0
 80025c4:	e001      	b.n	80025ca <_ZN7STN111021commandedAirFuelRatioEv+0x5a>

	return ELM_GENERAL_ERROR;
 80025c6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 80025ca:	eeb0 0a67 	vmov.f32	s0, s15
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_ZN7STN111016relativeThrottleEv>:
 Return:
 -------
  * float - Relative throttle position in %
*/
float STN1110::relativeThrottle()
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, RELATIVE_THROTTLE_POSITION))
 80025dc:	2245      	movs	r2, #69	; 0x45
 80025de:	2101      	movs	r1, #1
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fcc7 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01d      	beq.n	8002628 <_ZN7STN111016relativeThrottleEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fb03 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <_ZN7STN111016relativeThrottleEv+0x64>)
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	f107 0018 	add.w	r0, r7, #24
 800260c:	f107 0217 	add.w	r2, r7, #23
 8002610:	f107 0108 	add.w	r1, r7, #8
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4603      	mov	r3, r0
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fc5e 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8002622:	eef0 7a40 	vmov.f32	s15, s0
 8002626:	e001      	b.n	800262c <_ZN7STN111016relativeThrottleEv+0x58>

	return ELM_GENERAL_ERROR;
 8002628:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	3ec8c8c9 	.word	0x3ec8c8c9

0800263c <_ZN7STN111014ambientAirTempEv>:
 Return:
 -------
  * float - Ambient air temperature in C
*/
float STN1110::ambientAirTemp()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af02      	add	r7, sp, #8
 8002642:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, AMBIENT_AIR_TEMP))
 8002644:	2246      	movs	r2, #70	; 0x46
 8002646:	2101      	movs	r1, #1
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fc93 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01d      	beq.n	8002690 <_ZN7STN111014ambientAirTempEv+0x54>
		return conditionResponse(findResponse(), 1, 1, -40);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 facf 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
 8002666:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <_ZN7STN111014ambientAirTempEv+0x64>)
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	f107 0018 	add.w	r0, r7, #24
 8002674:	f107 0217 	add.w	r2, r7, #23
 8002678:	f107 0108 	add.w	r1, r7, #8
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	4603      	mov	r3, r0
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fc2a 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 800268a:	eef0 7a40 	vmov.f32	s15, s0
 800268e:	e001      	b.n	8002694 <_ZN7STN111014ambientAirTempEv+0x58>

	return ELM_GENERAL_ERROR;
 8002690:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002694:	eeb0 0a67 	vmov.f32	s0, s15
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	c2200000 	.word	0xc2200000

080026a4 <_ZN7STN111025commandedThrottleActuatorEv>:
 Return:
 -------
  * float - Commanded throttle actuator in %
*/
float STN1110::commandedThrottleActuator()
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, COMMANDED_THROTTLE_ACTUATOR))
 80026ac:	224c      	movs	r2, #76	; 0x4c
 80026ae:	2101      	movs	r1, #1
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff fc5f 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01d      	beq.n	80026f8 <_ZN7STN111025commandedThrottleActuatorEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa9b 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <_ZN7STN111025commandedThrottleActuatorEv+0x64>)
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	f107 0018 	add.w	r0, r7, #24
 80026dc:	f107 0217 	add.w	r2, r7, #23
 80026e0:	f107 0108 	add.w	r1, r7, #8
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4603      	mov	r3, r0
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fbf6 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80026f2:	eef0 7a40 	vmov.f32	s15, s0
 80026f6:	e001      	b.n	80026fc <_ZN7STN111025commandedThrottleActuatorEv+0x58>

	return ELM_GENERAL_ERROR;
 80026f8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 80026fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	3ec8c8c9 	.word	0x3ec8c8c9

0800270c <_ZN7STN11108fuelTypeEv>:
 Return:
 -------
  * uint8_t - Bit encoded (https://en.wikipedia.org/wiki/OBD-II_PIDs#Fuel_Type_Coding)
*/
uint8_t STN1110::fuelType()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af02      	add	r7, sp, #8
 8002712:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, FUEL_TYPE))
 8002714:	2251      	movs	r2, #81	; 0x51
 8002716:	2101      	movs	r1, #1
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fc2b 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d024      	beq.n	800276e <_ZN7STN11108fuelTypeEv+0x62>
		return conditionResponse(findResponse(), 1);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fa67 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
 8002736:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	f107 0018 	add.w	r0, r7, #24
 8002746:	f107 0217 	add.w	r2, r7, #23
 800274a:	f107 0108 	add.w	r1, r7, #8
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4603      	mov	r3, r0
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fbc1 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 800275c:	eef0 7a40 	vmov.f32	s15, s0
 8002760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002764:	edc7 7a00 	vstr	s15, [r7]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e000      	b.n	8002770 <_ZN7STN11108fuelTypeEv+0x64>

	return ELM_GENERAL_ERROR;
 800276e:	23ff      	movs	r3, #255	; 0xff
}
 8002770:	4618      	mov	r0, r3
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_ZN7STN111016relativePedalPosEv>:
 Return:
 -------
  * float - Relative accelerator pedal position in %
*/
float STN1110::relativePedalPos()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af02      	add	r7, sp, #8
 800277e:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, RELATIVE_ACCELERATOR_PEDAL_POS))
 8002780:	225a      	movs	r2, #90	; 0x5a
 8002782:	2101      	movs	r1, #1
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff fbf5 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01d      	beq.n	80027cc <_ZN7STN111016relativePedalPosEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fa31 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <_ZN7STN111016relativePedalPosEv+0x64>)
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	f107 0018 	add.w	r0, r7, #24
 80027b0:	f107 0217 	add.w	r2, r7, #23
 80027b4:	f107 0108 	add.w	r1, r7, #8
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	4603      	mov	r3, r0
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fb8c 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80027c6:	eef0 7a40 	vmov.f32	s15, s0
 80027ca:	e001      	b.n	80027d0 <_ZN7STN111016relativePedalPosEv+0x58>

	return ELM_GENERAL_ERROR;
 80027cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 80027d0:	eeb0 0a67 	vmov.f32	s0, s15
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	3ec8c8c9 	.word	0x3ec8c8c9

080027e0 <_ZN7STN11107oilTempEv>:
 Return:
 -------
  * float - Engine oil temperature in C
*/
float STN1110::oilTemp()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, ENGINE_OIL_TEMP))
 80027e8:	225c      	movs	r2, #92	; 0x5c
 80027ea:	2101      	movs	r1, #1
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fbc1 	bl	8001f74 <_ZN7STN11108queryPIDEht>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01d      	beq.n	8002834 <_ZN7STN11107oilTempEv+0x54>
		return conditionResponse(findResponse(), 1, 1, -40.0);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f9fd 	bl	8002bf8 <_ZN7STN111012findResponseEv>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
 800280a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <_ZN7STN11107oilTempEv+0x64>)
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	f107 0018 	add.w	r0, r7, #24
 8002818:	f107 0217 	add.w	r2, r7, #23
 800281c:	f107 0108 	add.w	r1, r7, #8
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4603      	mov	r3, r0
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fb58 	bl	8001ede <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 800282e:	eef0 7a40 	vmov.f32	s15, s0
 8002832:	e001      	b.n	8002838 <_ZN7STN11107oilTempEv+0x58>

	return ELM_GENERAL_ERROR;
 8002834:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8002838:	eeb0 0a67 	vmov.f32	s0, s15
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	c2200000 	.word	0xc2200000

08002848 <_ZN7STN111011sendCommandEPKc>:
 Return:
 -------
  * int8_t - Response status
*/
int8_t STN1110::sendCommand(const char *cmd)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b095      	sub	sp, #84	; 0x54
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive_IT(stn_port, &rxData, 1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800285c:	2201      	movs	r2, #1
 800285e:	4619      	mov	r1, r3
 8002860:	f001 ffef 	bl	8004842 <HAL_UART_Receive_IT>

	uint8_t counter = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	connected = false;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	711a      	strb	r2, [r3, #4]


	char txBuf[64];
	memset(txBuf, '\0', 64);
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f002 ff05 	bl	8005688 <memset>
	snprintf(txBuf, 64, "%s\r", cmd);
 800287e:	f107 000c 	add.w	r0, r7, #12
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	4aad      	ldr	r2, [pc, #692]	; (8002b3c <_ZN7STN111011sendCommandEPKc+0x2f4>)
 8002886:	2140      	movs	r1, #64	; 0x40
 8002888:	f003 fece 	bl	8006628 <sniprintf>

    


	// clear payload buffer
	memset(payload, '\0', PAYLOAD_LEN + 1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8002898:	3301      	adds	r3, #1
 800289a:	461a      	mov	r2, r3
 800289c:	2100      	movs	r1, #0
 800289e:	f002 fef3 	bl	8005688 <memset>

	// reset input serial buffer and number of received bytes
	recBytes = 0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
	flushInputBuff();
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fb4e 	bl	8001f4c <_ZN7STN111014flushInputBuffEv>

	if (debugMode)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	795b      	ldrb	r3, [r3, #5]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <_ZN7STN111011sendCommandEPKc+0x7e>
	{
		printf("Sending the following command/query: ");
 80028b8:	48a1      	ldr	r0, [pc, #644]	; (8002b40 <_ZN7STN111011sendCommandEPKc+0x2f8>)
 80028ba:	f003 fe11 	bl	80064e0 <iprintf>
		printf("%s\r\n", cmd);
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	48a0      	ldr	r0, [pc, #640]	; (8002b44 <_ZN7STN111011sendCommandEPKc+0x2fc>)
 80028c2:	f003 fe0d 	bl	80064e0 <iprintf>
	}

	HAL_UART_Transmit(stn_port, (uint8_t *)txBuf, strlen(txBuf), 0xFFFF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681c      	ldr	r4, [r3, #0]
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fc86 	bl	80001e0 <strlen>
 80028d4:	4603      	mov	r3, r0
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	f107 010c 	add.w	r1, r7, #12
 80028dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e0:	4620      	mov	r0, r4
 80028e2:	f001 ff1c 	bl	800471e <HAL_UART_Transmit>
	HAL_Delay(1);
 80028e6:	2001      	movs	r0, #1
 80028e8:	f000 fef2 	bl	80036d0 <HAL_Delay>


	// prime the timeout timer
	previousTime = millis();
 80028ec:	f000 fee4 	bl	80036b8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	currentTime  = previousTime;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 2254 	ldr.w	r2, [r3, #596]	; 0x254
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	// end marker is read or a timeout has occurred
    // last valid idx is PAYLOAD_LEN but want to keep on free for terminating '\0'
    // so limit counter to < PAYLOAD_LEN


	while ((counter < PAYLOAD_LEN) && !timeout())
 8002904:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	f8b2 2210 	ldrh.w	r2, [r2, #528]	; 0x210
 800290e:	4293      	cmp	r3, r2
 8002910:	da0a      	bge.n	8002928 <_ZN7STN111011sendCommandEPKc+0xe0>
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fa7e 	bl	8001e14 <_ZN7STN11107timeoutEv>
 8002918:	4603      	mov	r3, r0
 800291a:	f083 0301 	eor.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <_ZN7STN111011sendCommandEPKc+0xe0>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <_ZN7STN111011sendCommandEPKc+0xe2>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d06f      	beq.n	8002a0e <_ZN7STN111011sendCommandEPKc+0x1c6>
	{

		if ( isEmpty() == 0 )
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fbd9 	bl	80030e6 <_ZN7STN11107isEmptyEv>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0df      	beq.n	8002904 <_ZN7STN111011sendCommandEPKc+0xbc>
		{

			char recChar = pop();
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fbb3 	bl	80030b0 <_ZN7STN11103popEv>
 800294a:	4603      	mov	r3, r0
 800294c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

			if (debugMode)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	795b      	ldrb	r3, [r3, #5]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d030      	beq.n	80029ba <_ZN7STN111011sendCommandEPKc+0x172>
			{
				printf("\tReceived char: ");
 8002958:	487b      	ldr	r0, [pc, #492]	; (8002b48 <_ZN7STN111011sendCommandEPKc+0x300>)
 800295a:	f003 fdc1 	bl	80064e0 <iprintf>

				if (recChar == '\f')
 800295e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d103      	bne.n	800296e <_ZN7STN111011sendCommandEPKc+0x126>
					printf("\\f\r\n");
 8002966:	4879      	ldr	r0, [pc, #484]	; (8002b4c <_ZN7STN111011sendCommandEPKc+0x304>)
 8002968:	f003 fe40 	bl	80065ec <puts>
 800296c:	e025      	b.n	80029ba <_ZN7STN111011sendCommandEPKc+0x172>
				else if (recChar == '\n')
 800296e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002972:	2b0a      	cmp	r3, #10
 8002974:	d103      	bne.n	800297e <_ZN7STN111011sendCommandEPKc+0x136>
					printf("\\n\r\n");
 8002976:	4876      	ldr	r0, [pc, #472]	; (8002b50 <_ZN7STN111011sendCommandEPKc+0x308>)
 8002978:	f003 fe38 	bl	80065ec <puts>
 800297c:	e01d      	b.n	80029ba <_ZN7STN111011sendCommandEPKc+0x172>
				else if (recChar == '\r')
 800297e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002982:	2b0d      	cmp	r3, #13
 8002984:	d103      	bne.n	800298e <_ZN7STN111011sendCommandEPKc+0x146>
					printf("\\r\r\n");
 8002986:	4873      	ldr	r0, [pc, #460]	; (8002b54 <_ZN7STN111011sendCommandEPKc+0x30c>)
 8002988:	f003 fe30 	bl	80065ec <puts>
 800298c:	e015      	b.n	80029ba <_ZN7STN111011sendCommandEPKc+0x172>
				else if (recChar == '\t')
 800298e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002992:	2b09      	cmp	r3, #9
 8002994:	d103      	bne.n	800299e <_ZN7STN111011sendCommandEPKc+0x156>
					printf("\\t\r\n");
 8002996:	4870      	ldr	r0, [pc, #448]	; (8002b58 <_ZN7STN111011sendCommandEPKc+0x310>)
 8002998:	f003 fe28 	bl	80065ec <puts>
 800299c:	e00d      	b.n	80029ba <_ZN7STN111011sendCommandEPKc+0x172>
				else if (recChar == '\v')
 800299e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029a2:	2b0b      	cmp	r3, #11
 80029a4:	d103      	bne.n	80029ae <_ZN7STN111011sendCommandEPKc+0x166>
					printf("\\v\r\n");
 80029a6:	486d      	ldr	r0, [pc, #436]	; (8002b5c <_ZN7STN111011sendCommandEPKc+0x314>)
 80029a8:	f003 fe20 	bl	80065ec <puts>
 80029ac:	e005      	b.n	80029ba <_ZN7STN111011sendCommandEPKc+0x172>
				else
					printf("%c\r\n", recChar);
 80029ae:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029b2:	4619      	mov	r1, r3
 80029b4:	486a      	ldr	r0, [pc, #424]	; (8002b60 <_ZN7STN111011sendCommandEPKc+0x318>)
 80029b6:	f003 fd93 	bl	80064e0 <iprintf>
			}

			if (recChar == '>')
 80029ba:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029be:	2b3e      	cmp	r3, #62	; 0x3e
 80029c0:	d107      	bne.n	80029d2 <_ZN7STN111011sendCommandEPKc+0x18a>
			{
				if (debugMode)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	795b      	ldrb	r3, [r3, #5]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <_ZN7STN111011sendCommandEPKc+0x1c4>
					printf("Delimiter found\r\n");
 80029ca:	4866      	ldr	r0, [pc, #408]	; (8002b64 <_ZN7STN111011sendCommandEPKc+0x31c>)
 80029cc:	f003 fe0e 	bl	80065ec <puts>

				break;
 80029d0:	e01c      	b.n	8002a0c <_ZN7STN111011sendCommandEPKc+0x1c4>
			}
			else if (!isalnum(recChar) && (recChar != ':'))
 80029d2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fe46 	bl	8005668 <isalnum>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <_ZN7STN111011sendCommandEPKc+0x1a2>
 80029e2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029e6:	2b3a      	cmp	r3, #58	; 0x3a
 80029e8:	d10e      	bne.n	8002a08 <_ZN7STN111011sendCommandEPKc+0x1c0>
				continue;
			
			payload[counter] = recChar;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029f4:	4413      	add	r3, r2
 80029f6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80029fa:	701a      	strb	r2, [r3, #0]
			counter++;
 80029fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002a00:	3301      	adds	r3, #1
 8002a02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002a06:	e77d      	b.n	8002904 <_ZN7STN111011sendCommandEPKc+0xbc>
				continue;
 8002a08:	bf00      	nop
	while ((counter < PAYLOAD_LEN) && !timeout())
 8002a0a:	e77b      	b.n	8002904 <_ZN7STN111011sendCommandEPKc+0xbc>
				break;
 8002a0c:	bf00      	nop

		}
	}
	rxFlag = false;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209

	if (debugMode)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	795b      	ldrb	r3, [r3, #5]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <_ZN7STN111011sendCommandEPKc+0x1ea>
	{
		printf("All chars received: ");
 8002a1e:	4852      	ldr	r0, [pc, #328]	; (8002b68 <_ZN7STN111011sendCommandEPKc+0x320>)
 8002a20:	f003 fd5e 	bl	80064e0 <iprintf>
		printf("%s\r\n", payload);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4845      	ldr	r0, [pc, #276]	; (8002b44 <_ZN7STN111011sendCommandEPKc+0x2fc>)
 8002a2e:	f003 fd57 	bl	80064e0 <iprintf>
	}

	if (timeout())
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff f9ee 	bl	8001e14 <_ZN7STN11107timeoutEv>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <_ZN7STN111011sendCommandEPKc+0x238>
	{
		if (debugMode)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	795b      	ldrb	r3, [r3, #5]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d014      	beq.n	8002a70 <_ZN7STN111011sendCommandEPKc+0x228>
		{
			printf("Timeout detected with overflow of ");
 8002a46:	4849      	ldr	r0, [pc, #292]	; (8002b6c <_ZN7STN111011sendCommandEPKc+0x324>)
 8002a48:	f003 fd4a 	bl	80064e0 <iprintf>
			printf("%lu", ((currentTime - previousTime) - timeout_ms));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	f8b2 2224 	ldrh.w	r2, [r2, #548]	; 0x224
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	4842      	ldr	r0, [pc, #264]	; (8002b70 <_ZN7STN111011sendCommandEPKc+0x328>)
 8002a66:	f003 fd3b 	bl	80064e0 <iprintf>
			printf("ms\r\n");
 8002a6a:	4842      	ldr	r0, [pc, #264]	; (8002b74 <_ZN7STN111011sendCommandEPKc+0x32c>)
 8002a6c:	f003 fdbe 	bl	80065ec <puts>


		}

		status = ELM_TIMEOUT;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2207      	movs	r2, #7
 8002a74:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		return status;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f993 3212 	ldrsb.w	r3, [r3, #530]	; 0x212
 8002a7e:	e0b2      	b.n	8002be6 <_ZN7STN111011sendCommandEPKc+0x39e>
	}
	
	if (nextIndex(payload, "UNABLETOCONNECT") >= 0)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8002a86:	2301      	movs	r3, #1
 8002a88:	4a3b      	ldr	r2, [pc, #236]	; (8002b78 <_ZN7STN111011sendCommandEPKc+0x330>)
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff f9f5 	bl	8001e7a <_ZN7STN11109nextIndexEPKcS1_h>
 8002a90:	4603      	mov	r3, r0
 8002a92:	43db      	mvns	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	09db      	lsrs	r3, r3, #7
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <_ZN7STN111011sendCommandEPKc+0x274>
	{
		if (debugMode)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	795b      	ldrb	r3, [r3, #5]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <_ZN7STN111011sendCommandEPKc+0x264>
			printf("ELM responded with errror \"UNABLE TO CONNECT\"\r\n");
 8002aa6:	4835      	ldr	r0, [pc, #212]	; (8002b7c <_ZN7STN111011sendCommandEPKc+0x334>)
 8002aa8:	f003 fda0 	bl	80065ec <puts>

		status = ELM_UNABLE_TO_CONNECT;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		return status;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f993 3212 	ldrsb.w	r3, [r3, #530]	; 0x212
 8002aba:	e094      	b.n	8002be6 <_ZN7STN111011sendCommandEPKc+0x39e>
	}

	connected = true;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	711a      	strb	r2, [r3, #4]

	if (nextIndex(payload, "NODATA") >= 0)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8002ac8:	2301      	movs	r3, #1
 8002aca:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <_ZN7STN111011sendCommandEPKc+0x338>)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff f9d4 	bl	8001e7a <_ZN7STN11109nextIndexEPKcS1_h>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	09db      	lsrs	r3, r3, #7
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00e      	beq.n	8002afe <_ZN7STN111011sendCommandEPKc+0x2b6>
	{
		if (debugMode)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	795b      	ldrb	r3, [r3, #5]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <_ZN7STN111011sendCommandEPKc+0x2a6>
			printf("ELM responded with errror \"NO DATA\"\r\n");
 8002ae8:	4826      	ldr	r0, [pc, #152]	; (8002b84 <_ZN7STN111011sendCommandEPKc+0x33c>)
 8002aea:	f003 fd7f 	bl	80065ec <puts>

		status = ELM_NO_DATA;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2205      	movs	r2, #5
 8002af2:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		return status;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f993 3212 	ldrsb.w	r3, [r3, #530]	; 0x212
 8002afc:	e073      	b.n	8002be6 <_ZN7STN111011sendCommandEPKc+0x39e>
	}

	if (nextIndex(payload, "STOPPED") >= 0)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8002b04:	2301      	movs	r3, #1
 8002b06:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <_ZN7STN111011sendCommandEPKc+0x340>)
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff f9b6 	bl	8001e7a <_ZN7STN11109nextIndexEPKcS1_h>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	43db      	mvns	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	09db      	lsrs	r3, r3, #7
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d039      	beq.n	8002b90 <_ZN7STN111011sendCommandEPKc+0x348>
	{
		if (debugMode)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	795b      	ldrb	r3, [r3, #5]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <_ZN7STN111011sendCommandEPKc+0x2e2>
			printf("ELM responded with errror \"STOPPED\"\r\n");
 8002b24:	4819      	ldr	r0, [pc, #100]	; (8002b8c <_ZN7STN111011sendCommandEPKc+0x344>)
 8002b26:	f003 fd61 	bl	80065ec <puts>

		status = ELM_STOPPED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		return status;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f993 3212 	ldrsb.w	r3, [r3, #530]	; 0x212
 8002b38:	e055      	b.n	8002be6 <_ZN7STN111011sendCommandEPKc+0x39e>
 8002b3a:	bf00      	nop
 8002b3c:	0800aa58 	.word	0x0800aa58
 8002b40:	0800aa5c 	.word	0x0800aa5c
 8002b44:	0800a998 	.word	0x0800a998
 8002b48:	0800aa84 	.word	0x0800aa84
 8002b4c:	0800aa98 	.word	0x0800aa98
 8002b50:	0800aa9c 	.word	0x0800aa9c
 8002b54:	0800aaa0 	.word	0x0800aaa0
 8002b58:	0800aaa4 	.word	0x0800aaa4
 8002b5c:	0800aaa8 	.word	0x0800aaa8
 8002b60:	0800aaac 	.word	0x0800aaac
 8002b64:	0800aab4 	.word	0x0800aab4
 8002b68:	0800aac8 	.word	0x0800aac8
 8002b6c:	0800aae0 	.word	0x0800aae0
 8002b70:	0800ab04 	.word	0x0800ab04
 8002b74:	0800ab08 	.word	0x0800ab08
 8002b78:	0800ab0c 	.word	0x0800ab0c
 8002b7c:	0800ab1c 	.word	0x0800ab1c
 8002b80:	0800ab4c 	.word	0x0800ab4c
 8002b84:	0800ab54 	.word	0x0800ab54
 8002b88:	0800ab7c 	.word	0x0800ab7c
 8002b8c:	0800ab84 	.word	0x0800ab84
	}

	if (nextIndex(payload, "ERROR") >= 0)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8002b96:	2301      	movs	r3, #1
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <_ZN7STN111011sendCommandEPKc+0x3a8>)
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff f96d 	bl	8001e7a <_ZN7STN11109nextIndexEPKcS1_h>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	09db      	lsrs	r3, r3, #7
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00e      	beq.n	8002bcc <_ZN7STN111011sendCommandEPKc+0x384>
	{
		if (debugMode)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	795b      	ldrb	r3, [r3, #5]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <_ZN7STN111011sendCommandEPKc+0x374>
			printf("ELM responded with \"ERROR\"\r\n");
 8002bb6:	480f      	ldr	r0, [pc, #60]	; (8002bf4 <_ZN7STN111011sendCommandEPKc+0x3ac>)
 8002bb8:	f003 fd18 	bl	80065ec <puts>

		status = ELM_GENERAL_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	22ff      	movs	r2, #255	; 0xff
 8002bc0:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		return status;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f993 3212 	ldrsb.w	r3, [r3, #530]	; 0x212
 8002bca:	e00c      	b.n	8002be6 <_ZN7STN111011sendCommandEPKc+0x39e>
	}

	// keep track of how many bytes were received in
	// the ELM327's response (not counting the
	// end-marker '>') if a valid response is found
	recBytes = counter;
 8002bcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220

	status = ELM_SUCCESS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
	return status;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f993 3212 	ldrsb.w	r3, [r3, #530]	; 0x212

}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3754      	adds	r7, #84	; 0x54
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	0800abac 	.word	0x0800abac
 8002bf4:	0800abb4 	.word	0x0800abb4

08002bf8 <_ZN7STN111012findResponseEv>:
 Return:
 -------
  * uint64_t - Query response value
*/
uint64_t STN1110::findResponse()
{
 8002bf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
	uint8_t firstDatum = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]
	char header[7]     = { '\0' };
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	f107 030c 	add.w	r3, r7, #12
 8002c0e:	2100      	movs	r1, #0
 8002c10:	460a      	mov	r2, r1
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	460a      	mov	r2, r1
 8002c16:	709a      	strb	r2, [r3, #2]

	if (longQuery)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 324f 	ldrb.w	r3, [r3, #591]	; 0x24f
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01a      	beq.n	8002c58 <_ZN7STN111012findResponseEv+0x60>
	{
		header[0] = query[0] + 4;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 8002c28:	3304      	adds	r3, #4
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	723b      	strb	r3, [r7, #8]
		header[1] = query[1];
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002c34:	727b      	strb	r3, [r7, #9]
		header[2] = query[2];
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 324a 	ldrb.w	r3, [r3, #586]	; 0x24a
 8002c3c:	72bb      	strb	r3, [r7, #10]
		header[3] = query[3];
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 324b 	ldrb.w	r3, [r3, #587]	; 0x24b
 8002c44:	72fb      	strb	r3, [r7, #11]
		header[4] = query[4];
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 324c 	ldrb.w	r3, [r3, #588]	; 0x24c
 8002c4c:	733b      	strb	r3, [r7, #12]
		header[5] = query[5];
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8002c54:	737b      	strb	r3, [r7, #13]
 8002c56:	e011      	b.n	8002c7c <_ZN7STN111012findResponseEv+0x84>
	}
	else
	{
		header[0] = query[0] + 4;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3248 	ldrb.w	r3, [r3, #584]	; 0x248
 8002c5e:	3304      	adds	r3, #4
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	723b      	strb	r3, [r7, #8]
		header[1] = query[1];
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3249 	ldrb.w	r3, [r3, #585]	; 0x249
 8002c6a:	727b      	strb	r3, [r7, #9]
		header[2] = query[2];
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 324a 	ldrb.w	r3, [r3, #586]	; 0x24a
 8002c72:	72bb      	strb	r3, [r7, #10]
		header[3] = query[3];
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 324b 	ldrb.w	r3, [r3, #587]	; 0x24b
 8002c7a:	72fb      	strb	r3, [r7, #11]
	}

	if (debugMode)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	795b      	ldrb	r3, [r3, #5]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <_ZN7STN111012findResponseEv+0x9e>
	{
		printf("Expected response header: ");
 8002c84:	48b5      	ldr	r0, [pc, #724]	; (8002f5c <_ZN7STN111012findResponseEv+0x364>)
 8002c86:	f003 fc2b 	bl	80064e0 <iprintf>
		printf("%s\r\n", header);
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	4619      	mov	r1, r3
 8002c90:	48b3      	ldr	r0, [pc, #716]	; (8002f60 <_ZN7STN111012findResponseEv+0x368>)
 8002c92:	f003 fc25 	bl	80064e0 <iprintf>
	}

	int8_t firstHeadIndex  = nextIndex(payload, header);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8002c9c:	f107 0208 	add.w	r2, r7, #8
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff f8e9 	bl	8001e7a <_ZN7STN11109nextIndexEPKcS1_h>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	757b      	strb	r3, [r7, #21]
	int8_t secondHeadIndex = nextIndex(payload, header, 2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8002cb2:	f107 0208 	add.w	r2, r7, #8
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff f8de 	bl	8001e7a <_ZN7STN11109nextIndexEPKcS1_h>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	753b      	strb	r3, [r7, #20]

	if (firstHeadIndex >= 0)
 8002cc2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f2c0 8136 	blt.w	8002f38 <_ZN7STN111012findResponseEv+0x340>
	{
		if (longQuery)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 324f 	ldrb.w	r3, [r3, #591]	; 0x24f
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <_ZN7STN111012findResponseEv+0xe6>
			firstDatum = firstHeadIndex + 6;
 8002cd6:	7d7b      	ldrb	r3, [r7, #21]
 8002cd8:	3306      	adds	r3, #6
 8002cda:	75fb      	strb	r3, [r7, #23]
 8002cdc:	e002      	b.n	8002ce4 <_ZN7STN111012findResponseEv+0xec>
		else
			firstDatum = firstHeadIndex + 4;
 8002cde:	7d7b      	ldrb	r3, [r7, #21]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	75fb      	strb	r3, [r7, #23]

		// Some ELM327s (such as my own) respond with two
		// "responses" per query. "numPayChars" represents the
		// correct number of bytes returned by the ELM327
		// regardless of how many "responses" were returned
		if (secondHeadIndex >= 0)
 8002ce4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0e      	blt.n	8002d0a <_ZN7STN111012findResponseEv+0x112>
		{
			if (debugMode)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	795b      	ldrb	r3, [r3, #5]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <_ZN7STN111012findResponseEv+0x102>
				printf("Double response detected\r\n");
 8002cf4:	489b      	ldr	r0, [pc, #620]	; (8002f64 <_ZN7STN111012findResponseEv+0x36c>)
 8002cf6:	f003 fc79 	bl	80065ec <puts>

			numPayChars = secondHeadIndex - firstDatum;
 8002cfa:	7d3a      	ldrb	r2, [r7, #20]
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8002d08:	e010      	b.n	8002d2c <_ZN7STN111012findResponseEv+0x134>
		}
		else
		{
			if (debugMode)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	795b      	ldrb	r3, [r3, #5]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <_ZN7STN111012findResponseEv+0x120>
				printf("Single response detected\r\n");
 8002d12:	4895      	ldr	r0, [pc, #596]	; (8002f68 <_ZN7STN111012findResponseEv+0x370>)
 8002d14:	f003 fc6a 	bl	80065ec <puts>

			numPayChars = recBytes - firstDatum;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8b3 3220 	ldrh.w	r3, [r3, #544]	; 0x220
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
		}

		response = 0;
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
		for(uint8_t i = 0; i < numPayChars; i++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75bb      	strb	r3, [r7, #22]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8002d44:	7dba      	ldrb	r2, [r7, #22]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d22d      	bcs.n	8002da6 <_ZN7STN111012findResponseEv+0x1ae>
		{
			uint8_t payloadIndex = firstDatum + i;
 8002d4a:	7dfa      	ldrb	r2, [r7, #23]
 8002d4c:	7dbb      	ldrb	r3, [r7, #22]
 8002d4e:	4413      	add	r3, r2
 8002d50:	74fb      	strb	r3, [r7, #19]
			uint8_t bitsOffset = 4 * (numPayChars - i - 1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8002d58:	461a      	mov	r2, r3
 8002d5a:	7dbb      	ldrb	r3, [r7, #22]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	74bb      	strb	r3, [r7, #18]
			response = response | (ctoi(payload[payloadIndex]) << bitsOffset);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	e9d3 8986 	ldrd	r8, r9, [r3, #536]	; 0x218
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff f867 	bl	8001e4e <_ZN7STN11104ctoiEh>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	7cbb      	ldrb	r3, [r7, #18]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d90:	ea48 0402 	orr.w	r4, r8, r2
 8002d94:	ea49 0503 	orr.w	r5, r9, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	e9c3 4586 	strd	r4, r5, [r3, #536]	; 0x218
		for(uint8_t i = 0; i < numPayChars; i++)
 8002d9e:	7dbb      	ldrb	r3, [r7, #22]
 8002da0:	3301      	adds	r3, #1
 8002da2:	75bb      	strb	r3, [r7, #22]
 8002da4:	e7cb      	b.n	8002d3e <_ZN7STN111012findResponseEv+0x146>

		// It is usefull to have the response bytes
		// broken-out because some PID algorithms (standard
		// and custom) require special operations for each
		// byte returned
		responseByte_0 = response & 0xFF;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 8002dac:	4613      	mov	r3, r2
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		responseByte_1 = (response >> 8) & 0xFF;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	0a02      	lsrs	r2, r0, #8
 8002dc6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002dca:	0a0b      	lsrs	r3, r1, #8
 8002dcc:	4613      	mov	r3, r2
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		responseByte_2 = (response >> 16) & 0xFF;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	0c02      	lsrs	r2, r0, #16
 8002de6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dea:	0c0b      	lsrs	r3, r1, #16
 8002dec:	4613      	mov	r3, r2
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		responseByte_3 = (response >> 24) & 0xFF;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	0e02      	lsrs	r2, r0, #24
 8002e06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e0a:	0e0b      	lsrs	r3, r1, #24
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
		responseByte_4 = (response >> 32) & 0xFF;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	000a      	movs	r2, r1
 8002e26:	2300      	movs	r3, #0
 8002e28:	4613      	mov	r3, r2
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
		responseByte_5 = (response >> 40) & 0xFF;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	0a0a      	lsrs	r2, r1, #8
 8002e42:	2300      	movs	r3, #0
 8002e44:	4613      	mov	r3, r2
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
		responseByte_6 = (response >> 48) & 0xFF;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	0c0a      	lsrs	r2, r1, #16
 8002e5e:	2300      	movs	r3, #0
 8002e60:	4613      	mov	r3, r2
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		responseByte_7 = (response >> 56) & 0xFF;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	0e0a      	lsrs	r2, r1, #24
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244

		if (debugMode)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	795b      	ldrb	r3, [r3, #5]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d052      	beq.n	8002f30 <_ZN7STN111012findResponseEv+0x338>
		{
			printf("64-bit response: \r\n");
 8002e8a:	4838      	ldr	r0, [pc, #224]	; (8002f6c <_ZN7STN111012findResponseEv+0x374>)
 8002e8c:	f003 fbae 	bl	80065ec <puts>
			printf("\tresponseByte_0: ");
 8002e90:	4837      	ldr	r0, [pc, #220]	; (8002f70 <_ZN7STN111012findResponseEv+0x378>)
 8002e92:	f003 fb25 	bl	80064e0 <iprintf>
			printf("%d\r\n", responseByte_0);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4835      	ldr	r0, [pc, #212]	; (8002f74 <_ZN7STN111012findResponseEv+0x37c>)
 8002ea0:	f003 fb1e 	bl	80064e0 <iprintf>
			printf("\tresponseByte_1: ");
 8002ea4:	4834      	ldr	r0, [pc, #208]	; (8002f78 <_ZN7STN111012findResponseEv+0x380>)
 8002ea6:	f003 fb1b 	bl	80064e0 <iprintf>
			printf("%d\r\n",responseByte_1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4830      	ldr	r0, [pc, #192]	; (8002f74 <_ZN7STN111012findResponseEv+0x37c>)
 8002eb4:	f003 fb14 	bl	80064e0 <iprintf>
			printf("\tresponseByte_2: ");
 8002eb8:	4830      	ldr	r0, [pc, #192]	; (8002f7c <_ZN7STN111012findResponseEv+0x384>)
 8002eba:	f003 fb11 	bl	80064e0 <iprintf>
			printf("%d\r\n",responseByte_2);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	482b      	ldr	r0, [pc, #172]	; (8002f74 <_ZN7STN111012findResponseEv+0x37c>)
 8002ec8:	f003 fb0a 	bl	80064e0 <iprintf>
			printf("\tresponseByte_3: ");
 8002ecc:	482c      	ldr	r0, [pc, #176]	; (8002f80 <_ZN7STN111012findResponseEv+0x388>)
 8002ece:	f003 fb07 	bl	80064e0 <iprintf>
			printf("%d\r\n",responseByte_3);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4826      	ldr	r0, [pc, #152]	; (8002f74 <_ZN7STN111012findResponseEv+0x37c>)
 8002edc:	f003 fb00 	bl	80064e0 <iprintf>
			printf("\tresponseByte_4: ");
 8002ee0:	4828      	ldr	r0, [pc, #160]	; (8002f84 <_ZN7STN111012findResponseEv+0x38c>)
 8002ee2:	f003 fafd 	bl	80064e0 <iprintf>
			printf("%d\r\n",responseByte_4);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002eec:	4619      	mov	r1, r3
 8002eee:	4821      	ldr	r0, [pc, #132]	; (8002f74 <_ZN7STN111012findResponseEv+0x37c>)
 8002ef0:	f003 faf6 	bl	80064e0 <iprintf>
			printf("\tresponseByte_5: ");
 8002ef4:	4824      	ldr	r0, [pc, #144]	; (8002f88 <_ZN7STN111012findResponseEv+0x390>)
 8002ef6:	f003 faf3 	bl	80064e0 <iprintf>
			printf("%d\r\n",responseByte_5);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8002f00:	4619      	mov	r1, r3
 8002f02:	481c      	ldr	r0, [pc, #112]	; (8002f74 <_ZN7STN111012findResponseEv+0x37c>)
 8002f04:	f003 faec 	bl	80064e0 <iprintf>
			printf("\tresponseByte_6: ");
 8002f08:	4820      	ldr	r0, [pc, #128]	; (8002f8c <_ZN7STN111012findResponseEv+0x394>)
 8002f0a:	f003 fae9 	bl	80064e0 <iprintf>
			printf("%d\r\n",responseByte_6);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8002f14:	4619      	mov	r1, r3
 8002f16:	4817      	ldr	r0, [pc, #92]	; (8002f74 <_ZN7STN111012findResponseEv+0x37c>)
 8002f18:	f003 fae2 	bl	80064e0 <iprintf>
			printf("\tresponseByte_7: ");
 8002f1c:	481c      	ldr	r0, [pc, #112]	; (8002f90 <_ZN7STN111012findResponseEv+0x398>)
 8002f1e:	f003 fadf 	bl	80064e0 <iprintf>
			printf("%d\r\n",responseByte_7);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4812      	ldr	r0, [pc, #72]	; (8002f74 <_ZN7STN111012findResponseEv+0x37c>)
 8002f2c:	f003 fad8 	bl	80064e0 <iprintf>
		}
		
		return response;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 8002f36:	e00a      	b.n	8002f4e <_ZN7STN111012findResponseEv+0x356>
	}

	if (debugMode)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	795b      	ldrb	r3, [r3, #5]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <_ZN7STN111012findResponseEv+0x34e>
		printf("Response not detected\r\n");
 8002f40:	4814      	ldr	r0, [pc, #80]	; (8002f94 <_ZN7STN111012findResponseEv+0x39c>)
 8002f42:	f003 fb53 	bl	80065ec <puts>

	return 0;
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
}
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f5a:	bf00      	nop
 8002f5c:	0800abd0 	.word	0x0800abd0
 8002f60:	0800a998 	.word	0x0800a998
 8002f64:	0800abec 	.word	0x0800abec
 8002f68:	0800ac08 	.word	0x0800ac08
 8002f6c:	0800ac24 	.word	0x0800ac24
 8002f70:	0800ac38 	.word	0x0800ac38
 8002f74:	0800ac4c 	.word	0x0800ac4c
 8002f78:	0800ac54 	.word	0x0800ac54
 8002f7c:	0800ac68 	.word	0x0800ac68
 8002f80:	0800ac7c 	.word	0x0800ac7c
 8002f84:	0800ac90 	.word	0x0800ac90
 8002f88:	0800aca4 	.word	0x0800aca4
 8002f8c:	0800acb8 	.word	0x0800acb8
 8002f90:	0800accc 	.word	0x0800accc
 8002f94:	0800ace0 	.word	0x0800ace0

08002f98 <_ZN7STN111010printErrorEa>:
 Return:
 -------
  * void
*/
void STN1110::printError(int8_t cur_status)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
	printf("Received: ");
 8002fa4:	4829      	ldr	r0, [pc, #164]	; (800304c <_ZN7STN111010printErrorEa+0xb4>)
 8002fa6:	f003 fa9b 	bl	80064e0 <iprintf>
	printf("%s\r\n", payload);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4827      	ldr	r0, [pc, #156]	; (8003050 <_ZN7STN111010printErrorEa+0xb8>)
 8002fb4:	f003 fa94 	bl	80064e0 <iprintf>

	if (cur_status == ELM_SUCCESS)
 8002fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <_ZN7STN111010printErrorEa+0x30>
		printf("ELM_SUCCESS\r\n");
 8002fc0:	4824      	ldr	r0, [pc, #144]	; (8003054 <_ZN7STN111010printErrorEa+0xbc>)
 8002fc2:	f003 fb13 	bl	80065ec <puts>
 8002fc6:	e03a      	b.n	800303e <_ZN7STN111010printErrorEa+0xa6>
	else if (cur_status == ELM_NO_RESPONSE)
 8002fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d103      	bne.n	8002fd8 <_ZN7STN111010printErrorEa+0x40>
		printf("ERROR: ELM_NO_RESPONSE\r\n");
 8002fd0:	4821      	ldr	r0, [pc, #132]	; (8003058 <_ZN7STN111010printErrorEa+0xc0>)
 8002fd2:	f003 fb0b 	bl	80065ec <puts>
 8002fd6:	e032      	b.n	800303e <_ZN7STN111010printErrorEa+0xa6>
	else if (cur_status == ELM_BUFFER_OVERFLOW)
 8002fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d103      	bne.n	8002fe8 <_ZN7STN111010printErrorEa+0x50>
		printf("ERROR: ELM_BUFFER_OVERFLOW\r\n");
 8002fe0:	481e      	ldr	r0, [pc, #120]	; (800305c <_ZN7STN111010printErrorEa+0xc4>)
 8002fe2:	f003 fb03 	bl	80065ec <puts>
 8002fe6:	e02a      	b.n	800303e <_ZN7STN111010printErrorEa+0xa6>
	else if (cur_status == ELM_UNABLE_TO_CONNECT)
 8002fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d103      	bne.n	8002ff8 <_ZN7STN111010printErrorEa+0x60>
		printf("ERROR: ELM_UNABLE_TO_CONNECT\r\n");
 8002ff0:	481b      	ldr	r0, [pc, #108]	; (8003060 <_ZN7STN111010printErrorEa+0xc8>)
 8002ff2:	f003 fafb 	bl	80065ec <puts>
 8002ff6:	e022      	b.n	800303e <_ZN7STN111010printErrorEa+0xa6>
	else if (cur_status == ELM_NO_DATA)
 8002ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffc:	2b05      	cmp	r3, #5
 8002ffe:	d103      	bne.n	8003008 <_ZN7STN111010printErrorEa+0x70>
		printf("ERROR: ELM_NO_DATA\r\n");
 8003000:	4818      	ldr	r0, [pc, #96]	; (8003064 <_ZN7STN111010printErrorEa+0xcc>)
 8003002:	f003 faf3 	bl	80065ec <puts>
 8003006:	e01a      	b.n	800303e <_ZN7STN111010printErrorEa+0xa6>
	else if (cur_status == ELM_STOPPED)
 8003008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d103      	bne.n	8003018 <_ZN7STN111010printErrorEa+0x80>
		printf("ERROR: ELM_STOPPED\r\n");
 8003010:	4815      	ldr	r0, [pc, #84]	; (8003068 <_ZN7STN111010printErrorEa+0xd0>)
 8003012:	f003 faeb 	bl	80065ec <puts>
 8003016:	e012      	b.n	800303e <_ZN7STN111010printErrorEa+0xa6>
	else if (cur_status == ELM_TIMEOUT)
 8003018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301c:	2b07      	cmp	r3, #7
 800301e:	d103      	bne.n	8003028 <_ZN7STN111010printErrorEa+0x90>
		printf("ERROR: ELM_TIMEOUT\r\n");
 8003020:	4812      	ldr	r0, [pc, #72]	; (800306c <_ZN7STN111010printErrorEa+0xd4>)
 8003022:	f003 fae3 	bl	80065ec <puts>
 8003026:	e00a      	b.n	800303e <_ZN7STN111010printErrorEa+0xa6>
	else if (cur_status == ELM_TIMEOUT)
 8003028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302c:	2b07      	cmp	r3, #7
 800302e:	d103      	bne.n	8003038 <_ZN7STN111010printErrorEa+0xa0>
		printf("ERROR: ELM_GENERAL_ERROR\r\n");
 8003030:	480f      	ldr	r0, [pc, #60]	; (8003070 <_ZN7STN111010printErrorEa+0xd8>)
 8003032:	f003 fadb 	bl	80065ec <puts>
 8003036:	e002      	b.n	800303e <_ZN7STN111010printErrorEa+0xa6>
	else
		printf("No error detected\r\n");
 8003038:	480e      	ldr	r0, [pc, #56]	; (8003074 <_ZN7STN111010printErrorEa+0xdc>)
 800303a:	f003 fad7 	bl	80065ec <puts>

	delay(100);
 800303e:	2064      	movs	r0, #100	; 0x64
 8003040:	f000 fb46 	bl	80036d0 <HAL_Delay>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	0800acf8 	.word	0x0800acf8
 8003050:	0800a998 	.word	0x0800a998
 8003054:	0800ad04 	.word	0x0800ad04
 8003058:	0800ad14 	.word	0x0800ad14
 800305c:	0800ad2c 	.word	0x0800ad2c
 8003060:	0800ad48 	.word	0x0800ad48
 8003064:	0800ad68 	.word	0x0800ad68
 8003068:	0800ad7c 	.word	0x0800ad7c
 800306c:	0800ad90 	.word	0x0800ad90
 8003070:	0800ada4 	.word	0x0800ada4
 8003074:	0800adc0 	.word	0x0800adc0

08003078 <_ZN7STN11104pushEh>:

void STN1110::push(uint8_t new_data)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	70fb      	strb	r3, [r7, #3]
	queue_buf[head] = new_data;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	719a      	strb	r2, [r3, #6]
	head++;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800309a:	3301      	adds	r3, #1
 800309c:	b2da      	uxtb	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	if (head >= MAX_QUEUE_SIZE) {
		head = 0;
	}
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <_ZN7STN11103popEv>:

uint8_t STN1110::pop(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	uint8_t pop_data = queue_buf[tail];
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	799b      	ldrb	r3, [r3, #6]
 80030c6:	73fb      	strb	r3, [r7, #15]
	tail++;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80030ce:	3301      	adds	r3, #1
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207

	if (tail >= MAX_QUEUE_SIZE) {
		tail = 0;
	}

	return pop_data;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_ZN7STN11107isEmptyEv>:

uint8_t STN1110::isEmpty(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
	if ( head == tail) { return 1; }
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 2206 	ldrb.w	r2, [r3, #518]	; 0x206
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d101      	bne.n	8003102 <_ZN7STN11107isEmptyEv+0x1c>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <_ZN7STN11107isEmptyEv+0x1e>
	else return 0;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_ZN7STN111010queue_initEv>:

void STN1110::queue_init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	head = 0;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	tail = 0;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
	//Add something initialize
	memset(queue_buf, 0, sizeof(queue_buf));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3306      	adds	r3, #6
 800312c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f002 faa8 	bl	8005688 <memset>
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <_ZN7STN111015delimiter_foundEv>:

void STN1110::delimiter_found()
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	if (rxData == '<')
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800314e:	2b3c      	cmp	r3, #60	; 0x3c
 8003150:	d10f      	bne.n	8003172 <_ZN7STN111015delimiter_foundEv+0x32>
		{
		head = 0;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		tail = 0;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
		memset(queue_buf, 0, sizeof(queue_buf));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3306      	adds	r3, #6
 8003166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f002 fa8b 	bl	8005688 <memset>
		}
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0
	return 1;
 800317e:	2301      	movs	r3, #1
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <_kill>:

int _kill(int pid, int sig)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003194:	f002 fa3e 	bl	8005614 <__errno>
 8003198:	4603      	mov	r3, r0
 800319a:	2216      	movs	r2, #22
 800319c:	601a      	str	r2, [r3, #0]
	return -1;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <_exit>:

void _exit (int status)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031b2:	f04f 31ff 	mov.w	r1, #4294967295
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ffe7 	bl	800318a <_kill>
	while (1) {}		/* Make sure we hang here */
 80031bc:	e7fe      	b.n	80031bc <_exit+0x12>

080031be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e00a      	b.n	80031e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031d0:	f3af 8000 	nop.w
 80031d4:	4601      	mov	r1, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	60ba      	str	r2, [r7, #8]
 80031dc:	b2ca      	uxtb	r2, r1
 80031de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3301      	adds	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	dbf0      	blt.n	80031d0 <_read+0x12>
	}

return len;
 80031ee:	687b      	ldr	r3, [r7, #4]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e009      	b.n	800321e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	60ba      	str	r2, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe f800 	bl	8001218 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3301      	adds	r3, #1
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	dbf1      	blt.n	800320a <_write+0x12>
	}
	return len;
 8003226:	687b      	ldr	r3, [r7, #4]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <_close>:

int _close(int file)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	return -1;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003258:	605a      	str	r2, [r3, #4]
	return 0;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_isatty>:

int _isatty(int file)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	return 1;
 8003270:	2301      	movs	r3, #1
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
	return 0;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <_sbrk+0x5c>)
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <_sbrk+0x60>)
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <_sbrk+0x64>)
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <_sbrk+0x68>)
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <_sbrk+0x64>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d207      	bcs.n	80032d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c8:	f002 f9a4 	bl	8005614 <__errno>
 80032cc:	4603      	mov	r3, r0
 80032ce:	220c      	movs	r2, #12
 80032d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
 80032d6:	e009      	b.n	80032ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <_sbrk+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	4a05      	ldr	r2, [pc, #20]	; (80032fc <_sbrk+0x64>)
 80032e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20020000 	.word	0x20020000
 80032f8:	00000400 	.word	0x00000400
 80032fc:	20000560 	.word	0x20000560
 8003300:	200005c8 	.word	0x200005c8

08003304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <SystemInit+0x20>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	4a05      	ldr	r2, [pc, #20]	; (8003324 <SystemInit+0x20>)
 8003310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 800332e:	4a12      	ldr	r2, [pc, #72]	; (8003378 <MX_USART1_UART_Init+0x50>)
 8003330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 8003334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 800334e:	220c      	movs	r2, #12
 8003350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800335e:	4805      	ldr	r0, [pc, #20]	; (8003374 <MX_USART1_UART_Init+0x4c>)
 8003360:	f001 f990 	bl	8004684 <HAL_UART_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800336a:	f7fe fac9 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000056c 	.word	0x2000056c
 8003378:	40011000 	.word	0x40011000

0800337c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <MX_USART2_UART_Init+0x50>)
 8003384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 8003388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800338c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 80033a2:	220c      	movs	r2, #12
 80033a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033b2:	4805      	ldr	r0, [pc, #20]	; (80033c8 <MX_USART2_UART_Init+0x4c>)
 80033b4:	f001 f966 	bl	8004684 <HAL_UART_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033be:	f7fe fa9f 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200001fc 	.word	0x200001fc
 80033cc:	40004400 	.word	0x40004400

080033d0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <MX_USART6_UART_Init+0x4c>)
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <MX_USART6_UART_Init+0x50>)
 80033d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <MX_USART6_UART_Init+0x4c>)
 80033dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_USART6_UART_Init+0x4c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <MX_USART6_UART_Init+0x4c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <MX_USART6_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <MX_USART6_UART_Init+0x4c>)
 80033f6:	220c      	movs	r2, #12
 80033f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <MX_USART6_UART_Init+0x4c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <MX_USART6_UART_Init+0x4c>)
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003406:	4805      	ldr	r0, [pc, #20]	; (800341c <MX_USART6_UART_Init+0x4c>)
 8003408:	f001 f93c 	bl	8004684 <HAL_UART_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003412:	f7fe fa75 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000240 	.word	0x20000240
 8003420:	40011400 	.word	0x40011400

08003424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08e      	sub	sp, #56	; 0x38
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a4f      	ldr	r2, [pc, #316]	; (8003580 <HAL_UART_MspInit+0x15c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d12d      	bne.n	80034a2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_UART_MspInit+0x160>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	4a4d      	ldr	r2, [pc, #308]	; (8003584 <HAL_UART_MspInit+0x160>)
 8003450:	f043 0310 	orr.w	r3, r3, #16
 8003454:	6453      	str	r3, [r2, #68]	; 0x44
 8003456:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <HAL_UART_MspInit+0x160>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	4b47      	ldr	r3, [pc, #284]	; (8003584 <HAL_UART_MspInit+0x160>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a46      	ldr	r2, [pc, #280]	; (8003584 <HAL_UART_MspInit+0x160>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b44      	ldr	r3, [pc, #272]	; (8003584 <HAL_UART_MspInit+0x160>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800347e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003490:	2307      	movs	r3, #7
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003498:	4619      	mov	r1, r3
 800349a:	483b      	ldr	r0, [pc, #236]	; (8003588 <HAL_UART_MspInit+0x164>)
 800349c:	f000 fae0 	bl	8003a60 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80034a0:	e06a      	b.n	8003578 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a39      	ldr	r2, [pc, #228]	; (800358c <HAL_UART_MspInit+0x168>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d12c      	bne.n	8003506 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_UART_MspInit+0x160>)
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	4a33      	ldr	r2, [pc, #204]	; (8003584 <HAL_UART_MspInit+0x160>)
 80034b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ba:	6413      	str	r3, [r2, #64]	; 0x40
 80034bc:	4b31      	ldr	r3, [pc, #196]	; (8003584 <HAL_UART_MspInit+0x160>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <HAL_UART_MspInit+0x160>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <HAL_UART_MspInit+0x160>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6313      	str	r3, [r2, #48]	; 0x30
 80034d8:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <HAL_UART_MspInit+0x160>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034e4:	230c      	movs	r3, #12
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034f4:	2307      	movs	r3, #7
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fc:	4619      	mov	r1, r3
 80034fe:	4822      	ldr	r0, [pc, #136]	; (8003588 <HAL_UART_MspInit+0x164>)
 8003500:	f000 faae 	bl	8003a60 <HAL_GPIO_Init>
}
 8003504:	e038      	b.n	8003578 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART6)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a21      	ldr	r2, [pc, #132]	; (8003590 <HAL_UART_MspInit+0x16c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d133      	bne.n	8003578 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_UART_MspInit+0x160>)
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <HAL_UART_MspInit+0x160>)
 800351a:	f043 0320 	orr.w	r3, r3, #32
 800351e:	6453      	str	r3, [r2, #68]	; 0x44
 8003520:	4b18      	ldr	r3, [pc, #96]	; (8003584 <HAL_UART_MspInit+0x160>)
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_UART_MspInit+0x160>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4a13      	ldr	r2, [pc, #76]	; (8003584 <HAL_UART_MspInit+0x160>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6313      	str	r3, [r2, #48]	; 0x30
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_UART_MspInit+0x160>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003548:	23c0      	movs	r3, #192	; 0xc0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003554:	2303      	movs	r3, #3
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003558:	2308      	movs	r3, #8
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003560:	4619      	mov	r1, r3
 8003562:	480c      	ldr	r0, [pc, #48]	; (8003594 <HAL_UART_MspInit+0x170>)
 8003564:	f000 fa7c 	bl	8003a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003568:	2200      	movs	r2, #0
 800356a:	2100      	movs	r1, #0
 800356c:	2047      	movs	r0, #71	; 0x47
 800356e:	f000 f9ae 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003572:	2047      	movs	r0, #71	; 0x47
 8003574:	f000 f9c7 	bl	8003906 <HAL_NVIC_EnableIRQ>
}
 8003578:	bf00      	nop
 800357a:	3738      	adds	r7, #56	; 0x38
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40011000 	.word	0x40011000
 8003584:	40023800 	.word	0x40023800
 8003588:	40020000 	.word	0x40020000
 800358c:	40004400 	.word	0x40004400
 8003590:	40011400 	.word	0x40011400
 8003594:	40020800 	.word	0x40020800

08003598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800359c:	480d      	ldr	r0, [pc, #52]	; (80035d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800359e:	490e      	ldr	r1, [pc, #56]	; (80035d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035a0:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a4:	e002      	b.n	80035ac <LoopCopyDataInit>

080035a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035aa:	3304      	adds	r3, #4

080035ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b0:	d3f9      	bcc.n	80035a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035b4:	4c0b      	ldr	r4, [pc, #44]	; (80035e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b8:	e001      	b.n	80035be <LoopFillZerobss>

080035ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035bc:	3204      	adds	r2, #4

080035be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c0:	d3fb      	bcc.n	80035ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035c2:	f7ff fe9f 	bl	8003304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035c6:	f002 f82b 	bl	8005620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ca:	f7fd fef3 	bl	80013b4 <main>
  bx  lr    
 80035ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80035d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80035dc:	0800b2b8 	.word	0x0800b2b8
  ldr r2, =_sbss
 80035e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80035e4:	200005c4 	.word	0x200005c4

080035e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e8:	e7fe      	b.n	80035e8 <ADC_IRQHandler>
	...

080035ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_Init+0x40>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0d      	ldr	r2, [pc, #52]	; (800362c <HAL_Init+0x40>)
 80035f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_Init+0x40>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0a      	ldr	r2, [pc, #40]	; (800362c <HAL_Init+0x40>)
 8003602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_Init+0x40>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_Init+0x40>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 f94f 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361a:	2000      	movs	r0, #0
 800361c:	f000 f808 	bl	8003630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003620:	f7fe f992 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00

08003630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_InitTick+0x54>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_InitTick+0x58>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003646:	fbb3 f3f1 	udiv	r3, r3, r1
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f967 	bl	8003922 <HAL_SYSTICK_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00e      	b.n	800367c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d80a      	bhi.n	800367a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003664:	2200      	movs	r2, #0
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f000 f92f 	bl	80038ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003670:	4a06      	ldr	r2, [pc, #24]	; (800368c <HAL_InitTick+0x5c>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000000 	.word	0x20000000
 8003688:	20000008 	.word	0x20000008
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_IncTick+0x20>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_IncTick+0x24>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <HAL_IncTick+0x24>)
 80036a2:	6013      	str	r3, [r2, #0]
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000008 	.word	0x20000008
 80036b4:	200005b0 	.word	0x200005b0

080036b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return uwTick;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_GetTick+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	200005b0 	.word	0x200005b0

080036d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7ff ffee 	bl	80036b8 <HAL_GetTick>
 80036dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d005      	beq.n	80036f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_Delay+0x44>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4413      	add	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036f6:	bf00      	nop
 80036f8:	f7ff ffde 	bl	80036b8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	429a      	cmp	r2, r3
 8003706:	d8f7      	bhi.n	80036f8 <HAL_Delay+0x28>
  {
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000008 	.word	0x20000008

08003718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374a:	4a04      	ldr	r2, [pc, #16]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <__NVIC_GetPriorityGrouping+0x18>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0307 	and.w	r3, r3, #7
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4907      	ldr	r1, [pc, #28]	; (80037b4 <__NVIC_EnableIRQ+0x38>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	; (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003884:	d301      	bcc.n	800388a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003886:	2301      	movs	r3, #1
 8003888:	e00f      	b.n	80038aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <SysTick_Config+0x40>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003892:	210f      	movs	r1, #15
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	f7ff ff8e 	bl	80037b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <SysTick_Config+0x40>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <SysTick_Config+0x40>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000e010 	.word	0xe000e010

080038b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff29 	bl	8003718 <__NVIC_SetPriorityGrouping>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e0:	f7ff ff3e 	bl	8003760 <__NVIC_GetPriorityGrouping>
 80038e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f7ff ff8e 	bl	800380c <NVIC_EncodePriority>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff5d 	bl	80037b8 <__NVIC_SetPriority>
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff31 	bl	800377c <__NVIC_EnableIRQ>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ffa2 	bl	8003874 <SysTick_Config>
 8003930:	4603      	mov	r3, r0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003948:	f7ff feb6 	bl	80036b8 <HAL_GetTick>
 800394c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d008      	beq.n	800396c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2280      	movs	r2, #128	; 0x80
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e052      	b.n	8003a12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0216 	bic.w	r2, r2, #22
 800397a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <HAL_DMA_Abort+0x62>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0208 	bic.w	r2, r2, #8
 80039aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039bc:	e013      	b.n	80039e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039be:	f7ff fe7b 	bl	80036b8 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d90c      	bls.n	80039e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2203      	movs	r2, #3
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e015      	b.n	8003a12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e4      	bne.n	80039be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	223f      	movs	r2, #63	; 0x3f
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d004      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2280      	movs	r2, #128	; 0x80
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e00c      	b.n	8003a52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2205      	movs	r2, #5
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	e159      	b.n	8003d30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	f040 8148 	bne.w	8003d2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d005      	beq.n	8003ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d130      	bne.n	8003b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	2203      	movs	r2, #3
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae8:	2201      	movs	r2, #1
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 0201 	and.w	r2, r3, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d017      	beq.n	8003b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d123      	bne.n	8003ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	08da      	lsrs	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3208      	adds	r2, #8
 8003b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	220f      	movs	r2, #15
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	08da      	lsrs	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3208      	adds	r2, #8
 8003b9e:	69b9      	ldr	r1, [r7, #24]
 8003ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0203 	and.w	r2, r3, #3
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a2 	beq.w	8003d2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b57      	ldr	r3, [pc, #348]	; (8003d48 <HAL_GPIO_Init+0x2e8>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	4a56      	ldr	r2, [pc, #344]	; (8003d48 <HAL_GPIO_Init+0x2e8>)
 8003bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf6:	4b54      	ldr	r3, [pc, #336]	; (8003d48 <HAL_GPIO_Init+0x2e8>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c02:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <HAL_GPIO_Init+0x2ec>)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	3302      	adds	r3, #2
 8003c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	220f      	movs	r2, #15
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a49      	ldr	r2, [pc, #292]	; (8003d50 <HAL_GPIO_Init+0x2f0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d019      	beq.n	8003c62 <HAL_GPIO_Init+0x202>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a48      	ldr	r2, [pc, #288]	; (8003d54 <HAL_GPIO_Init+0x2f4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_Init+0x1fe>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a47      	ldr	r2, [pc, #284]	; (8003d58 <HAL_GPIO_Init+0x2f8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00d      	beq.n	8003c5a <HAL_GPIO_Init+0x1fa>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a46      	ldr	r2, [pc, #280]	; (8003d5c <HAL_GPIO_Init+0x2fc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_GPIO_Init+0x1f6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a45      	ldr	r2, [pc, #276]	; (8003d60 <HAL_GPIO_Init+0x300>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_GPIO_Init+0x1f2>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	e008      	b.n	8003c64 <HAL_GPIO_Init+0x204>
 8003c52:	2307      	movs	r3, #7
 8003c54:	e006      	b.n	8003c64 <HAL_GPIO_Init+0x204>
 8003c56:	2303      	movs	r3, #3
 8003c58:	e004      	b.n	8003c64 <HAL_GPIO_Init+0x204>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e002      	b.n	8003c64 <HAL_GPIO_Init+0x204>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_GPIO_Init+0x204>
 8003c62:	2300      	movs	r3, #0
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f002 0203 	and.w	r2, r2, #3
 8003c6a:	0092      	lsls	r2, r2, #2
 8003c6c:	4093      	lsls	r3, r2
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c74:	4935      	ldr	r1, [pc, #212]	; (8003d4c <HAL_GPIO_Init+0x2ec>)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c82:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <HAL_GPIO_Init+0x304>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ca6:	4a2f      	ldr	r2, [pc, #188]	; (8003d64 <HAL_GPIO_Init+0x304>)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cac:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <HAL_GPIO_Init+0x304>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cd0:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <HAL_GPIO_Init+0x304>)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_GPIO_Init+0x304>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <HAL_GPIO_Init+0x304>)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_GPIO_Init+0x304>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d24:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <HAL_GPIO_Init+0x304>)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	f67f aea2 	bls.w	8003a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	3724      	adds	r7, #36	; 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40013800 	.word	0x40013800
 8003d50:	40020000 	.word	0x40020000
 8003d54:	40020400 	.word	0x40020400
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40020c00 	.word	0x40020c00
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40013c00 	.word	0x40013c00

08003d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
 8003d74:	4613      	mov	r3, r2
 8003d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d78:	787b      	ldrb	r3, [r7, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d84:	e003      	b.n	8003d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	041a      	lsls	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	619a      	str	r2, [r3, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e264      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d075      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	4ba3      	ldr	r3, [pc, #652]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4ba0      	ldr	r3, [pc, #640]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b9d      	ldr	r3, [pc, #628]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b99      	ldr	r3, [pc, #612]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x108>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e23f      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x74>
 8003e02:	4b91      	ldr	r3, [pc, #580]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a90      	ldr	r2, [pc, #576]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x98>
 8003e1a:	4b8b      	ldr	r3, [pc, #556]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a8a      	ldr	r2, [pc, #552]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a87      	ldr	r2, [pc, #540]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e34:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a83      	ldr	r2, [pc, #524]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a80      	ldr	r2, [pc, #512]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7ff fc30 	bl	80036b8 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7ff fc2c 	bl	80036b8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e204      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b76      	ldr	r3, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xc0>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7ff fc1c 	bl	80036b8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7ff fc18 	bl	80036b8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1f0      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ebe:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1c4      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4952      	ldr	r1, [pc, #328]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	; (800404c <HAL_RCC_OscConfig+0x2b0>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7ff fbd1 	bl	80036b8 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7ff fbcd 	bl	80036b8 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1a5      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b46      	ldr	r3, [pc, #280]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4940      	ldr	r1, [pc, #256]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_OscConfig+0x2b0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7ff fbb0 	bl	80036b8 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7ff fbac 	bl	80036b8 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e184      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d030      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_RCC_OscConfig+0x2b4>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7ff fb90 	bl	80036b8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7ff fb8c 	bl	80036b8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e164      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x200>
 8003fba:	e015      	b.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x2b4>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7ff fb79 	bl	80036b8 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fca:	f7ff fb75 	bl	80036b8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e14d      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a0 	beq.w	8004136 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d121      	bne.n	8004076 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7ff fb3b 	bl	80036b8 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	e011      	b.n	800406a <HAL_RCC_OscConfig+0x2ce>
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	42470000 	.word	0x42470000
 8004050:	42470e80 	.word	0x42470e80
 8004054:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7ff fb2e 	bl	80036b8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e106      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b85      	ldr	r3, [pc, #532]	; (8004280 <HAL_RCC_OscConfig+0x4e4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d106      	bne.n	800408c <HAL_RCC_OscConfig+0x2f0>
 800407e:	4b81      	ldr	r3, [pc, #516]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a80      	ldr	r2, [pc, #512]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
 800408a:	e01c      	b.n	80040c6 <HAL_RCC_OscConfig+0x32a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_OscConfig+0x312>
 8004094:	4b7b      	ldr	r3, [pc, #492]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a7a      	ldr	r2, [pc, #488]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
 80040a0:	4b78      	ldr	r3, [pc, #480]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a77      	ldr	r2, [pc, #476]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	e00b      	b.n	80040c6 <HAL_RCC_OscConfig+0x32a>
 80040ae:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a74      	ldr	r2, [pc, #464]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ba:	4b72      	ldr	r3, [pc, #456]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a71      	ldr	r2, [pc, #452]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d015      	beq.n	80040fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7ff faf3 	bl	80036b8 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7ff faef 	bl	80036b8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0c5      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b65      	ldr	r3, [pc, #404]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCC_OscConfig+0x33a>
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7ff fadd 	bl	80036b8 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7ff fad9 	bl	80036b8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e0af      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	4b5a      	ldr	r3, [pc, #360]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ee      	bne.n	8004102 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412a:	4b56      	ldr	r3, [pc, #344]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a55      	ldr	r2, [pc, #340]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 809b 	beq.w	8004276 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d05c      	beq.n	8004206 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d141      	bne.n	80041d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004154:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7ff faad 	bl	80036b8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7ff faa9 	bl	80036b8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e081      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	019b      	lsls	r3, r3, #6
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	4937      	ldr	r1, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7ff fa82 	bl	80036b8 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b8:	f7ff fa7e 	bl	80036b8 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e056      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x41c>
 80041d6:	e04e      	b.n	8004276 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7ff fa6b 	bl	80036b8 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e6:	f7ff fa67 	bl	80036b8 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e03f      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <HAL_RCC_OscConfig+0x44a>
 8004204:	e037      	b.n	8004276 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e032      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d028      	beq.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d121      	bne.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d11a      	bne.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004248:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	3b01      	subs	r3, #1
 800425c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d107      	bne.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40007000 	.word	0x40007000
 8004284:	40023800 	.word	0x40023800
 8004288:	42470060 	.word	0x42470060

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0cc      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b68      	ldr	r3, [pc, #416]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d90c      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b63      	ldr	r3, [pc, #396]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0b8      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e0:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f8:	4b53      	ldr	r3, [pc, #332]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a52      	ldr	r2, [pc, #328]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	494d      	ldr	r1, [pc, #308]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d044      	beq.n	80043ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d119      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e07f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d003      	beq.n	800434a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	2b03      	cmp	r3, #3
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435a:	4b3b      	ldr	r3, [pc, #236]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e067      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436a:	4b37      	ldr	r3, [pc, #220]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 0203 	bic.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4934      	ldr	r1, [pc, #208]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800437c:	f7ff f99c 	bl	80036b8 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	e00a      	b.n	800439a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	f7ff f998 	bl	80036b8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e04f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 020c 	and.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d1eb      	bne.n	8004384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d20c      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e032      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4916      	ldr	r1, [pc, #88]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004412:	f000 f821 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8004416:	4602      	mov	r2, r0
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	490a      	ldr	r1, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	5ccb      	ldrb	r3, [r1, r3]
 8004426:	fa22 f303 	lsr.w	r3, r2, r3
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f8fc 	bl	8003630 <HAL_InitTick>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023c00 	.word	0x40023c00
 8004448:	40023800 	.word	0x40023800
 800444c:	0800add4 	.word	0x0800add4
 8004450:	20000000 	.word	0x20000000
 8004454:	20000004 	.word	0x20000004

08004458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	2300      	movs	r3, #0
 800446a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004470:	4b67      	ldr	r3, [pc, #412]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d00d      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x40>
 800447c:	2b08      	cmp	r3, #8
 800447e:	f200 80bd 	bhi.w	80045fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x34>
 8004486:	2b04      	cmp	r3, #4
 8004488:	d003      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x3a>
 800448a:	e0b7      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800448c:	4b61      	ldr	r3, [pc, #388]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800448e:	60bb      	str	r3, [r7, #8]
       break;
 8004490:	e0b7      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004492:	4b61      	ldr	r3, [pc, #388]	; (8004618 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004494:	60bb      	str	r3, [r7, #8]
      break;
 8004496:	e0b4      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004498:	4b5d      	ldr	r3, [pc, #372]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a2:	4b5b      	ldr	r3, [pc, #364]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04d      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b58      	ldr	r3, [pc, #352]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	461a      	mov	r2, r3
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	ea02 0800 	and.w	r8, r2, r0
 80044c6:	ea03 0901 	and.w	r9, r3, r1
 80044ca:	4640      	mov	r0, r8
 80044cc:	4649      	mov	r1, r9
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	014b      	lsls	r3, r1, #5
 80044d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044dc:	0142      	lsls	r2, r0, #5
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	ebb0 0008 	subs.w	r0, r0, r8
 80044e6:	eb61 0109 	sbc.w	r1, r1, r9
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	018b      	lsls	r3, r1, #6
 80044f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044f8:	0182      	lsls	r2, r0, #6
 80044fa:	1a12      	subs	r2, r2, r0
 80044fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	00d9      	lsls	r1, r3, #3
 800450a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800450e:	00d0      	lsls	r0, r2, #3
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	eb12 0208 	adds.w	r2, r2, r8
 8004518:	eb43 0309 	adc.w	r3, r3, r9
 800451c:	f04f 0000 	mov.w	r0, #0
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	0259      	lsls	r1, r3, #9
 8004526:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800452a:	0250      	lsls	r0, r2, #9
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	461a      	mov	r2, r3
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	f7fc fcba 	bl	8000eb4 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e04a      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	461a      	mov	r2, r3
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	f240 10ff 	movw	r0, #511	; 0x1ff
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	ea02 0400 	and.w	r4, r2, r0
 8004562:	ea03 0501 	and.w	r5, r3, r1
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	014b      	lsls	r3, r1, #5
 8004574:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004578:	0142      	lsls	r2, r0, #5
 800457a:	4610      	mov	r0, r2
 800457c:	4619      	mov	r1, r3
 800457e:	1b00      	subs	r0, r0, r4
 8004580:	eb61 0105 	sbc.w	r1, r1, r5
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	018b      	lsls	r3, r1, #6
 800458e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004592:	0182      	lsls	r2, r0, #6
 8004594:	1a12      	subs	r2, r2, r0
 8004596:	eb63 0301 	sbc.w	r3, r3, r1
 800459a:	f04f 0000 	mov.w	r0, #0
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	00d9      	lsls	r1, r3, #3
 80045a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045a8:	00d0      	lsls	r0, r2, #3
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	1912      	adds	r2, r2, r4
 80045b0:	eb45 0303 	adc.w	r3, r5, r3
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f04f 0100 	mov.w	r1, #0
 80045bc:	0299      	lsls	r1, r3, #10
 80045be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045c2:	0290      	lsls	r0, r2, #10
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	f7fc fc6e 	bl	8000eb4 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	3301      	adds	r3, #1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	60bb      	str	r3, [r7, #8]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045fe:	60bb      	str	r3, [r7, #8]
      break;
 8004600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004602:	68bb      	ldr	r3, [r7, #8]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	00f42400 	.word	0x00f42400
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a9b      	lsrs	r3, r3, #10
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4903      	ldr	r1, [pc, #12]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40023800 	.word	0x40023800
 8004658:	0800ade4 	.word	0x0800ade4

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004660:	f7ff ffdc 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0b5b      	lsrs	r3, r3, #13
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	0800ade4 	.word	0x0800ade4

08004684 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e03f      	b.n	8004716 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fe feba 	bl	8003424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fddb 	bl	8005284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b08a      	sub	sp, #40	; 0x28
 8004722:	af02      	add	r7, sp, #8
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b20      	cmp	r3, #32
 800473c:	d17c      	bne.n	8004838 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_UART_Transmit+0x2c>
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e075      	b.n	800483a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_UART_Transmit+0x3e>
 8004758:	2302      	movs	r3, #2
 800475a:	e06e      	b.n	800483a <HAL_UART_Transmit+0x11c>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2221      	movs	r2, #33	; 0x21
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004772:	f7fe ffa1 	bl	80036b8 <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478c:	d108      	bne.n	80047a0 <HAL_UART_Transmit+0x82>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	e003      	b.n	80047a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047b0:	e02a      	b.n	8004808 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2180      	movs	r1, #128	; 0x80
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fb1f 	bl	8004e00 <UART_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e036      	b.n	800483a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10b      	bne.n	80047ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3302      	adds	r3, #2
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	e007      	b.n	80047fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1cf      	bne.n	80047b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	2140      	movs	r1, #64	; 0x40
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 faef 	bl	8004e00 <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e006      	b.n	800483a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	4613      	mov	r3, r2
 800484e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b20      	cmp	r3, #32
 800485a:	d11d      	bne.n	8004898 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_UART_Receive_IT+0x26>
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e016      	b.n	800489a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UART_Receive_IT+0x38>
 8004876:	2302      	movs	r3, #2
 8004878:	e00f      	b.n	800489a <HAL_UART_Receive_IT+0x58>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	461a      	mov	r2, r3
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fb24 	bl	8004edc <UART_Start_Receive_IT>
 8004894:	4603      	mov	r3, r0
 8004896:	e000      	b.n	800489a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004898:	2302      	movs	r3, #2
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b0ba      	sub	sp, #232	; 0xe8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_UART_IRQHandler+0x66>
 80048f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fc03 	bl	800510e <UART_Receive_IT>
      return;
 8004908:	e256      	b.n	8004db8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800490a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80de 	beq.w	8004ad0 <HAL_UART_IRQHandler+0x22c>
 8004914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004924:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80d1 	beq.w	8004ad0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <HAL_UART_IRQHandler+0xae>
 800493a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f043 0201 	orr.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xd2>
 800495e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f043 0202 	orr.w	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_UART_IRQHandler+0xf6>
 8004982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f043 0204 	orr.w	r2, r3, #4
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d011      	beq.n	80049ca <HAL_UART_IRQHandler+0x126>
 80049a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f043 0208 	orr.w	r2, r3, #8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 81ed 	beq.w	8004dae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_UART_IRQHandler+0x14e>
 80049e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fb8e 	bl	800510e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <HAL_UART_IRQHandler+0x17a>
 8004a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d04f      	beq.n	8004abe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa96 	bl	8004f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d141      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3314      	adds	r3, #20
 8004a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3314      	adds	r3, #20
 8004a5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1d9      	bne.n	8004a32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d013      	beq.n	8004aae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <HAL_UART_IRQHandler+0x3dc>)
 8004a8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fe ffc1 	bl	8003a1a <HAL_DMA_Abort_IT>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	e00e      	b.n	8004acc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f990 	bl	8004dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	e00a      	b.n	8004acc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f98c 	bl	8004dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	e006      	b.n	8004acc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f988 	bl	8004dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aca:	e170      	b.n	8004dae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	bf00      	nop
    return;
 8004ace:	e16e      	b.n	8004dae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	f040 814a 	bne.w	8004d6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8143 	beq.w	8004d6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 813c 	beq.w	8004d6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	f040 80b4 	bne.w	8004c84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8140 	beq.w	8004db2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	f080 8139 	bcs.w	8004db2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b52:	f000 8088 	beq.w	8004c66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1d9      	bne.n	8004b56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3314      	adds	r3, #20
 8004ba8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e1      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3314      	adds	r3, #20
 8004be4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e3      	bne.n	8004bde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c36:	f023 0310 	bic.w	r3, r3, #16
 8004c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c48:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e3      	bne.n	8004c24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe fe6a 	bl	800393a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f8b6 	bl	8004de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c7c:	e099      	b.n	8004db2 <HAL_UART_IRQHandler+0x50e>
 8004c7e:	bf00      	nop
 8004c80:	08005017 	.word	0x08005017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 808b 	beq.w	8004db6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8086 	beq.w	8004db6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cce:	647a      	str	r2, [r7, #68]	; 0x44
 8004cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e3      	bne.n	8004caa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3314      	adds	r3, #20
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3314      	adds	r3, #20
 8004d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d06:	633a      	str	r2, [r7, #48]	; 0x30
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e3      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0310 	bic.w	r3, r3, #16
 8004d3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d4c:	61fa      	str	r2, [r7, #28]
 8004d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	617b      	str	r3, [r7, #20]
   return(result);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e3      	bne.n	8004d28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f83e 	bl	8004de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d6c:	e023      	b.n	8004db6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_UART_IRQHandler+0x4ea>
 8004d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f959 	bl	800503e <UART_Transmit_IT>
    return;
 8004d8c:	e014      	b.n	8004db8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <HAL_UART_IRQHandler+0x514>
 8004d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f999 	bl	80050de <UART_EndTransmit_IT>
    return;
 8004dac:	e004      	b.n	8004db8 <HAL_UART_IRQHandler+0x514>
    return;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <HAL_UART_IRQHandler+0x514>
      return;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <HAL_UART_IRQHandler+0x514>
      return;
 8004db6:	bf00      	nop
  }
}
 8004db8:	37e8      	adds	r7, #232	; 0xe8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop

08004dc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b090      	sub	sp, #64	; 0x40
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e10:	e050      	b.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d04c      	beq.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e20:	f7fe fc4a 	bl	80036b8 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d241      	bcs.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e50:	637a      	str	r2, [r7, #52]	; 0x34
 8004e52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e5      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3314      	adds	r3, #20
 8004e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	613b      	str	r3, [r7, #16]
   return(result);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3314      	adds	r3, #20
 8004e82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e84:	623a      	str	r2, [r7, #32]
 8004e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	69f9      	ldr	r1, [r7, #28]
 8004e8a:	6a3a      	ldr	r2, [r7, #32]
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e00f      	b.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d09f      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3740      	adds	r7, #64	; 0x40
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2222      	movs	r2, #34	; 0x22
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f20:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0220 	orr.w	r2, r2, #32
 8004f40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b095      	sub	sp, #84	; 0x54
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f78:	643a      	str	r2, [r7, #64]	; 0x40
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d119      	bne.n	8004ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 0310 	bic.w	r3, r3, #16
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fe8:	61ba      	str	r2, [r7, #24]
 8004fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6979      	ldr	r1, [r7, #20]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30
}
 800500a:	bf00      	nop
 800500c:	3754      	adds	r7, #84	; 0x54
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fecf 	bl	8004dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b21      	cmp	r3, #33	; 0x21
 8005050:	d13e      	bne.n	80050d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d114      	bne.n	8005086 <UART_Transmit_IT+0x48>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d110      	bne.n	8005086 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005078:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]
 8005084:	e008      	b.n	8005098 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6211      	str	r1, [r2, #32]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4619      	mov	r1, r3
 80050a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10f      	bne.n	80050cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fe5e 	bl	8004dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08c      	sub	sp, #48	; 0x30
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b22      	cmp	r3, #34	; 0x22
 8005120:	f040 80ab 	bne.w	800527a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d117      	bne.n	800515e <UART_Receive_IT+0x50>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d113      	bne.n	800515e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514c:	b29a      	uxth	r2, r3
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	1c9a      	adds	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28
 800515c:	e026      	b.n	80051ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d007      	beq.n	8005182 <UART_Receive_IT+0x74>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <UART_Receive_IT+0x82>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e008      	b.n	80051a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519c:	b2da      	uxtb	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d15a      	bne.n	8005276 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0220 	bic.w	r2, r2, #32
 80051ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d135      	bne.n	800526c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	613b      	str	r3, [r7, #16]
   return(result);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f023 0310 	bic.w	r3, r3, #16
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	623a      	str	r2, [r7, #32]
 8005228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	69f9      	ldr	r1, [r7, #28]
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	61bb      	str	r3, [r7, #24]
   return(result);
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b10      	cmp	r3, #16
 8005246:	d10a      	bne.n	800525e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fdbf 	bl	8004de8 <HAL_UARTEx_RxEventCallback>
 800526a:	e002      	b.n	8005272 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fc f87b 	bl	8001368 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e002      	b.n	800527c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3730      	adds	r7, #48	; 0x30
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	b09f      	sub	sp, #124	; 0x7c
 800528a:	af00      	add	r7, sp, #0
 800528c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800528e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529a:	68d9      	ldr	r1, [r3, #12]
 800529c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	ea40 0301 	orr.w	r3, r0, r1
 80052a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80052be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052c8:	f021 010c 	bic.w	r1, r1, #12
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052d2:	430b      	orrs	r3, r1
 80052d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	6999      	ldr	r1, [r3, #24]
 80052e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	ea40 0301 	orr.w	r3, r0, r1
 80052ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4bc5      	ldr	r3, [pc, #788]	; (8005608 <UART_SetConfig+0x384>)
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d004      	beq.n	8005302 <UART_SetConfig+0x7e>
 80052f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4bc3      	ldr	r3, [pc, #780]	; (800560c <UART_SetConfig+0x388>)
 80052fe:	429a      	cmp	r2, r3
 8005300:	d103      	bne.n	800530a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005302:	f7ff f9ab 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 8005306:	6778      	str	r0, [r7, #116]	; 0x74
 8005308:	e002      	b.n	8005310 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800530a:	f7ff f993 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 800530e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005318:	f040 80b6 	bne.w	8005488 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800531c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531e:	461c      	mov	r4, r3
 8005320:	f04f 0500 	mov.w	r5, #0
 8005324:	4622      	mov	r2, r4
 8005326:	462b      	mov	r3, r5
 8005328:	1891      	adds	r1, r2, r2
 800532a:	6439      	str	r1, [r7, #64]	; 0x40
 800532c:	415b      	adcs	r3, r3
 800532e:	647b      	str	r3, [r7, #68]	; 0x44
 8005330:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005334:	1912      	adds	r2, r2, r4
 8005336:	eb45 0303 	adc.w	r3, r5, r3
 800533a:	f04f 0000 	mov.w	r0, #0
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	00d9      	lsls	r1, r3, #3
 8005344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005348:	00d0      	lsls	r0, r2, #3
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	1911      	adds	r1, r2, r4
 8005350:	6639      	str	r1, [r7, #96]	; 0x60
 8005352:	416b      	adcs	r3, r5
 8005354:	667b      	str	r3, [r7, #100]	; 0x64
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	461a      	mov	r2, r3
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	1891      	adds	r1, r2, r2
 8005362:	63b9      	str	r1, [r7, #56]	; 0x38
 8005364:	415b      	adcs	r3, r3
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800536c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005370:	f7fb fda0 	bl	8000eb4 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4ba5      	ldr	r3, [pc, #660]	; (8005610 <UART_SetConfig+0x38c>)
 800537a:	fba3 2302 	umull	r2, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	011e      	lsls	r6, r3, #4
 8005382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005384:	461c      	mov	r4, r3
 8005386:	f04f 0500 	mov.w	r5, #0
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	1891      	adds	r1, r2, r2
 8005390:	6339      	str	r1, [r7, #48]	; 0x30
 8005392:	415b      	adcs	r3, r3
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
 8005396:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800539a:	1912      	adds	r2, r2, r4
 800539c:	eb45 0303 	adc.w	r3, r5, r3
 80053a0:	f04f 0000 	mov.w	r0, #0
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	00d9      	lsls	r1, r3, #3
 80053aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053ae:	00d0      	lsls	r0, r2, #3
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	1911      	adds	r1, r2, r4
 80053b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80053b8:	416b      	adcs	r3, r5
 80053ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	461a      	mov	r2, r3
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	1891      	adds	r1, r2, r2
 80053c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80053ca:	415b      	adcs	r3, r3
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053d6:	f7fb fd6d 	bl	8000eb4 <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4b8c      	ldr	r3, [pc, #560]	; (8005610 <UART_SetConfig+0x38c>)
 80053e0:	fba3 1302 	umull	r1, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	2164      	movs	r1, #100	; 0x64
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	3332      	adds	r3, #50	; 0x32
 80053f2:	4a87      	ldr	r2, [pc, #540]	; (8005610 <UART_SetConfig+0x38c>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005400:	441e      	add	r6, r3
 8005402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005404:	4618      	mov	r0, r3
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	1894      	adds	r4, r2, r2
 8005410:	623c      	str	r4, [r7, #32]
 8005412:	415b      	adcs	r3, r3
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
 8005416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800541a:	1812      	adds	r2, r2, r0
 800541c:	eb41 0303 	adc.w	r3, r1, r3
 8005420:	f04f 0400 	mov.w	r4, #0
 8005424:	f04f 0500 	mov.w	r5, #0
 8005428:	00dd      	lsls	r5, r3, #3
 800542a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800542e:	00d4      	lsls	r4, r2, #3
 8005430:	4622      	mov	r2, r4
 8005432:	462b      	mov	r3, r5
 8005434:	1814      	adds	r4, r2, r0
 8005436:	653c      	str	r4, [r7, #80]	; 0x50
 8005438:	414b      	adcs	r3, r1
 800543a:	657b      	str	r3, [r7, #84]	; 0x54
 800543c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	461a      	mov	r2, r3
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	1891      	adds	r1, r2, r2
 8005448:	61b9      	str	r1, [r7, #24]
 800544a:	415b      	adcs	r3, r3
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005452:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005456:	f7fb fd2d 	bl	8000eb4 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4b6c      	ldr	r3, [pc, #432]	; (8005610 <UART_SetConfig+0x38c>)
 8005460:	fba3 1302 	umull	r1, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	2164      	movs	r1, #100	; 0x64
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	3332      	adds	r3, #50	; 0x32
 8005472:	4a67      	ldr	r2, [pc, #412]	; (8005610 <UART_SetConfig+0x38c>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	f003 0207 	and.w	r2, r3, #7
 800547e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4432      	add	r2, r6
 8005484:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005486:	e0b9      	b.n	80055fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548a:	461c      	mov	r4, r3
 800548c:	f04f 0500 	mov.w	r5, #0
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	1891      	adds	r1, r2, r2
 8005496:	6139      	str	r1, [r7, #16]
 8005498:	415b      	adcs	r3, r3
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80054a0:	1912      	adds	r2, r2, r4
 80054a2:	eb45 0303 	adc.w	r3, r5, r3
 80054a6:	f04f 0000 	mov.w	r0, #0
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	00d9      	lsls	r1, r3, #3
 80054b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b4:	00d0      	lsls	r0, r2, #3
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	eb12 0804 	adds.w	r8, r2, r4
 80054be:	eb43 0905 	adc.w	r9, r3, r5
 80054c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f04f 0100 	mov.w	r1, #0
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	008b      	lsls	r3, r1, #2
 80054d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054da:	0082      	lsls	r2, r0, #2
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb fce8 	bl	8000eb4 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4b49      	ldr	r3, [pc, #292]	; (8005610 <UART_SetConfig+0x38c>)
 80054ea:	fba3 2302 	umull	r2, r3, r3, r2
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	011e      	lsls	r6, r3, #4
 80054f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f4:	4618      	mov	r0, r3
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	1894      	adds	r4, r2, r2
 8005500:	60bc      	str	r4, [r7, #8]
 8005502:	415b      	adcs	r3, r3
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550a:	1812      	adds	r2, r2, r0
 800550c:	eb41 0303 	adc.w	r3, r1, r3
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	f04f 0500 	mov.w	r5, #0
 8005518:	00dd      	lsls	r5, r3, #3
 800551a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800551e:	00d4      	lsls	r4, r2, #3
 8005520:	4622      	mov	r2, r4
 8005522:	462b      	mov	r3, r5
 8005524:	1814      	adds	r4, r2, r0
 8005526:	64bc      	str	r4, [r7, #72]	; 0x48
 8005528:	414b      	adcs	r3, r1
 800552a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4618      	mov	r0, r3
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	008b      	lsls	r3, r1, #2
 8005540:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005544:	0082      	lsls	r2, r0, #2
 8005546:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800554a:	f7fb fcb3 	bl	8000eb4 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <UART_SetConfig+0x38c>)
 8005554:	fba3 1302 	umull	r1, r3, r3, r2
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	2164      	movs	r1, #100	; 0x64
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	3332      	adds	r3, #50	; 0x32
 8005566:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <UART_SetConfig+0x38c>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005572:	441e      	add	r6, r3
 8005574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005576:	4618      	mov	r0, r3
 8005578:	f04f 0100 	mov.w	r1, #0
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	1894      	adds	r4, r2, r2
 8005582:	603c      	str	r4, [r7, #0]
 8005584:	415b      	adcs	r3, r3
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800558c:	1812      	adds	r2, r2, r0
 800558e:	eb41 0303 	adc.w	r3, r1, r3
 8005592:	f04f 0400 	mov.w	r4, #0
 8005596:	f04f 0500 	mov.w	r5, #0
 800559a:	00dd      	lsls	r5, r3, #3
 800559c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055a0:	00d4      	lsls	r4, r2, #3
 80055a2:	4622      	mov	r2, r4
 80055a4:	462b      	mov	r3, r5
 80055a6:	eb12 0a00 	adds.w	sl, r2, r0
 80055aa:	eb43 0b01 	adc.w	fp, r3, r1
 80055ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f04f 0100 	mov.w	r1, #0
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	008b      	lsls	r3, r1, #2
 80055c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055c6:	0082      	lsls	r2, r0, #2
 80055c8:	4650      	mov	r0, sl
 80055ca:	4659      	mov	r1, fp
 80055cc:	f7fb fc72 	bl	8000eb4 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <UART_SetConfig+0x38c>)
 80055d6:	fba3 1302 	umull	r1, r3, r3, r2
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	2164      	movs	r1, #100	; 0x64
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	3332      	adds	r3, #50	; 0x32
 80055e8:	4a09      	ldr	r2, [pc, #36]	; (8005610 <UART_SetConfig+0x38c>)
 80055ea:	fba2 2303 	umull	r2, r3, r2, r3
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4432      	add	r2, r6
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	377c      	adds	r7, #124	; 0x7c
 8005600:	46bd      	mov	sp, r7
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005606:	bf00      	nop
 8005608:	40011000 	.word	0x40011000
 800560c:	40011400 	.word	0x40011400
 8005610:	51eb851f 	.word	0x51eb851f

08005614 <__errno>:
 8005614:	4b01      	ldr	r3, [pc, #4]	; (800561c <__errno+0x8>)
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	2000000c 	.word	0x2000000c

08005620 <__libc_init_array>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4d0d      	ldr	r5, [pc, #52]	; (8005658 <__libc_init_array+0x38>)
 8005624:	4c0d      	ldr	r4, [pc, #52]	; (800565c <__libc_init_array+0x3c>)
 8005626:	1b64      	subs	r4, r4, r5
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	2600      	movs	r6, #0
 800562c:	42a6      	cmp	r6, r4
 800562e:	d109      	bne.n	8005644 <__libc_init_array+0x24>
 8005630:	4d0b      	ldr	r5, [pc, #44]	; (8005660 <__libc_init_array+0x40>)
 8005632:	4c0c      	ldr	r4, [pc, #48]	; (8005664 <__libc_init_array+0x44>)
 8005634:	f004 fd26 	bl	800a084 <_init>
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	2600      	movs	r6, #0
 800563e:	42a6      	cmp	r6, r4
 8005640:	d105      	bne.n	800564e <__libc_init_array+0x2e>
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	f855 3b04 	ldr.w	r3, [r5], #4
 8005648:	4798      	blx	r3
 800564a:	3601      	adds	r6, #1
 800564c:	e7ee      	b.n	800562c <__libc_init_array+0xc>
 800564e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005652:	4798      	blx	r3
 8005654:	3601      	adds	r6, #1
 8005656:	e7f2      	b.n	800563e <__libc_init_array+0x1e>
 8005658:	0800b2ac 	.word	0x0800b2ac
 800565c:	0800b2ac 	.word	0x0800b2ac
 8005660:	0800b2ac 	.word	0x0800b2ac
 8005664:	0800b2b4 	.word	0x0800b2b4

08005668 <isalnum>:
 8005668:	4b02      	ldr	r3, [pc, #8]	; (8005674 <isalnum+0xc>)
 800566a:	4418      	add	r0, r3
 800566c:	7840      	ldrb	r0, [r0, #1]
 800566e:	f000 0007 	and.w	r0, r0, #7
 8005672:	4770      	bx	lr
 8005674:	0800ae80 	.word	0x0800ae80

08005678 <malloc>:
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <malloc+0xc>)
 800567a:	4601      	mov	r1, r0
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	f000 b85b 	b.w	8005738 <_malloc_r>
 8005682:	bf00      	nop
 8005684:	2000000c 	.word	0x2000000c

08005688 <memset>:
 8005688:	4402      	add	r2, r0
 800568a:	4603      	mov	r3, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	d100      	bne.n	8005692 <memset+0xa>
 8005690:	4770      	bx	lr
 8005692:	f803 1b01 	strb.w	r1, [r3], #1
 8005696:	e7f9      	b.n	800568c <memset+0x4>

08005698 <_free_r>:
 8005698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800569a:	2900      	cmp	r1, #0
 800569c:	d048      	beq.n	8005730 <_free_r+0x98>
 800569e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a2:	9001      	str	r0, [sp, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f1a1 0404 	sub.w	r4, r1, #4
 80056aa:	bfb8      	it	lt
 80056ac:	18e4      	addlt	r4, r4, r3
 80056ae:	f003 fbc5 	bl	8008e3c <__malloc_lock>
 80056b2:	4a20      	ldr	r2, [pc, #128]	; (8005734 <_free_r+0x9c>)
 80056b4:	9801      	ldr	r0, [sp, #4]
 80056b6:	6813      	ldr	r3, [r2, #0]
 80056b8:	4615      	mov	r5, r2
 80056ba:	b933      	cbnz	r3, 80056ca <_free_r+0x32>
 80056bc:	6063      	str	r3, [r4, #4]
 80056be:	6014      	str	r4, [r2, #0]
 80056c0:	b003      	add	sp, #12
 80056c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056c6:	f003 bbbf 	b.w	8008e48 <__malloc_unlock>
 80056ca:	42a3      	cmp	r3, r4
 80056cc:	d90b      	bls.n	80056e6 <_free_r+0x4e>
 80056ce:	6821      	ldr	r1, [r4, #0]
 80056d0:	1862      	adds	r2, r4, r1
 80056d2:	4293      	cmp	r3, r2
 80056d4:	bf04      	itt	eq
 80056d6:	681a      	ldreq	r2, [r3, #0]
 80056d8:	685b      	ldreq	r3, [r3, #4]
 80056da:	6063      	str	r3, [r4, #4]
 80056dc:	bf04      	itt	eq
 80056de:	1852      	addeq	r2, r2, r1
 80056e0:	6022      	streq	r2, [r4, #0]
 80056e2:	602c      	str	r4, [r5, #0]
 80056e4:	e7ec      	b.n	80056c0 <_free_r+0x28>
 80056e6:	461a      	mov	r2, r3
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	b10b      	cbz	r3, 80056f0 <_free_r+0x58>
 80056ec:	42a3      	cmp	r3, r4
 80056ee:	d9fa      	bls.n	80056e6 <_free_r+0x4e>
 80056f0:	6811      	ldr	r1, [r2, #0]
 80056f2:	1855      	adds	r5, r2, r1
 80056f4:	42a5      	cmp	r5, r4
 80056f6:	d10b      	bne.n	8005710 <_free_r+0x78>
 80056f8:	6824      	ldr	r4, [r4, #0]
 80056fa:	4421      	add	r1, r4
 80056fc:	1854      	adds	r4, r2, r1
 80056fe:	42a3      	cmp	r3, r4
 8005700:	6011      	str	r1, [r2, #0]
 8005702:	d1dd      	bne.n	80056c0 <_free_r+0x28>
 8005704:	681c      	ldr	r4, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	6053      	str	r3, [r2, #4]
 800570a:	4421      	add	r1, r4
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	e7d7      	b.n	80056c0 <_free_r+0x28>
 8005710:	d902      	bls.n	8005718 <_free_r+0x80>
 8005712:	230c      	movs	r3, #12
 8005714:	6003      	str	r3, [r0, #0]
 8005716:	e7d3      	b.n	80056c0 <_free_r+0x28>
 8005718:	6825      	ldr	r5, [r4, #0]
 800571a:	1961      	adds	r1, r4, r5
 800571c:	428b      	cmp	r3, r1
 800571e:	bf04      	itt	eq
 8005720:	6819      	ldreq	r1, [r3, #0]
 8005722:	685b      	ldreq	r3, [r3, #4]
 8005724:	6063      	str	r3, [r4, #4]
 8005726:	bf04      	itt	eq
 8005728:	1949      	addeq	r1, r1, r5
 800572a:	6021      	streq	r1, [r4, #0]
 800572c:	6054      	str	r4, [r2, #4]
 800572e:	e7c7      	b.n	80056c0 <_free_r+0x28>
 8005730:	b003      	add	sp, #12
 8005732:	bd30      	pop	{r4, r5, pc}
 8005734:	20000564 	.word	0x20000564

08005738 <_malloc_r>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	1ccd      	adds	r5, r1, #3
 800573c:	f025 0503 	bic.w	r5, r5, #3
 8005740:	3508      	adds	r5, #8
 8005742:	2d0c      	cmp	r5, #12
 8005744:	bf38      	it	cc
 8005746:	250c      	movcc	r5, #12
 8005748:	2d00      	cmp	r5, #0
 800574a:	4606      	mov	r6, r0
 800574c:	db01      	blt.n	8005752 <_malloc_r+0x1a>
 800574e:	42a9      	cmp	r1, r5
 8005750:	d903      	bls.n	800575a <_malloc_r+0x22>
 8005752:	230c      	movs	r3, #12
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	2000      	movs	r0, #0
 8005758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575a:	f003 fb6f 	bl	8008e3c <__malloc_lock>
 800575e:	4921      	ldr	r1, [pc, #132]	; (80057e4 <_malloc_r+0xac>)
 8005760:	680a      	ldr	r2, [r1, #0]
 8005762:	4614      	mov	r4, r2
 8005764:	b99c      	cbnz	r4, 800578e <_malloc_r+0x56>
 8005766:	4f20      	ldr	r7, [pc, #128]	; (80057e8 <_malloc_r+0xb0>)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	b923      	cbnz	r3, 8005776 <_malloc_r+0x3e>
 800576c:	4621      	mov	r1, r4
 800576e:	4630      	mov	r0, r6
 8005770:	f000 ff44 	bl	80065fc <_sbrk_r>
 8005774:	6038      	str	r0, [r7, #0]
 8005776:	4629      	mov	r1, r5
 8005778:	4630      	mov	r0, r6
 800577a:	f000 ff3f 	bl	80065fc <_sbrk_r>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	d123      	bne.n	80057ca <_malloc_r+0x92>
 8005782:	230c      	movs	r3, #12
 8005784:	6033      	str	r3, [r6, #0]
 8005786:	4630      	mov	r0, r6
 8005788:	f003 fb5e 	bl	8008e48 <__malloc_unlock>
 800578c:	e7e3      	b.n	8005756 <_malloc_r+0x1e>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	1b5b      	subs	r3, r3, r5
 8005792:	d417      	bmi.n	80057c4 <_malloc_r+0x8c>
 8005794:	2b0b      	cmp	r3, #11
 8005796:	d903      	bls.n	80057a0 <_malloc_r+0x68>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	441c      	add	r4, r3
 800579c:	6025      	str	r5, [r4, #0]
 800579e:	e004      	b.n	80057aa <_malloc_r+0x72>
 80057a0:	6863      	ldr	r3, [r4, #4]
 80057a2:	42a2      	cmp	r2, r4
 80057a4:	bf0c      	ite	eq
 80057a6:	600b      	streq	r3, [r1, #0]
 80057a8:	6053      	strne	r3, [r2, #4]
 80057aa:	4630      	mov	r0, r6
 80057ac:	f003 fb4c 	bl	8008e48 <__malloc_unlock>
 80057b0:	f104 000b 	add.w	r0, r4, #11
 80057b4:	1d23      	adds	r3, r4, #4
 80057b6:	f020 0007 	bic.w	r0, r0, #7
 80057ba:	1ac2      	subs	r2, r0, r3
 80057bc:	d0cc      	beq.n	8005758 <_malloc_r+0x20>
 80057be:	1a1b      	subs	r3, r3, r0
 80057c0:	50a3      	str	r3, [r4, r2]
 80057c2:	e7c9      	b.n	8005758 <_malloc_r+0x20>
 80057c4:	4622      	mov	r2, r4
 80057c6:	6864      	ldr	r4, [r4, #4]
 80057c8:	e7cc      	b.n	8005764 <_malloc_r+0x2c>
 80057ca:	1cc4      	adds	r4, r0, #3
 80057cc:	f024 0403 	bic.w	r4, r4, #3
 80057d0:	42a0      	cmp	r0, r4
 80057d2:	d0e3      	beq.n	800579c <_malloc_r+0x64>
 80057d4:	1a21      	subs	r1, r4, r0
 80057d6:	4630      	mov	r0, r6
 80057d8:	f000 ff10 	bl	80065fc <_sbrk_r>
 80057dc:	3001      	adds	r0, #1
 80057de:	d1dd      	bne.n	800579c <_malloc_r+0x64>
 80057e0:	e7cf      	b.n	8005782 <_malloc_r+0x4a>
 80057e2:	bf00      	nop
 80057e4:	20000564 	.word	0x20000564
 80057e8:	20000568 	.word	0x20000568

080057ec <__cvt>:
 80057ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f0:	ec55 4b10 	vmov	r4, r5, d0
 80057f4:	2d00      	cmp	r5, #0
 80057f6:	460e      	mov	r6, r1
 80057f8:	4619      	mov	r1, r3
 80057fa:	462b      	mov	r3, r5
 80057fc:	bfbb      	ittet	lt
 80057fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005802:	461d      	movlt	r5, r3
 8005804:	2300      	movge	r3, #0
 8005806:	232d      	movlt	r3, #45	; 0x2d
 8005808:	700b      	strb	r3, [r1, #0]
 800580a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800580c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005810:	4691      	mov	r9, r2
 8005812:	f023 0820 	bic.w	r8, r3, #32
 8005816:	bfbc      	itt	lt
 8005818:	4622      	movlt	r2, r4
 800581a:	4614      	movlt	r4, r2
 800581c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005820:	d005      	beq.n	800582e <__cvt+0x42>
 8005822:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005826:	d100      	bne.n	800582a <__cvt+0x3e>
 8005828:	3601      	adds	r6, #1
 800582a:	2102      	movs	r1, #2
 800582c:	e000      	b.n	8005830 <__cvt+0x44>
 800582e:	2103      	movs	r1, #3
 8005830:	ab03      	add	r3, sp, #12
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	ab02      	add	r3, sp, #8
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	ec45 4b10 	vmov	d0, r4, r5
 800583c:	4653      	mov	r3, sl
 800583e:	4632      	mov	r2, r6
 8005840:	f001 ff5e 	bl	8007700 <_dtoa_r>
 8005844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005848:	4607      	mov	r7, r0
 800584a:	d102      	bne.n	8005852 <__cvt+0x66>
 800584c:	f019 0f01 	tst.w	r9, #1
 8005850:	d022      	beq.n	8005898 <__cvt+0xac>
 8005852:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005856:	eb07 0906 	add.w	r9, r7, r6
 800585a:	d110      	bne.n	800587e <__cvt+0x92>
 800585c:	783b      	ldrb	r3, [r7, #0]
 800585e:	2b30      	cmp	r3, #48	; 0x30
 8005860:	d10a      	bne.n	8005878 <__cvt+0x8c>
 8005862:	2200      	movs	r2, #0
 8005864:	2300      	movs	r3, #0
 8005866:	4620      	mov	r0, r4
 8005868:	4629      	mov	r1, r5
 800586a:	f7fb f935 	bl	8000ad8 <__aeabi_dcmpeq>
 800586e:	b918      	cbnz	r0, 8005878 <__cvt+0x8c>
 8005870:	f1c6 0601 	rsb	r6, r6, #1
 8005874:	f8ca 6000 	str.w	r6, [sl]
 8005878:	f8da 3000 	ldr.w	r3, [sl]
 800587c:	4499      	add	r9, r3
 800587e:	2200      	movs	r2, #0
 8005880:	2300      	movs	r3, #0
 8005882:	4620      	mov	r0, r4
 8005884:	4629      	mov	r1, r5
 8005886:	f7fb f927 	bl	8000ad8 <__aeabi_dcmpeq>
 800588a:	b108      	cbz	r0, 8005890 <__cvt+0xa4>
 800588c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005890:	2230      	movs	r2, #48	; 0x30
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	454b      	cmp	r3, r9
 8005896:	d307      	bcc.n	80058a8 <__cvt+0xbc>
 8005898:	9b03      	ldr	r3, [sp, #12]
 800589a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800589c:	1bdb      	subs	r3, r3, r7
 800589e:	4638      	mov	r0, r7
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	b004      	add	sp, #16
 80058a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a8:	1c59      	adds	r1, r3, #1
 80058aa:	9103      	str	r1, [sp, #12]
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e7f0      	b.n	8005892 <__cvt+0xa6>

080058b0 <__exponent>:
 80058b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b2:	4603      	mov	r3, r0
 80058b4:	2900      	cmp	r1, #0
 80058b6:	bfb8      	it	lt
 80058b8:	4249      	neglt	r1, r1
 80058ba:	f803 2b02 	strb.w	r2, [r3], #2
 80058be:	bfb4      	ite	lt
 80058c0:	222d      	movlt	r2, #45	; 0x2d
 80058c2:	222b      	movge	r2, #43	; 0x2b
 80058c4:	2909      	cmp	r1, #9
 80058c6:	7042      	strb	r2, [r0, #1]
 80058c8:	dd2a      	ble.n	8005920 <__exponent+0x70>
 80058ca:	f10d 0407 	add.w	r4, sp, #7
 80058ce:	46a4      	mov	ip, r4
 80058d0:	270a      	movs	r7, #10
 80058d2:	46a6      	mov	lr, r4
 80058d4:	460a      	mov	r2, r1
 80058d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80058da:	fb07 1516 	mls	r5, r7, r6, r1
 80058de:	3530      	adds	r5, #48	; 0x30
 80058e0:	2a63      	cmp	r2, #99	; 0x63
 80058e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80058e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058ea:	4631      	mov	r1, r6
 80058ec:	dcf1      	bgt.n	80058d2 <__exponent+0x22>
 80058ee:	3130      	adds	r1, #48	; 0x30
 80058f0:	f1ae 0502 	sub.w	r5, lr, #2
 80058f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058f8:	1c44      	adds	r4, r0, #1
 80058fa:	4629      	mov	r1, r5
 80058fc:	4561      	cmp	r1, ip
 80058fe:	d30a      	bcc.n	8005916 <__exponent+0x66>
 8005900:	f10d 0209 	add.w	r2, sp, #9
 8005904:	eba2 020e 	sub.w	r2, r2, lr
 8005908:	4565      	cmp	r5, ip
 800590a:	bf88      	it	hi
 800590c:	2200      	movhi	r2, #0
 800590e:	4413      	add	r3, r2
 8005910:	1a18      	subs	r0, r3, r0
 8005912:	b003      	add	sp, #12
 8005914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800591a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800591e:	e7ed      	b.n	80058fc <__exponent+0x4c>
 8005920:	2330      	movs	r3, #48	; 0x30
 8005922:	3130      	adds	r1, #48	; 0x30
 8005924:	7083      	strb	r3, [r0, #2]
 8005926:	70c1      	strb	r1, [r0, #3]
 8005928:	1d03      	adds	r3, r0, #4
 800592a:	e7f1      	b.n	8005910 <__exponent+0x60>

0800592c <_printf_float>:
 800592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005930:	ed2d 8b02 	vpush	{d8}
 8005934:	b08d      	sub	sp, #52	; 0x34
 8005936:	460c      	mov	r4, r1
 8005938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800593c:	4616      	mov	r6, r2
 800593e:	461f      	mov	r7, r3
 8005940:	4605      	mov	r5, r0
 8005942:	f003 f9ef 	bl	8008d24 <_localeconv_r>
 8005946:	f8d0 a000 	ldr.w	sl, [r0]
 800594a:	4650      	mov	r0, sl
 800594c:	f7fa fc48 	bl	80001e0 <strlen>
 8005950:	2300      	movs	r3, #0
 8005952:	930a      	str	r3, [sp, #40]	; 0x28
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	9305      	str	r3, [sp, #20]
 8005958:	f8d8 3000 	ldr.w	r3, [r8]
 800595c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005960:	3307      	adds	r3, #7
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	f103 0208 	add.w	r2, r3, #8
 800596a:	f8c8 2000 	str.w	r2, [r8]
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005976:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800597a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800597e:	9307      	str	r3, [sp, #28]
 8005980:	f8cd 8018 	str.w	r8, [sp, #24]
 8005984:	ee08 0a10 	vmov	s16, r0
 8005988:	4b9f      	ldr	r3, [pc, #636]	; (8005c08 <_printf_float+0x2dc>)
 800598a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800598e:	f04f 32ff 	mov.w	r2, #4294967295
 8005992:	f7fb f8d3 	bl	8000b3c <__aeabi_dcmpun>
 8005996:	bb88      	cbnz	r0, 80059fc <_printf_float+0xd0>
 8005998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800599c:	4b9a      	ldr	r3, [pc, #616]	; (8005c08 <_printf_float+0x2dc>)
 800599e:	f04f 32ff 	mov.w	r2, #4294967295
 80059a2:	f7fb f8ad 	bl	8000b00 <__aeabi_dcmple>
 80059a6:	bb48      	cbnz	r0, 80059fc <_printf_float+0xd0>
 80059a8:	2200      	movs	r2, #0
 80059aa:	2300      	movs	r3, #0
 80059ac:	4640      	mov	r0, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	f7fb f89c 	bl	8000aec <__aeabi_dcmplt>
 80059b4:	b110      	cbz	r0, 80059bc <_printf_float+0x90>
 80059b6:	232d      	movs	r3, #45	; 0x2d
 80059b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059bc:	4b93      	ldr	r3, [pc, #588]	; (8005c0c <_printf_float+0x2e0>)
 80059be:	4894      	ldr	r0, [pc, #592]	; (8005c10 <_printf_float+0x2e4>)
 80059c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059c4:	bf94      	ite	ls
 80059c6:	4698      	movls	r8, r3
 80059c8:	4680      	movhi	r8, r0
 80059ca:	2303      	movs	r3, #3
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	9b05      	ldr	r3, [sp, #20]
 80059d0:	f023 0204 	bic.w	r2, r3, #4
 80059d4:	6022      	str	r2, [r4, #0]
 80059d6:	f04f 0900 	mov.w	r9, #0
 80059da:	9700      	str	r7, [sp, #0]
 80059dc:	4633      	mov	r3, r6
 80059de:	aa0b      	add	r2, sp, #44	; 0x2c
 80059e0:	4621      	mov	r1, r4
 80059e2:	4628      	mov	r0, r5
 80059e4:	f000 f9d8 	bl	8005d98 <_printf_common>
 80059e8:	3001      	adds	r0, #1
 80059ea:	f040 8090 	bne.w	8005b0e <_printf_float+0x1e2>
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	b00d      	add	sp, #52	; 0x34
 80059f4:	ecbd 8b02 	vpop	{d8}
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fc:	4642      	mov	r2, r8
 80059fe:	464b      	mov	r3, r9
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fb f89a 	bl	8000b3c <__aeabi_dcmpun>
 8005a08:	b140      	cbz	r0, 8005a1c <_printf_float+0xf0>
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfbc      	itt	lt
 8005a10:	232d      	movlt	r3, #45	; 0x2d
 8005a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a16:	487f      	ldr	r0, [pc, #508]	; (8005c14 <_printf_float+0x2e8>)
 8005a18:	4b7f      	ldr	r3, [pc, #508]	; (8005c18 <_printf_float+0x2ec>)
 8005a1a:	e7d1      	b.n	80059c0 <_printf_float+0x94>
 8005a1c:	6863      	ldr	r3, [r4, #4]
 8005a1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a22:	9206      	str	r2, [sp, #24]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	d13f      	bne.n	8005aa8 <_printf_float+0x17c>
 8005a28:	2306      	movs	r3, #6
 8005a2a:	6063      	str	r3, [r4, #4]
 8005a2c:	9b05      	ldr	r3, [sp, #20]
 8005a2e:	6861      	ldr	r1, [r4, #4]
 8005a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a34:	2300      	movs	r3, #0
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	ab0a      	add	r3, sp, #40	; 0x28
 8005a3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a3e:	ab09      	add	r3, sp, #36	; 0x24
 8005a40:	ec49 8b10 	vmov	d0, r8, r9
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff fecd 	bl	80057ec <__cvt>
 8005a52:	9b06      	ldr	r3, [sp, #24]
 8005a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a56:	2b47      	cmp	r3, #71	; 0x47
 8005a58:	4680      	mov	r8, r0
 8005a5a:	d108      	bne.n	8005a6e <_printf_float+0x142>
 8005a5c:	1cc8      	adds	r0, r1, #3
 8005a5e:	db02      	blt.n	8005a66 <_printf_float+0x13a>
 8005a60:	6863      	ldr	r3, [r4, #4]
 8005a62:	4299      	cmp	r1, r3
 8005a64:	dd41      	ble.n	8005aea <_printf_float+0x1be>
 8005a66:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a6a:	fa5f fb8b 	uxtb.w	fp, fp
 8005a6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a72:	d820      	bhi.n	8005ab6 <_printf_float+0x18a>
 8005a74:	3901      	subs	r1, #1
 8005a76:	465a      	mov	r2, fp
 8005a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8005a7e:	f7ff ff17 	bl	80058b0 <__exponent>
 8005a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a84:	1813      	adds	r3, r2, r0
 8005a86:	2a01      	cmp	r2, #1
 8005a88:	4681      	mov	r9, r0
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	dc02      	bgt.n	8005a94 <_printf_float+0x168>
 8005a8e:	6822      	ldr	r2, [r4, #0]
 8005a90:	07d2      	lsls	r2, r2, #31
 8005a92:	d501      	bpl.n	8005a98 <_printf_float+0x16c>
 8005a94:	3301      	adds	r3, #1
 8005a96:	6123      	str	r3, [r4, #16]
 8005a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d09c      	beq.n	80059da <_printf_float+0xae>
 8005aa0:	232d      	movs	r3, #45	; 0x2d
 8005aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa6:	e798      	b.n	80059da <_printf_float+0xae>
 8005aa8:	9a06      	ldr	r2, [sp, #24]
 8005aaa:	2a47      	cmp	r2, #71	; 0x47
 8005aac:	d1be      	bne.n	8005a2c <_printf_float+0x100>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1bc      	bne.n	8005a2c <_printf_float+0x100>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e7b9      	b.n	8005a2a <_printf_float+0xfe>
 8005ab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005aba:	d118      	bne.n	8005aee <_printf_float+0x1c2>
 8005abc:	2900      	cmp	r1, #0
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	dd0b      	ble.n	8005ada <_printf_float+0x1ae>
 8005ac2:	6121      	str	r1, [r4, #16]
 8005ac4:	b913      	cbnz	r3, 8005acc <_printf_float+0x1a0>
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	07d0      	lsls	r0, r2, #31
 8005aca:	d502      	bpl.n	8005ad2 <_printf_float+0x1a6>
 8005acc:	3301      	adds	r3, #1
 8005ace:	440b      	add	r3, r1
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ad4:	f04f 0900 	mov.w	r9, #0
 8005ad8:	e7de      	b.n	8005a98 <_printf_float+0x16c>
 8005ada:	b913      	cbnz	r3, 8005ae2 <_printf_float+0x1b6>
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	07d2      	lsls	r2, r2, #31
 8005ae0:	d501      	bpl.n	8005ae6 <_printf_float+0x1ba>
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	e7f4      	b.n	8005ad0 <_printf_float+0x1a4>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e7f2      	b.n	8005ad0 <_printf_float+0x1a4>
 8005aea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af0:	4299      	cmp	r1, r3
 8005af2:	db05      	blt.n	8005b00 <_printf_float+0x1d4>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	6121      	str	r1, [r4, #16]
 8005af8:	07d8      	lsls	r0, r3, #31
 8005afa:	d5ea      	bpl.n	8005ad2 <_printf_float+0x1a6>
 8005afc:	1c4b      	adds	r3, r1, #1
 8005afe:	e7e7      	b.n	8005ad0 <_printf_float+0x1a4>
 8005b00:	2900      	cmp	r1, #0
 8005b02:	bfd4      	ite	le
 8005b04:	f1c1 0202 	rsble	r2, r1, #2
 8005b08:	2201      	movgt	r2, #1
 8005b0a:	4413      	add	r3, r2
 8005b0c:	e7e0      	b.n	8005ad0 <_printf_float+0x1a4>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	055a      	lsls	r2, r3, #21
 8005b12:	d407      	bmi.n	8005b24 <_printf_float+0x1f8>
 8005b14:	6923      	ldr	r3, [r4, #16]
 8005b16:	4642      	mov	r2, r8
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d12c      	bne.n	8005b7c <_printf_float+0x250>
 8005b22:	e764      	b.n	80059ee <_printf_float+0xc2>
 8005b24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b28:	f240 80e0 	bls.w	8005cec <_printf_float+0x3c0>
 8005b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b30:	2200      	movs	r2, #0
 8005b32:	2300      	movs	r3, #0
 8005b34:	f7fa ffd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	d034      	beq.n	8005ba6 <_printf_float+0x27a>
 8005b3c:	4a37      	ldr	r2, [pc, #220]	; (8005c1c <_printf_float+0x2f0>)
 8005b3e:	2301      	movs	r3, #1
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f af51 	beq.w	80059ee <_printf_float+0xc2>
 8005b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b50:	429a      	cmp	r2, r3
 8005b52:	db02      	blt.n	8005b5a <_printf_float+0x22e>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	07d8      	lsls	r0, r3, #31
 8005b58:	d510      	bpl.n	8005b7c <_printf_float+0x250>
 8005b5a:	ee18 3a10 	vmov	r3, s16
 8005b5e:	4652      	mov	r2, sl
 8005b60:	4631      	mov	r1, r6
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f af41 	beq.w	80059ee <_printf_float+0xc2>
 8005b6c:	f04f 0800 	mov.w	r8, #0
 8005b70:	f104 091a 	add.w	r9, r4, #26
 8005b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b76:	3b01      	subs	r3, #1
 8005b78:	4543      	cmp	r3, r8
 8005b7a:	dc09      	bgt.n	8005b90 <_printf_float+0x264>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	079b      	lsls	r3, r3, #30
 8005b80:	f100 8105 	bmi.w	8005d8e <_printf_float+0x462>
 8005b84:	68e0      	ldr	r0, [r4, #12]
 8005b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b88:	4298      	cmp	r0, r3
 8005b8a:	bfb8      	it	lt
 8005b8c:	4618      	movlt	r0, r3
 8005b8e:	e730      	b.n	80059f2 <_printf_float+0xc6>
 8005b90:	2301      	movs	r3, #1
 8005b92:	464a      	mov	r2, r9
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af27 	beq.w	80059ee <_printf_float+0xc2>
 8005ba0:	f108 0801 	add.w	r8, r8, #1
 8005ba4:	e7e6      	b.n	8005b74 <_printf_float+0x248>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dc39      	bgt.n	8005c20 <_printf_float+0x2f4>
 8005bac:	4a1b      	ldr	r2, [pc, #108]	; (8005c1c <_printf_float+0x2f0>)
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f af19 	beq.w	80059ee <_printf_float+0xc2>
 8005bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d102      	bne.n	8005bca <_printf_float+0x29e>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	07d9      	lsls	r1, r3, #31
 8005bc8:	d5d8      	bpl.n	8005b7c <_printf_float+0x250>
 8005bca:	ee18 3a10 	vmov	r3, s16
 8005bce:	4652      	mov	r2, sl
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f43f af09 	beq.w	80059ee <_printf_float+0xc2>
 8005bdc:	f04f 0900 	mov.w	r9, #0
 8005be0:	f104 0a1a 	add.w	sl, r4, #26
 8005be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be6:	425b      	negs	r3, r3
 8005be8:	454b      	cmp	r3, r9
 8005bea:	dc01      	bgt.n	8005bf0 <_printf_float+0x2c4>
 8005bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bee:	e792      	b.n	8005b16 <_printf_float+0x1ea>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4652      	mov	r2, sl
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f aef7 	beq.w	80059ee <_printf_float+0xc2>
 8005c00:	f109 0901 	add.w	r9, r9, #1
 8005c04:	e7ee      	b.n	8005be4 <_printf_float+0x2b8>
 8005c06:	bf00      	nop
 8005c08:	7fefffff 	.word	0x7fefffff
 8005c0c:	0800adf0 	.word	0x0800adf0
 8005c10:	0800adf4 	.word	0x0800adf4
 8005c14:	0800adfc 	.word	0x0800adfc
 8005c18:	0800adf8 	.word	0x0800adf8
 8005c1c:	0800ae00 	.word	0x0800ae00
 8005c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c24:	429a      	cmp	r2, r3
 8005c26:	bfa8      	it	ge
 8005c28:	461a      	movge	r2, r3
 8005c2a:	2a00      	cmp	r2, #0
 8005c2c:	4691      	mov	r9, r2
 8005c2e:	dc37      	bgt.n	8005ca0 <_printf_float+0x374>
 8005c30:	f04f 0b00 	mov.w	fp, #0
 8005c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c38:	f104 021a 	add.w	r2, r4, #26
 8005c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c3e:	9305      	str	r3, [sp, #20]
 8005c40:	eba3 0309 	sub.w	r3, r3, r9
 8005c44:	455b      	cmp	r3, fp
 8005c46:	dc33      	bgt.n	8005cb0 <_printf_float+0x384>
 8005c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	db3b      	blt.n	8005cc8 <_printf_float+0x39c>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	07da      	lsls	r2, r3, #31
 8005c54:	d438      	bmi.n	8005cc8 <_printf_float+0x39c>
 8005c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c58:	9b05      	ldr	r3, [sp, #20]
 8005c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	eba2 0901 	sub.w	r9, r2, r1
 8005c62:	4599      	cmp	r9, r3
 8005c64:	bfa8      	it	ge
 8005c66:	4699      	movge	r9, r3
 8005c68:	f1b9 0f00 	cmp.w	r9, #0
 8005c6c:	dc35      	bgt.n	8005cda <_printf_float+0x3ae>
 8005c6e:	f04f 0800 	mov.w	r8, #0
 8005c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c76:	f104 0a1a 	add.w	sl, r4, #26
 8005c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	eba3 0309 	sub.w	r3, r3, r9
 8005c84:	4543      	cmp	r3, r8
 8005c86:	f77f af79 	ble.w	8005b7c <_printf_float+0x250>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	f43f aeaa 	beq.w	80059ee <_printf_float+0xc2>
 8005c9a:	f108 0801 	add.w	r8, r8, #1
 8005c9e:	e7ec      	b.n	8005c7a <_printf_float+0x34e>
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	d1c0      	bne.n	8005c30 <_printf_float+0x304>
 8005cae:	e69e      	b.n	80059ee <_printf_float+0xc2>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	9205      	str	r2, [sp, #20]
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f43f ae97 	beq.w	80059ee <_printf_float+0xc2>
 8005cc0:	9a05      	ldr	r2, [sp, #20]
 8005cc2:	f10b 0b01 	add.w	fp, fp, #1
 8005cc6:	e7b9      	b.n	8005c3c <_printf_float+0x310>
 8005cc8:	ee18 3a10 	vmov	r3, s16
 8005ccc:	4652      	mov	r2, sl
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d1be      	bne.n	8005c56 <_printf_float+0x32a>
 8005cd8:	e689      	b.n	80059ee <_printf_float+0xc2>
 8005cda:	9a05      	ldr	r2, [sp, #20]
 8005cdc:	464b      	mov	r3, r9
 8005cde:	4442      	add	r2, r8
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d1c1      	bne.n	8005c6e <_printf_float+0x342>
 8005cea:	e680      	b.n	80059ee <_printf_float+0xc2>
 8005cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cee:	2a01      	cmp	r2, #1
 8005cf0:	dc01      	bgt.n	8005cf6 <_printf_float+0x3ca>
 8005cf2:	07db      	lsls	r3, r3, #31
 8005cf4:	d538      	bpl.n	8005d68 <_printf_float+0x43c>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	47b8      	blx	r7
 8005d00:	3001      	adds	r0, #1
 8005d02:	f43f ae74 	beq.w	80059ee <_printf_float+0xc2>
 8005d06:	ee18 3a10 	vmov	r3, s16
 8005d0a:	4652      	mov	r2, sl
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f ae6b 	beq.w	80059ee <_printf_float+0xc2>
 8005d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f7fa feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d24:	b9d8      	cbnz	r0, 8005d5e <_printf_float+0x432>
 8005d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d28:	f108 0201 	add.w	r2, r8, #1
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	d10e      	bne.n	8005d56 <_printf_float+0x42a>
 8005d38:	e659      	b.n	80059ee <_printf_float+0xc2>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4652      	mov	r2, sl
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	f43f ae52 	beq.w	80059ee <_printf_float+0xc2>
 8005d4a:	f108 0801 	add.w	r8, r8, #1
 8005d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d50:	3b01      	subs	r3, #1
 8005d52:	4543      	cmp	r3, r8
 8005d54:	dcf1      	bgt.n	8005d3a <_printf_float+0x40e>
 8005d56:	464b      	mov	r3, r9
 8005d58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d5c:	e6dc      	b.n	8005b18 <_printf_float+0x1ec>
 8005d5e:	f04f 0800 	mov.w	r8, #0
 8005d62:	f104 0a1a 	add.w	sl, r4, #26
 8005d66:	e7f2      	b.n	8005d4e <_printf_float+0x422>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	e7df      	b.n	8005d2e <_printf_float+0x402>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	464a      	mov	r2, r9
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	f43f ae38 	beq.w	80059ee <_printf_float+0xc2>
 8005d7e:	f108 0801 	add.w	r8, r8, #1
 8005d82:	68e3      	ldr	r3, [r4, #12]
 8005d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d86:	1a5b      	subs	r3, r3, r1
 8005d88:	4543      	cmp	r3, r8
 8005d8a:	dcf0      	bgt.n	8005d6e <_printf_float+0x442>
 8005d8c:	e6fa      	b.n	8005b84 <_printf_float+0x258>
 8005d8e:	f04f 0800 	mov.w	r8, #0
 8005d92:	f104 0919 	add.w	r9, r4, #25
 8005d96:	e7f4      	b.n	8005d82 <_printf_float+0x456>

08005d98 <_printf_common>:
 8005d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d9c:	4616      	mov	r6, r2
 8005d9e:	4699      	mov	r9, r3
 8005da0:	688a      	ldr	r2, [r1, #8]
 8005da2:	690b      	ldr	r3, [r1, #16]
 8005da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	bfb8      	it	lt
 8005dac:	4613      	movlt	r3, r2
 8005dae:	6033      	str	r3, [r6, #0]
 8005db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005db4:	4607      	mov	r7, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	b10a      	cbz	r2, 8005dbe <_printf_common+0x26>
 8005dba:	3301      	adds	r3, #1
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	0699      	lsls	r1, r3, #26
 8005dc2:	bf42      	ittt	mi
 8005dc4:	6833      	ldrmi	r3, [r6, #0]
 8005dc6:	3302      	addmi	r3, #2
 8005dc8:	6033      	strmi	r3, [r6, #0]
 8005dca:	6825      	ldr	r5, [r4, #0]
 8005dcc:	f015 0506 	ands.w	r5, r5, #6
 8005dd0:	d106      	bne.n	8005de0 <_printf_common+0x48>
 8005dd2:	f104 0a19 	add.w	sl, r4, #25
 8005dd6:	68e3      	ldr	r3, [r4, #12]
 8005dd8:	6832      	ldr	r2, [r6, #0]
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	dc26      	bgt.n	8005e2e <_printf_common+0x96>
 8005de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005de4:	1e13      	subs	r3, r2, #0
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	bf18      	it	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	0692      	lsls	r2, r2, #26
 8005dee:	d42b      	bmi.n	8005e48 <_printf_common+0xb0>
 8005df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005df4:	4649      	mov	r1, r9
 8005df6:	4638      	mov	r0, r7
 8005df8:	47c0      	blx	r8
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d01e      	beq.n	8005e3c <_printf_common+0xa4>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	68e5      	ldr	r5, [r4, #12]
 8005e02:	6832      	ldr	r2, [r6, #0]
 8005e04:	f003 0306 	and.w	r3, r3, #6
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	bf08      	it	eq
 8005e0c:	1aad      	subeq	r5, r5, r2
 8005e0e:	68a3      	ldr	r3, [r4, #8]
 8005e10:	6922      	ldr	r2, [r4, #16]
 8005e12:	bf0c      	ite	eq
 8005e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e18:	2500      	movne	r5, #0
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	bfc4      	itt	gt
 8005e1e:	1a9b      	subgt	r3, r3, r2
 8005e20:	18ed      	addgt	r5, r5, r3
 8005e22:	2600      	movs	r6, #0
 8005e24:	341a      	adds	r4, #26
 8005e26:	42b5      	cmp	r5, r6
 8005e28:	d11a      	bne.n	8005e60 <_printf_common+0xc8>
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	e008      	b.n	8005e40 <_printf_common+0xa8>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4652      	mov	r2, sl
 8005e32:	4649      	mov	r1, r9
 8005e34:	4638      	mov	r0, r7
 8005e36:	47c0      	blx	r8
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d103      	bne.n	8005e44 <_printf_common+0xac>
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e44:	3501      	adds	r5, #1
 8005e46:	e7c6      	b.n	8005dd6 <_printf_common+0x3e>
 8005e48:	18e1      	adds	r1, r4, r3
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	2030      	movs	r0, #48	; 0x30
 8005e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e52:	4422      	add	r2, r4
 8005e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	e7c7      	b.n	8005df0 <_printf_common+0x58>
 8005e60:	2301      	movs	r3, #1
 8005e62:	4622      	mov	r2, r4
 8005e64:	4649      	mov	r1, r9
 8005e66:	4638      	mov	r0, r7
 8005e68:	47c0      	blx	r8
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d0e6      	beq.n	8005e3c <_printf_common+0xa4>
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7d9      	b.n	8005e26 <_printf_common+0x8e>
	...

08005e74 <_printf_i>:
 8005e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e78:	460c      	mov	r4, r1
 8005e7a:	4691      	mov	r9, r2
 8005e7c:	7e27      	ldrb	r7, [r4, #24]
 8005e7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e80:	2f78      	cmp	r7, #120	; 0x78
 8005e82:	4680      	mov	r8, r0
 8005e84:	469a      	mov	sl, r3
 8005e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e8a:	d807      	bhi.n	8005e9c <_printf_i+0x28>
 8005e8c:	2f62      	cmp	r7, #98	; 0x62
 8005e8e:	d80a      	bhi.n	8005ea6 <_printf_i+0x32>
 8005e90:	2f00      	cmp	r7, #0
 8005e92:	f000 80d8 	beq.w	8006046 <_printf_i+0x1d2>
 8005e96:	2f58      	cmp	r7, #88	; 0x58
 8005e98:	f000 80a3 	beq.w	8005fe2 <_printf_i+0x16e>
 8005e9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ea4:	e03a      	b.n	8005f1c <_printf_i+0xa8>
 8005ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eaa:	2b15      	cmp	r3, #21
 8005eac:	d8f6      	bhi.n	8005e9c <_printf_i+0x28>
 8005eae:	a001      	add	r0, pc, #4	; (adr r0, 8005eb4 <_printf_i+0x40>)
 8005eb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005eb4:	08005f0d 	.word	0x08005f0d
 8005eb8:	08005f21 	.word	0x08005f21
 8005ebc:	08005e9d 	.word	0x08005e9d
 8005ec0:	08005e9d 	.word	0x08005e9d
 8005ec4:	08005e9d 	.word	0x08005e9d
 8005ec8:	08005e9d 	.word	0x08005e9d
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	08005e9d 	.word	0x08005e9d
 8005ed4:	08005e9d 	.word	0x08005e9d
 8005ed8:	08005e9d 	.word	0x08005e9d
 8005edc:	08005e9d 	.word	0x08005e9d
 8005ee0:	0800602d 	.word	0x0800602d
 8005ee4:	08005f51 	.word	0x08005f51
 8005ee8:	0800600f 	.word	0x0800600f
 8005eec:	08005e9d 	.word	0x08005e9d
 8005ef0:	08005e9d 	.word	0x08005e9d
 8005ef4:	0800604f 	.word	0x0800604f
 8005ef8:	08005e9d 	.word	0x08005e9d
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005e9d 	.word	0x08005e9d
 8005f04:	08005e9d 	.word	0x08005e9d
 8005f08:	08006017 	.word	0x08006017
 8005f0c:	680b      	ldr	r3, [r1, #0]
 8005f0e:	1d1a      	adds	r2, r3, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	600a      	str	r2, [r1, #0]
 8005f14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0a3      	b.n	8006068 <_printf_i+0x1f4>
 8005f20:	6825      	ldr	r5, [r4, #0]
 8005f22:	6808      	ldr	r0, [r1, #0]
 8005f24:	062e      	lsls	r6, r5, #24
 8005f26:	f100 0304 	add.w	r3, r0, #4
 8005f2a:	d50a      	bpl.n	8005f42 <_printf_i+0xce>
 8005f2c:	6805      	ldr	r5, [r0, #0]
 8005f2e:	600b      	str	r3, [r1, #0]
 8005f30:	2d00      	cmp	r5, #0
 8005f32:	da03      	bge.n	8005f3c <_printf_i+0xc8>
 8005f34:	232d      	movs	r3, #45	; 0x2d
 8005f36:	426d      	negs	r5, r5
 8005f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f3c:	485e      	ldr	r0, [pc, #376]	; (80060b8 <_printf_i+0x244>)
 8005f3e:	230a      	movs	r3, #10
 8005f40:	e019      	b.n	8005f76 <_printf_i+0x102>
 8005f42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f46:	6805      	ldr	r5, [r0, #0]
 8005f48:	600b      	str	r3, [r1, #0]
 8005f4a:	bf18      	it	ne
 8005f4c:	b22d      	sxthne	r5, r5
 8005f4e:	e7ef      	b.n	8005f30 <_printf_i+0xbc>
 8005f50:	680b      	ldr	r3, [r1, #0]
 8005f52:	6825      	ldr	r5, [r4, #0]
 8005f54:	1d18      	adds	r0, r3, #4
 8005f56:	6008      	str	r0, [r1, #0]
 8005f58:	0628      	lsls	r0, r5, #24
 8005f5a:	d501      	bpl.n	8005f60 <_printf_i+0xec>
 8005f5c:	681d      	ldr	r5, [r3, #0]
 8005f5e:	e002      	b.n	8005f66 <_printf_i+0xf2>
 8005f60:	0669      	lsls	r1, r5, #25
 8005f62:	d5fb      	bpl.n	8005f5c <_printf_i+0xe8>
 8005f64:	881d      	ldrh	r5, [r3, #0]
 8005f66:	4854      	ldr	r0, [pc, #336]	; (80060b8 <_printf_i+0x244>)
 8005f68:	2f6f      	cmp	r7, #111	; 0x6f
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2308      	moveq	r3, #8
 8005f6e:	230a      	movne	r3, #10
 8005f70:	2100      	movs	r1, #0
 8005f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f76:	6866      	ldr	r6, [r4, #4]
 8005f78:	60a6      	str	r6, [r4, #8]
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	bfa2      	ittt	ge
 8005f7e:	6821      	ldrge	r1, [r4, #0]
 8005f80:	f021 0104 	bicge.w	r1, r1, #4
 8005f84:	6021      	strge	r1, [r4, #0]
 8005f86:	b90d      	cbnz	r5, 8005f8c <_printf_i+0x118>
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	d04d      	beq.n	8006028 <_printf_i+0x1b4>
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f92:	fb03 5711 	mls	r7, r3, r1, r5
 8005f96:	5dc7      	ldrb	r7, [r0, r7]
 8005f98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f9c:	462f      	mov	r7, r5
 8005f9e:	42bb      	cmp	r3, r7
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	d9f4      	bls.n	8005f8e <_printf_i+0x11a>
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d10b      	bne.n	8005fc0 <_printf_i+0x14c>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	07df      	lsls	r7, r3, #31
 8005fac:	d508      	bpl.n	8005fc0 <_printf_i+0x14c>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	6861      	ldr	r1, [r4, #4]
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	bfde      	ittt	le
 8005fb6:	2330      	movle	r3, #48	; 0x30
 8005fb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fc0:	1b92      	subs	r2, r2, r6
 8005fc2:	6122      	str	r2, [r4, #16]
 8005fc4:	f8cd a000 	str.w	sl, [sp]
 8005fc8:	464b      	mov	r3, r9
 8005fca:	aa03      	add	r2, sp, #12
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4640      	mov	r0, r8
 8005fd0:	f7ff fee2 	bl	8005d98 <_printf_common>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d14c      	bne.n	8006072 <_printf_i+0x1fe>
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	b004      	add	sp, #16
 8005fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe2:	4835      	ldr	r0, [pc, #212]	; (80060b8 <_printf_i+0x244>)
 8005fe4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	680e      	ldr	r6, [r1, #0]
 8005fec:	061f      	lsls	r7, r3, #24
 8005fee:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ff2:	600e      	str	r6, [r1, #0]
 8005ff4:	d514      	bpl.n	8006020 <_printf_i+0x1ac>
 8005ff6:	07d9      	lsls	r1, r3, #31
 8005ff8:	bf44      	itt	mi
 8005ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8005ffe:	6023      	strmi	r3, [r4, #0]
 8006000:	b91d      	cbnz	r5, 800600a <_printf_i+0x196>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	f023 0320 	bic.w	r3, r3, #32
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	2310      	movs	r3, #16
 800600c:	e7b0      	b.n	8005f70 <_printf_i+0xfc>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	f043 0320 	orr.w	r3, r3, #32
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	2378      	movs	r3, #120	; 0x78
 8006018:	4828      	ldr	r0, [pc, #160]	; (80060bc <_printf_i+0x248>)
 800601a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800601e:	e7e3      	b.n	8005fe8 <_printf_i+0x174>
 8006020:	065e      	lsls	r6, r3, #25
 8006022:	bf48      	it	mi
 8006024:	b2ad      	uxthmi	r5, r5
 8006026:	e7e6      	b.n	8005ff6 <_printf_i+0x182>
 8006028:	4616      	mov	r6, r2
 800602a:	e7bb      	b.n	8005fa4 <_printf_i+0x130>
 800602c:	680b      	ldr	r3, [r1, #0]
 800602e:	6826      	ldr	r6, [r4, #0]
 8006030:	6960      	ldr	r0, [r4, #20]
 8006032:	1d1d      	adds	r5, r3, #4
 8006034:	600d      	str	r5, [r1, #0]
 8006036:	0635      	lsls	r5, r6, #24
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	d501      	bpl.n	8006040 <_printf_i+0x1cc>
 800603c:	6018      	str	r0, [r3, #0]
 800603e:	e002      	b.n	8006046 <_printf_i+0x1d2>
 8006040:	0671      	lsls	r1, r6, #25
 8006042:	d5fb      	bpl.n	800603c <_printf_i+0x1c8>
 8006044:	8018      	strh	r0, [r3, #0]
 8006046:	2300      	movs	r3, #0
 8006048:	6123      	str	r3, [r4, #16]
 800604a:	4616      	mov	r6, r2
 800604c:	e7ba      	b.n	8005fc4 <_printf_i+0x150>
 800604e:	680b      	ldr	r3, [r1, #0]
 8006050:	1d1a      	adds	r2, r3, #4
 8006052:	600a      	str	r2, [r1, #0]
 8006054:	681e      	ldr	r6, [r3, #0]
 8006056:	6862      	ldr	r2, [r4, #4]
 8006058:	2100      	movs	r1, #0
 800605a:	4630      	mov	r0, r6
 800605c:	f7fa f8c8 	bl	80001f0 <memchr>
 8006060:	b108      	cbz	r0, 8006066 <_printf_i+0x1f2>
 8006062:	1b80      	subs	r0, r0, r6
 8006064:	6060      	str	r0, [r4, #4]
 8006066:	6863      	ldr	r3, [r4, #4]
 8006068:	6123      	str	r3, [r4, #16]
 800606a:	2300      	movs	r3, #0
 800606c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006070:	e7a8      	b.n	8005fc4 <_printf_i+0x150>
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	4632      	mov	r2, r6
 8006076:	4649      	mov	r1, r9
 8006078:	4640      	mov	r0, r8
 800607a:	47d0      	blx	sl
 800607c:	3001      	adds	r0, #1
 800607e:	d0ab      	beq.n	8005fd8 <_printf_i+0x164>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	079b      	lsls	r3, r3, #30
 8006084:	d413      	bmi.n	80060ae <_printf_i+0x23a>
 8006086:	68e0      	ldr	r0, [r4, #12]
 8006088:	9b03      	ldr	r3, [sp, #12]
 800608a:	4298      	cmp	r0, r3
 800608c:	bfb8      	it	lt
 800608e:	4618      	movlt	r0, r3
 8006090:	e7a4      	b.n	8005fdc <_printf_i+0x168>
 8006092:	2301      	movs	r3, #1
 8006094:	4632      	mov	r2, r6
 8006096:	4649      	mov	r1, r9
 8006098:	4640      	mov	r0, r8
 800609a:	47d0      	blx	sl
 800609c:	3001      	adds	r0, #1
 800609e:	d09b      	beq.n	8005fd8 <_printf_i+0x164>
 80060a0:	3501      	adds	r5, #1
 80060a2:	68e3      	ldr	r3, [r4, #12]
 80060a4:	9903      	ldr	r1, [sp, #12]
 80060a6:	1a5b      	subs	r3, r3, r1
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	dcf2      	bgt.n	8006092 <_printf_i+0x21e>
 80060ac:	e7eb      	b.n	8006086 <_printf_i+0x212>
 80060ae:	2500      	movs	r5, #0
 80060b0:	f104 0619 	add.w	r6, r4, #25
 80060b4:	e7f5      	b.n	80060a2 <_printf_i+0x22e>
 80060b6:	bf00      	nop
 80060b8:	0800ae02 	.word	0x0800ae02
 80060bc:	0800ae13 	.word	0x0800ae13

080060c0 <_scanf_float>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	b087      	sub	sp, #28
 80060c6:	4617      	mov	r7, r2
 80060c8:	9303      	str	r3, [sp, #12]
 80060ca:	688b      	ldr	r3, [r1, #8]
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80060d2:	bf83      	ittte	hi
 80060d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80060d8:	195b      	addhi	r3, r3, r5
 80060da:	9302      	strhi	r3, [sp, #8]
 80060dc:	2300      	movls	r3, #0
 80060de:	bf86      	itte	hi
 80060e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80060e4:	608b      	strhi	r3, [r1, #8]
 80060e6:	9302      	strls	r3, [sp, #8]
 80060e8:	680b      	ldr	r3, [r1, #0]
 80060ea:	468b      	mov	fp, r1
 80060ec:	2500      	movs	r5, #0
 80060ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80060f2:	f84b 3b1c 	str.w	r3, [fp], #28
 80060f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80060fa:	4680      	mov	r8, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	465e      	mov	r6, fp
 8006100:	46aa      	mov	sl, r5
 8006102:	46a9      	mov	r9, r5
 8006104:	9501      	str	r5, [sp, #4]
 8006106:	68a2      	ldr	r2, [r4, #8]
 8006108:	b152      	cbz	r2, 8006120 <_scanf_float+0x60>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b4e      	cmp	r3, #78	; 0x4e
 8006110:	d864      	bhi.n	80061dc <_scanf_float+0x11c>
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d83c      	bhi.n	8006190 <_scanf_float+0xd0>
 8006116:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800611a:	b2c8      	uxtb	r0, r1
 800611c:	280e      	cmp	r0, #14
 800611e:	d93a      	bls.n	8006196 <_scanf_float+0xd6>
 8006120:	f1b9 0f00 	cmp.w	r9, #0
 8006124:	d003      	beq.n	800612e <_scanf_float+0x6e>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006132:	f1ba 0f01 	cmp.w	sl, #1
 8006136:	f200 8113 	bhi.w	8006360 <_scanf_float+0x2a0>
 800613a:	455e      	cmp	r6, fp
 800613c:	f200 8105 	bhi.w	800634a <_scanf_float+0x28a>
 8006140:	2501      	movs	r5, #1
 8006142:	4628      	mov	r0, r5
 8006144:	b007      	add	sp, #28
 8006146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800614e:	2a0d      	cmp	r2, #13
 8006150:	d8e6      	bhi.n	8006120 <_scanf_float+0x60>
 8006152:	a101      	add	r1, pc, #4	; (adr r1, 8006158 <_scanf_float+0x98>)
 8006154:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006158:	08006297 	.word	0x08006297
 800615c:	08006121 	.word	0x08006121
 8006160:	08006121 	.word	0x08006121
 8006164:	08006121 	.word	0x08006121
 8006168:	080062f7 	.word	0x080062f7
 800616c:	080062cf 	.word	0x080062cf
 8006170:	08006121 	.word	0x08006121
 8006174:	08006121 	.word	0x08006121
 8006178:	080062a5 	.word	0x080062a5
 800617c:	08006121 	.word	0x08006121
 8006180:	08006121 	.word	0x08006121
 8006184:	08006121 	.word	0x08006121
 8006188:	08006121 	.word	0x08006121
 800618c:	0800625d 	.word	0x0800625d
 8006190:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006194:	e7db      	b.n	800614e <_scanf_float+0x8e>
 8006196:	290e      	cmp	r1, #14
 8006198:	d8c2      	bhi.n	8006120 <_scanf_float+0x60>
 800619a:	a001      	add	r0, pc, #4	; (adr r0, 80061a0 <_scanf_float+0xe0>)
 800619c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061a0:	0800624f 	.word	0x0800624f
 80061a4:	08006121 	.word	0x08006121
 80061a8:	0800624f 	.word	0x0800624f
 80061ac:	080062e3 	.word	0x080062e3
 80061b0:	08006121 	.word	0x08006121
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	08006239 	.word	0x08006239
 80061bc:	08006239 	.word	0x08006239
 80061c0:	08006239 	.word	0x08006239
 80061c4:	08006239 	.word	0x08006239
 80061c8:	08006239 	.word	0x08006239
 80061cc:	08006239 	.word	0x08006239
 80061d0:	08006239 	.word	0x08006239
 80061d4:	08006239 	.word	0x08006239
 80061d8:	08006239 	.word	0x08006239
 80061dc:	2b6e      	cmp	r3, #110	; 0x6e
 80061de:	d809      	bhi.n	80061f4 <_scanf_float+0x134>
 80061e0:	2b60      	cmp	r3, #96	; 0x60
 80061e2:	d8b2      	bhi.n	800614a <_scanf_float+0x8a>
 80061e4:	2b54      	cmp	r3, #84	; 0x54
 80061e6:	d077      	beq.n	80062d8 <_scanf_float+0x218>
 80061e8:	2b59      	cmp	r3, #89	; 0x59
 80061ea:	d199      	bne.n	8006120 <_scanf_float+0x60>
 80061ec:	2d07      	cmp	r5, #7
 80061ee:	d197      	bne.n	8006120 <_scanf_float+0x60>
 80061f0:	2508      	movs	r5, #8
 80061f2:	e029      	b.n	8006248 <_scanf_float+0x188>
 80061f4:	2b74      	cmp	r3, #116	; 0x74
 80061f6:	d06f      	beq.n	80062d8 <_scanf_float+0x218>
 80061f8:	2b79      	cmp	r3, #121	; 0x79
 80061fa:	e7f6      	b.n	80061ea <_scanf_float+0x12a>
 80061fc:	6821      	ldr	r1, [r4, #0]
 80061fe:	05c8      	lsls	r0, r1, #23
 8006200:	d51a      	bpl.n	8006238 <_scanf_float+0x178>
 8006202:	9b02      	ldr	r3, [sp, #8]
 8006204:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006208:	6021      	str	r1, [r4, #0]
 800620a:	f109 0901 	add.w	r9, r9, #1
 800620e:	b11b      	cbz	r3, 8006218 <_scanf_float+0x158>
 8006210:	3b01      	subs	r3, #1
 8006212:	3201      	adds	r2, #1
 8006214:	9302      	str	r3, [sp, #8]
 8006216:	60a2      	str	r2, [r4, #8]
 8006218:	68a3      	ldr	r3, [r4, #8]
 800621a:	3b01      	subs	r3, #1
 800621c:	60a3      	str	r3, [r4, #8]
 800621e:	6923      	ldr	r3, [r4, #16]
 8006220:	3301      	adds	r3, #1
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3b01      	subs	r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	f340 8084 	ble.w	8006338 <_scanf_float+0x278>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	3301      	adds	r3, #1
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	e766      	b.n	8006106 <_scanf_float+0x46>
 8006238:	eb1a 0f05 	cmn.w	sl, r5
 800623c:	f47f af70 	bne.w	8006120 <_scanf_float+0x60>
 8006240:	6822      	ldr	r2, [r4, #0]
 8006242:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006246:	6022      	str	r2, [r4, #0]
 8006248:	f806 3b01 	strb.w	r3, [r6], #1
 800624c:	e7e4      	b.n	8006218 <_scanf_float+0x158>
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	0610      	lsls	r0, r2, #24
 8006252:	f57f af65 	bpl.w	8006120 <_scanf_float+0x60>
 8006256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800625a:	e7f4      	b.n	8006246 <_scanf_float+0x186>
 800625c:	f1ba 0f00 	cmp.w	sl, #0
 8006260:	d10e      	bne.n	8006280 <_scanf_float+0x1c0>
 8006262:	f1b9 0f00 	cmp.w	r9, #0
 8006266:	d10e      	bne.n	8006286 <_scanf_float+0x1c6>
 8006268:	6822      	ldr	r2, [r4, #0]
 800626a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800626e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006272:	d108      	bne.n	8006286 <_scanf_float+0x1c6>
 8006274:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006278:	6022      	str	r2, [r4, #0]
 800627a:	f04f 0a01 	mov.w	sl, #1
 800627e:	e7e3      	b.n	8006248 <_scanf_float+0x188>
 8006280:	f1ba 0f02 	cmp.w	sl, #2
 8006284:	d055      	beq.n	8006332 <_scanf_float+0x272>
 8006286:	2d01      	cmp	r5, #1
 8006288:	d002      	beq.n	8006290 <_scanf_float+0x1d0>
 800628a:	2d04      	cmp	r5, #4
 800628c:	f47f af48 	bne.w	8006120 <_scanf_float+0x60>
 8006290:	3501      	adds	r5, #1
 8006292:	b2ed      	uxtb	r5, r5
 8006294:	e7d8      	b.n	8006248 <_scanf_float+0x188>
 8006296:	f1ba 0f01 	cmp.w	sl, #1
 800629a:	f47f af41 	bne.w	8006120 <_scanf_float+0x60>
 800629e:	f04f 0a02 	mov.w	sl, #2
 80062a2:	e7d1      	b.n	8006248 <_scanf_float+0x188>
 80062a4:	b97d      	cbnz	r5, 80062c6 <_scanf_float+0x206>
 80062a6:	f1b9 0f00 	cmp.w	r9, #0
 80062aa:	f47f af3c 	bne.w	8006126 <_scanf_float+0x66>
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062b8:	f47f af39 	bne.w	800612e <_scanf_float+0x6e>
 80062bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062c0:	6022      	str	r2, [r4, #0]
 80062c2:	2501      	movs	r5, #1
 80062c4:	e7c0      	b.n	8006248 <_scanf_float+0x188>
 80062c6:	2d03      	cmp	r5, #3
 80062c8:	d0e2      	beq.n	8006290 <_scanf_float+0x1d0>
 80062ca:	2d05      	cmp	r5, #5
 80062cc:	e7de      	b.n	800628c <_scanf_float+0x1cc>
 80062ce:	2d02      	cmp	r5, #2
 80062d0:	f47f af26 	bne.w	8006120 <_scanf_float+0x60>
 80062d4:	2503      	movs	r5, #3
 80062d6:	e7b7      	b.n	8006248 <_scanf_float+0x188>
 80062d8:	2d06      	cmp	r5, #6
 80062da:	f47f af21 	bne.w	8006120 <_scanf_float+0x60>
 80062de:	2507      	movs	r5, #7
 80062e0:	e7b2      	b.n	8006248 <_scanf_float+0x188>
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	0591      	lsls	r1, r2, #22
 80062e6:	f57f af1b 	bpl.w	8006120 <_scanf_float+0x60>
 80062ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80062ee:	6022      	str	r2, [r4, #0]
 80062f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80062f4:	e7a8      	b.n	8006248 <_scanf_float+0x188>
 80062f6:	6822      	ldr	r2, [r4, #0]
 80062f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80062fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006300:	d006      	beq.n	8006310 <_scanf_float+0x250>
 8006302:	0550      	lsls	r0, r2, #21
 8006304:	f57f af0c 	bpl.w	8006120 <_scanf_float+0x60>
 8006308:	f1b9 0f00 	cmp.w	r9, #0
 800630c:	f43f af0f 	beq.w	800612e <_scanf_float+0x6e>
 8006310:	0591      	lsls	r1, r2, #22
 8006312:	bf58      	it	pl
 8006314:	9901      	ldrpl	r1, [sp, #4]
 8006316:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800631a:	bf58      	it	pl
 800631c:	eba9 0101 	subpl.w	r1, r9, r1
 8006320:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006324:	bf58      	it	pl
 8006326:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800632a:	6022      	str	r2, [r4, #0]
 800632c:	f04f 0900 	mov.w	r9, #0
 8006330:	e78a      	b.n	8006248 <_scanf_float+0x188>
 8006332:	f04f 0a03 	mov.w	sl, #3
 8006336:	e787      	b.n	8006248 <_scanf_float+0x188>
 8006338:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800633c:	4639      	mov	r1, r7
 800633e:	4640      	mov	r0, r8
 8006340:	4798      	blx	r3
 8006342:	2800      	cmp	r0, #0
 8006344:	f43f aedf 	beq.w	8006106 <_scanf_float+0x46>
 8006348:	e6ea      	b.n	8006120 <_scanf_float+0x60>
 800634a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800634e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006352:	463a      	mov	r2, r7
 8006354:	4640      	mov	r0, r8
 8006356:	4798      	blx	r3
 8006358:	6923      	ldr	r3, [r4, #16]
 800635a:	3b01      	subs	r3, #1
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	e6ec      	b.n	800613a <_scanf_float+0x7a>
 8006360:	1e6b      	subs	r3, r5, #1
 8006362:	2b06      	cmp	r3, #6
 8006364:	d825      	bhi.n	80063b2 <_scanf_float+0x2f2>
 8006366:	2d02      	cmp	r5, #2
 8006368:	d836      	bhi.n	80063d8 <_scanf_float+0x318>
 800636a:	455e      	cmp	r6, fp
 800636c:	f67f aee8 	bls.w	8006140 <_scanf_float+0x80>
 8006370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006374:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006378:	463a      	mov	r2, r7
 800637a:	4640      	mov	r0, r8
 800637c:	4798      	blx	r3
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	3b01      	subs	r3, #1
 8006382:	6123      	str	r3, [r4, #16]
 8006384:	e7f1      	b.n	800636a <_scanf_float+0x2aa>
 8006386:	9802      	ldr	r0, [sp, #8]
 8006388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800638c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006390:	9002      	str	r0, [sp, #8]
 8006392:	463a      	mov	r2, r7
 8006394:	4640      	mov	r0, r8
 8006396:	4798      	blx	r3
 8006398:	6923      	ldr	r3, [r4, #16]
 800639a:	3b01      	subs	r3, #1
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063a2:	fa5f fa8a 	uxtb.w	sl, sl
 80063a6:	f1ba 0f02 	cmp.w	sl, #2
 80063aa:	d1ec      	bne.n	8006386 <_scanf_float+0x2c6>
 80063ac:	3d03      	subs	r5, #3
 80063ae:	b2ed      	uxtb	r5, r5
 80063b0:	1b76      	subs	r6, r6, r5
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	05da      	lsls	r2, r3, #23
 80063b6:	d52f      	bpl.n	8006418 <_scanf_float+0x358>
 80063b8:	055b      	lsls	r3, r3, #21
 80063ba:	d510      	bpl.n	80063de <_scanf_float+0x31e>
 80063bc:	455e      	cmp	r6, fp
 80063be:	f67f aebf 	bls.w	8006140 <_scanf_float+0x80>
 80063c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063ca:	463a      	mov	r2, r7
 80063cc:	4640      	mov	r0, r8
 80063ce:	4798      	blx	r3
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	e7f1      	b.n	80063bc <_scanf_float+0x2fc>
 80063d8:	46aa      	mov	sl, r5
 80063da:	9602      	str	r6, [sp, #8]
 80063dc:	e7df      	b.n	800639e <_scanf_float+0x2de>
 80063de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	2965      	cmp	r1, #101	; 0x65
 80063e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80063ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	d00c      	beq.n	800640c <_scanf_float+0x34c>
 80063f2:	2945      	cmp	r1, #69	; 0x45
 80063f4:	d00a      	beq.n	800640c <_scanf_float+0x34c>
 80063f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063fa:	463a      	mov	r2, r7
 80063fc:	4640      	mov	r0, r8
 80063fe:	4798      	blx	r3
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006406:	3b01      	subs	r3, #1
 8006408:	1eb5      	subs	r5, r6, #2
 800640a:	6123      	str	r3, [r4, #16]
 800640c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006410:	463a      	mov	r2, r7
 8006412:	4640      	mov	r0, r8
 8006414:	4798      	blx	r3
 8006416:	462e      	mov	r6, r5
 8006418:	6825      	ldr	r5, [r4, #0]
 800641a:	f015 0510 	ands.w	r5, r5, #16
 800641e:	d158      	bne.n	80064d2 <_scanf_float+0x412>
 8006420:	7035      	strb	r5, [r6, #0]
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642c:	d11c      	bne.n	8006468 <_scanf_float+0x3a8>
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	454b      	cmp	r3, r9
 8006432:	eba3 0209 	sub.w	r2, r3, r9
 8006436:	d124      	bne.n	8006482 <_scanf_float+0x3c2>
 8006438:	2200      	movs	r2, #0
 800643a:	4659      	mov	r1, fp
 800643c:	4640      	mov	r0, r8
 800643e:	f000 ff85 	bl	800734c <_strtod_r>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	6821      	ldr	r1, [r4, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f011 0f02 	tst.w	r1, #2
 800644c:	ec57 6b10 	vmov	r6, r7, d0
 8006450:	f103 0204 	add.w	r2, r3, #4
 8006454:	d020      	beq.n	8006498 <_scanf_float+0x3d8>
 8006456:	9903      	ldr	r1, [sp, #12]
 8006458:	600a      	str	r2, [r1, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	e9c3 6700 	strd	r6, r7, [r3]
 8006460:	68e3      	ldr	r3, [r4, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60e3      	str	r3, [r4, #12]
 8006466:	e66c      	b.n	8006142 <_scanf_float+0x82>
 8006468:	9b04      	ldr	r3, [sp, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0e4      	beq.n	8006438 <_scanf_float+0x378>
 800646e:	9905      	ldr	r1, [sp, #20]
 8006470:	230a      	movs	r3, #10
 8006472:	462a      	mov	r2, r5
 8006474:	3101      	adds	r1, #1
 8006476:	4640      	mov	r0, r8
 8006478:	f000 fff2 	bl	8007460 <_strtol_r>
 800647c:	9b04      	ldr	r3, [sp, #16]
 800647e:	9e05      	ldr	r6, [sp, #20]
 8006480:	1ac2      	subs	r2, r0, r3
 8006482:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006486:	429e      	cmp	r6, r3
 8006488:	bf28      	it	cs
 800648a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800648e:	4912      	ldr	r1, [pc, #72]	; (80064d8 <_scanf_float+0x418>)
 8006490:	4630      	mov	r0, r6
 8006492:	f000 f8fd 	bl	8006690 <siprintf>
 8006496:	e7cf      	b.n	8006438 <_scanf_float+0x378>
 8006498:	f011 0f04 	tst.w	r1, #4
 800649c:	9903      	ldr	r1, [sp, #12]
 800649e:	600a      	str	r2, [r1, #0]
 80064a0:	d1db      	bne.n	800645a <_scanf_float+0x39a>
 80064a2:	f8d3 8000 	ldr.w	r8, [r3]
 80064a6:	ee10 2a10 	vmov	r2, s0
 80064aa:	ee10 0a10 	vmov	r0, s0
 80064ae:	463b      	mov	r3, r7
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7fa fb43 	bl	8000b3c <__aeabi_dcmpun>
 80064b6:	b128      	cbz	r0, 80064c4 <_scanf_float+0x404>
 80064b8:	4808      	ldr	r0, [pc, #32]	; (80064dc <_scanf_float+0x41c>)
 80064ba:	f000 f8af 	bl	800661c <nanf>
 80064be:	ed88 0a00 	vstr	s0, [r8]
 80064c2:	e7cd      	b.n	8006460 <_scanf_float+0x3a0>
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7fa fb96 	bl	8000bf8 <__aeabi_d2f>
 80064cc:	f8c8 0000 	str.w	r0, [r8]
 80064d0:	e7c6      	b.n	8006460 <_scanf_float+0x3a0>
 80064d2:	2500      	movs	r5, #0
 80064d4:	e635      	b.n	8006142 <_scanf_float+0x82>
 80064d6:	bf00      	nop
 80064d8:	0800ae24 	.word	0x0800ae24
 80064dc:	0800b2a0 	.word	0x0800b2a0

080064e0 <iprintf>:
 80064e0:	b40f      	push	{r0, r1, r2, r3}
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <iprintf+0x2c>)
 80064e4:	b513      	push	{r0, r1, r4, lr}
 80064e6:	681c      	ldr	r4, [r3, #0]
 80064e8:	b124      	cbz	r4, 80064f4 <iprintf+0x14>
 80064ea:	69a3      	ldr	r3, [r4, #24]
 80064ec:	b913      	cbnz	r3, 80064f4 <iprintf+0x14>
 80064ee:	4620      	mov	r0, r4
 80064f0:	f002 f80c 	bl	800850c <__sinit>
 80064f4:	ab05      	add	r3, sp, #20
 80064f6:	9a04      	ldr	r2, [sp, #16]
 80064f8:	68a1      	ldr	r1, [r4, #8]
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	4620      	mov	r0, r4
 80064fe:	f003 faf9 	bl	8009af4 <_vfiprintf_r>
 8006502:	b002      	add	sp, #8
 8006504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006508:	b004      	add	sp, #16
 800650a:	4770      	bx	lr
 800650c:	2000000c 	.word	0x2000000c

08006510 <_puts_r>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	460e      	mov	r6, r1
 8006514:	4605      	mov	r5, r0
 8006516:	b118      	cbz	r0, 8006520 <_puts_r+0x10>
 8006518:	6983      	ldr	r3, [r0, #24]
 800651a:	b90b      	cbnz	r3, 8006520 <_puts_r+0x10>
 800651c:	f001 fff6 	bl	800850c <__sinit>
 8006520:	69ab      	ldr	r3, [r5, #24]
 8006522:	68ac      	ldr	r4, [r5, #8]
 8006524:	b913      	cbnz	r3, 800652c <_puts_r+0x1c>
 8006526:	4628      	mov	r0, r5
 8006528:	f001 fff0 	bl	800850c <__sinit>
 800652c:	4b2c      	ldr	r3, [pc, #176]	; (80065e0 <_puts_r+0xd0>)
 800652e:	429c      	cmp	r4, r3
 8006530:	d120      	bne.n	8006574 <_puts_r+0x64>
 8006532:	686c      	ldr	r4, [r5, #4]
 8006534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006536:	07db      	lsls	r3, r3, #31
 8006538:	d405      	bmi.n	8006546 <_puts_r+0x36>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	0598      	lsls	r0, r3, #22
 800653e:	d402      	bmi.n	8006546 <_puts_r+0x36>
 8006540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006542:	f002 fbf4 	bl	8008d2e <__retarget_lock_acquire_recursive>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	0719      	lsls	r1, r3, #28
 800654a:	d51d      	bpl.n	8006588 <_puts_r+0x78>
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	b1db      	cbz	r3, 8006588 <_puts_r+0x78>
 8006550:	3e01      	subs	r6, #1
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006558:	3b01      	subs	r3, #1
 800655a:	60a3      	str	r3, [r4, #8]
 800655c:	bb39      	cbnz	r1, 80065ae <_puts_r+0x9e>
 800655e:	2b00      	cmp	r3, #0
 8006560:	da38      	bge.n	80065d4 <_puts_r+0xc4>
 8006562:	4622      	mov	r2, r4
 8006564:	210a      	movs	r1, #10
 8006566:	4628      	mov	r0, r5
 8006568:	f000 ff7c 	bl	8007464 <__swbuf_r>
 800656c:	3001      	adds	r0, #1
 800656e:	d011      	beq.n	8006594 <_puts_r+0x84>
 8006570:	250a      	movs	r5, #10
 8006572:	e011      	b.n	8006598 <_puts_r+0x88>
 8006574:	4b1b      	ldr	r3, [pc, #108]	; (80065e4 <_puts_r+0xd4>)
 8006576:	429c      	cmp	r4, r3
 8006578:	d101      	bne.n	800657e <_puts_r+0x6e>
 800657a:	68ac      	ldr	r4, [r5, #8]
 800657c:	e7da      	b.n	8006534 <_puts_r+0x24>
 800657e:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <_puts_r+0xd8>)
 8006580:	429c      	cmp	r4, r3
 8006582:	bf08      	it	eq
 8006584:	68ec      	ldreq	r4, [r5, #12]
 8006586:	e7d5      	b.n	8006534 <_puts_r+0x24>
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f000 ffbc 	bl	8007508 <__swsetup_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	d0dd      	beq.n	8006550 <_puts_r+0x40>
 8006594:	f04f 35ff 	mov.w	r5, #4294967295
 8006598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800659a:	07da      	lsls	r2, r3, #31
 800659c:	d405      	bmi.n	80065aa <_puts_r+0x9a>
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	059b      	lsls	r3, r3, #22
 80065a2:	d402      	bmi.n	80065aa <_puts_r+0x9a>
 80065a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a6:	f002 fbc3 	bl	8008d30 <__retarget_lock_release_recursive>
 80065aa:	4628      	mov	r0, r5
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	da04      	bge.n	80065bc <_puts_r+0xac>
 80065b2:	69a2      	ldr	r2, [r4, #24]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	dc06      	bgt.n	80065c6 <_puts_r+0xb6>
 80065b8:	290a      	cmp	r1, #10
 80065ba:	d004      	beq.n	80065c6 <_puts_r+0xb6>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	6022      	str	r2, [r4, #0]
 80065c2:	7019      	strb	r1, [r3, #0]
 80065c4:	e7c5      	b.n	8006552 <_puts_r+0x42>
 80065c6:	4622      	mov	r2, r4
 80065c8:	4628      	mov	r0, r5
 80065ca:	f000 ff4b 	bl	8007464 <__swbuf_r>
 80065ce:	3001      	adds	r0, #1
 80065d0:	d1bf      	bne.n	8006552 <_puts_r+0x42>
 80065d2:	e7df      	b.n	8006594 <_puts_r+0x84>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	250a      	movs	r5, #10
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	6022      	str	r2, [r4, #0]
 80065dc:	701d      	strb	r5, [r3, #0]
 80065de:	e7db      	b.n	8006598 <_puts_r+0x88>
 80065e0:	0800b038 	.word	0x0800b038
 80065e4:	0800b058 	.word	0x0800b058
 80065e8:	0800b018 	.word	0x0800b018

080065ec <puts>:
 80065ec:	4b02      	ldr	r3, [pc, #8]	; (80065f8 <puts+0xc>)
 80065ee:	4601      	mov	r1, r0
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	f7ff bf8d 	b.w	8006510 <_puts_r>
 80065f6:	bf00      	nop
 80065f8:	2000000c 	.word	0x2000000c

080065fc <_sbrk_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4d06      	ldr	r5, [pc, #24]	; (8006618 <_sbrk_r+0x1c>)
 8006600:	2300      	movs	r3, #0
 8006602:	4604      	mov	r4, r0
 8006604:	4608      	mov	r0, r1
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	f7fc fe46 	bl	8003298 <_sbrk>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_sbrk_r+0x1a>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	b103      	cbz	r3, 8006616 <_sbrk_r+0x1a>
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	200005c0 	.word	0x200005c0

0800661c <nanf>:
 800661c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006624 <nanf+0x8>
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	7fc00000 	.word	0x7fc00000

08006628 <sniprintf>:
 8006628:	b40c      	push	{r2, r3}
 800662a:	b530      	push	{r4, r5, lr}
 800662c:	4b17      	ldr	r3, [pc, #92]	; (800668c <sniprintf+0x64>)
 800662e:	1e0c      	subs	r4, r1, #0
 8006630:	681d      	ldr	r5, [r3, #0]
 8006632:	b09d      	sub	sp, #116	; 0x74
 8006634:	da08      	bge.n	8006648 <sniprintf+0x20>
 8006636:	238b      	movs	r3, #139	; 0x8b
 8006638:	602b      	str	r3, [r5, #0]
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	b01d      	add	sp, #116	; 0x74
 8006640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006644:	b002      	add	sp, #8
 8006646:	4770      	bx	lr
 8006648:	f44f 7302 	mov.w	r3, #520	; 0x208
 800664c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006650:	bf14      	ite	ne
 8006652:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006656:	4623      	moveq	r3, r4
 8006658:	9304      	str	r3, [sp, #16]
 800665a:	9307      	str	r3, [sp, #28]
 800665c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006660:	9002      	str	r0, [sp, #8]
 8006662:	9006      	str	r0, [sp, #24]
 8006664:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006668:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800666a:	ab21      	add	r3, sp, #132	; 0x84
 800666c:	a902      	add	r1, sp, #8
 800666e:	4628      	mov	r0, r5
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	f003 f915 	bl	80098a0 <_svfiprintf_r>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	bfbc      	itt	lt
 800667a:	238b      	movlt	r3, #139	; 0x8b
 800667c:	602b      	strlt	r3, [r5, #0]
 800667e:	2c00      	cmp	r4, #0
 8006680:	d0dd      	beq.n	800663e <sniprintf+0x16>
 8006682:	9b02      	ldr	r3, [sp, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	e7d9      	b.n	800663e <sniprintf+0x16>
 800668a:	bf00      	nop
 800668c:	2000000c 	.word	0x2000000c

08006690 <siprintf>:
 8006690:	b40e      	push	{r1, r2, r3}
 8006692:	b500      	push	{lr}
 8006694:	b09c      	sub	sp, #112	; 0x70
 8006696:	ab1d      	add	r3, sp, #116	; 0x74
 8006698:	9002      	str	r0, [sp, #8]
 800669a:	9006      	str	r0, [sp, #24]
 800669c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066a0:	4809      	ldr	r0, [pc, #36]	; (80066c8 <siprintf+0x38>)
 80066a2:	9107      	str	r1, [sp, #28]
 80066a4:	9104      	str	r1, [sp, #16]
 80066a6:	4909      	ldr	r1, [pc, #36]	; (80066cc <siprintf+0x3c>)
 80066a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ac:	9105      	str	r1, [sp, #20]
 80066ae:	6800      	ldr	r0, [r0, #0]
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	a902      	add	r1, sp, #8
 80066b4:	f003 f8f4 	bl	80098a0 <_svfiprintf_r>
 80066b8:	9b02      	ldr	r3, [sp, #8]
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	b01c      	add	sp, #112	; 0x70
 80066c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066c4:	b003      	add	sp, #12
 80066c6:	4770      	bx	lr
 80066c8:	2000000c 	.word	0x2000000c
 80066cc:	ffff0208 	.word	0xffff0208

080066d0 <strstr>:
 80066d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066d2:	780c      	ldrb	r4, [r1, #0]
 80066d4:	b164      	cbz	r4, 80066f0 <strstr+0x20>
 80066d6:	4603      	mov	r3, r0
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	1c5e      	adds	r6, r3, #1
 80066de:	b90a      	cbnz	r2, 80066e4 <strstr+0x14>
 80066e0:	4610      	mov	r0, r2
 80066e2:	e005      	b.n	80066f0 <strstr+0x20>
 80066e4:	4294      	cmp	r4, r2
 80066e6:	d108      	bne.n	80066fa <strstr+0x2a>
 80066e8:	460d      	mov	r5, r1
 80066ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80066ee:	b902      	cbnz	r2, 80066f2 <strstr+0x22>
 80066f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066f2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80066f6:	4297      	cmp	r7, r2
 80066f8:	d0f7      	beq.n	80066ea <strstr+0x1a>
 80066fa:	4633      	mov	r3, r6
 80066fc:	e7ec      	b.n	80066d8 <strstr+0x8>

080066fe <sulp>:
 80066fe:	b570      	push	{r4, r5, r6, lr}
 8006700:	4604      	mov	r4, r0
 8006702:	460d      	mov	r5, r1
 8006704:	ec45 4b10 	vmov	d0, r4, r5
 8006708:	4616      	mov	r6, r2
 800670a:	f002 ff0f 	bl	800952c <__ulp>
 800670e:	ec51 0b10 	vmov	r0, r1, d0
 8006712:	b17e      	cbz	r6, 8006734 <sulp+0x36>
 8006714:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006718:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800671c:	2b00      	cmp	r3, #0
 800671e:	dd09      	ble.n	8006734 <sulp+0x36>
 8006720:	051b      	lsls	r3, r3, #20
 8006722:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006726:	2400      	movs	r4, #0
 8006728:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800672c:	4622      	mov	r2, r4
 800672e:	462b      	mov	r3, r5
 8006730:	f7f9 ff6a 	bl	8000608 <__aeabi_dmul>
 8006734:	bd70      	pop	{r4, r5, r6, pc}
	...

08006738 <_strtod_l>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	b0a3      	sub	sp, #140	; 0x8c
 800673e:	461f      	mov	r7, r3
 8006740:	2300      	movs	r3, #0
 8006742:	931e      	str	r3, [sp, #120]	; 0x78
 8006744:	4ba4      	ldr	r3, [pc, #656]	; (80069d8 <_strtod_l+0x2a0>)
 8006746:	9219      	str	r2, [sp, #100]	; 0x64
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	9307      	str	r3, [sp, #28]
 800674c:	4604      	mov	r4, r0
 800674e:	4618      	mov	r0, r3
 8006750:	4688      	mov	r8, r1
 8006752:	f7f9 fd45 	bl	80001e0 <strlen>
 8006756:	f04f 0a00 	mov.w	sl, #0
 800675a:	4605      	mov	r5, r0
 800675c:	f04f 0b00 	mov.w	fp, #0
 8006760:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006766:	781a      	ldrb	r2, [r3, #0]
 8006768:	2a2b      	cmp	r2, #43	; 0x2b
 800676a:	d04c      	beq.n	8006806 <_strtod_l+0xce>
 800676c:	d839      	bhi.n	80067e2 <_strtod_l+0xaa>
 800676e:	2a0d      	cmp	r2, #13
 8006770:	d832      	bhi.n	80067d8 <_strtod_l+0xa0>
 8006772:	2a08      	cmp	r2, #8
 8006774:	d832      	bhi.n	80067dc <_strtod_l+0xa4>
 8006776:	2a00      	cmp	r2, #0
 8006778:	d03c      	beq.n	80067f4 <_strtod_l+0xbc>
 800677a:	2300      	movs	r3, #0
 800677c:	930e      	str	r3, [sp, #56]	; 0x38
 800677e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006780:	7833      	ldrb	r3, [r6, #0]
 8006782:	2b30      	cmp	r3, #48	; 0x30
 8006784:	f040 80b4 	bne.w	80068f0 <_strtod_l+0x1b8>
 8006788:	7873      	ldrb	r3, [r6, #1]
 800678a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800678e:	2b58      	cmp	r3, #88	; 0x58
 8006790:	d16c      	bne.n	800686c <_strtod_l+0x134>
 8006792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	ab1e      	add	r3, sp, #120	; 0x78
 8006798:	9702      	str	r7, [sp, #8]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4a8f      	ldr	r2, [pc, #572]	; (80069dc <_strtod_l+0x2a4>)
 800679e:	ab1f      	add	r3, sp, #124	; 0x7c
 80067a0:	a91d      	add	r1, sp, #116	; 0x74
 80067a2:	4620      	mov	r0, r4
 80067a4:	f001 ffb6 	bl	8008714 <__gethex>
 80067a8:	f010 0707 	ands.w	r7, r0, #7
 80067ac:	4605      	mov	r5, r0
 80067ae:	d005      	beq.n	80067bc <_strtod_l+0x84>
 80067b0:	2f06      	cmp	r7, #6
 80067b2:	d12a      	bne.n	800680a <_strtod_l+0xd2>
 80067b4:	3601      	adds	r6, #1
 80067b6:	2300      	movs	r3, #0
 80067b8:	961d      	str	r6, [sp, #116]	; 0x74
 80067ba:	930e      	str	r3, [sp, #56]	; 0x38
 80067bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 8596 	bne.w	80072f0 <_strtod_l+0xbb8>
 80067c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067c6:	b1db      	cbz	r3, 8006800 <_strtod_l+0xc8>
 80067c8:	4652      	mov	r2, sl
 80067ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067ce:	ec43 2b10 	vmov	d0, r2, r3
 80067d2:	b023      	add	sp, #140	; 0x8c
 80067d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	2a20      	cmp	r2, #32
 80067da:	d1ce      	bne.n	800677a <_strtod_l+0x42>
 80067dc:	3301      	adds	r3, #1
 80067de:	931d      	str	r3, [sp, #116]	; 0x74
 80067e0:	e7c0      	b.n	8006764 <_strtod_l+0x2c>
 80067e2:	2a2d      	cmp	r2, #45	; 0x2d
 80067e4:	d1c9      	bne.n	800677a <_strtod_l+0x42>
 80067e6:	2201      	movs	r2, #1
 80067e8:	920e      	str	r2, [sp, #56]	; 0x38
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	921d      	str	r2, [sp, #116]	; 0x74
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1c4      	bne.n	800677e <_strtod_l+0x46>
 80067f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 8576 	bne.w	80072ec <_strtod_l+0xbb4>
 8006800:	4652      	mov	r2, sl
 8006802:	465b      	mov	r3, fp
 8006804:	e7e3      	b.n	80067ce <_strtod_l+0x96>
 8006806:	2200      	movs	r2, #0
 8006808:	e7ee      	b.n	80067e8 <_strtod_l+0xb0>
 800680a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800680c:	b13a      	cbz	r2, 800681e <_strtod_l+0xe6>
 800680e:	2135      	movs	r1, #53	; 0x35
 8006810:	a820      	add	r0, sp, #128	; 0x80
 8006812:	f002 ff96 	bl	8009742 <__copybits>
 8006816:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006818:	4620      	mov	r0, r4
 800681a:	f002 fb5b 	bl	8008ed4 <_Bfree>
 800681e:	3f01      	subs	r7, #1
 8006820:	2f05      	cmp	r7, #5
 8006822:	d807      	bhi.n	8006834 <_strtod_l+0xfc>
 8006824:	e8df f007 	tbb	[pc, r7]
 8006828:	1d180b0e 	.word	0x1d180b0e
 800682c:	030e      	.short	0x030e
 800682e:	f04f 0b00 	mov.w	fp, #0
 8006832:	46da      	mov	sl, fp
 8006834:	0728      	lsls	r0, r5, #28
 8006836:	d5c1      	bpl.n	80067bc <_strtod_l+0x84>
 8006838:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800683c:	e7be      	b.n	80067bc <_strtod_l+0x84>
 800683e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006842:	e7f7      	b.n	8006834 <_strtod_l+0xfc>
 8006844:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006848:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800684a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800684e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006852:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006856:	e7ed      	b.n	8006834 <_strtod_l+0xfc>
 8006858:	f8df b184 	ldr.w	fp, [pc, #388]	; 80069e0 <_strtod_l+0x2a8>
 800685c:	f04f 0a00 	mov.w	sl, #0
 8006860:	e7e8      	b.n	8006834 <_strtod_l+0xfc>
 8006862:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006866:	f04f 3aff 	mov.w	sl, #4294967295
 800686a:	e7e3      	b.n	8006834 <_strtod_l+0xfc>
 800686c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	921d      	str	r2, [sp, #116]	; 0x74
 8006872:	785b      	ldrb	r3, [r3, #1]
 8006874:	2b30      	cmp	r3, #48	; 0x30
 8006876:	d0f9      	beq.n	800686c <_strtod_l+0x134>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d09f      	beq.n	80067bc <_strtod_l+0x84>
 800687c:	2301      	movs	r3, #1
 800687e:	f04f 0900 	mov.w	r9, #0
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006886:	930a      	str	r3, [sp, #40]	; 0x28
 8006888:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800688c:	464f      	mov	r7, r9
 800688e:	220a      	movs	r2, #10
 8006890:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006892:	7806      	ldrb	r6, [r0, #0]
 8006894:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006898:	b2d9      	uxtb	r1, r3
 800689a:	2909      	cmp	r1, #9
 800689c:	d92a      	bls.n	80068f4 <_strtod_l+0x1bc>
 800689e:	9907      	ldr	r1, [sp, #28]
 80068a0:	462a      	mov	r2, r5
 80068a2:	f003 faa4 	bl	8009dee <strncmp>
 80068a6:	b398      	cbz	r0, 8006910 <_strtod_l+0x1d8>
 80068a8:	2000      	movs	r0, #0
 80068aa:	4633      	mov	r3, r6
 80068ac:	463d      	mov	r5, r7
 80068ae:	9007      	str	r0, [sp, #28]
 80068b0:	4602      	mov	r2, r0
 80068b2:	2b65      	cmp	r3, #101	; 0x65
 80068b4:	d001      	beq.n	80068ba <_strtod_l+0x182>
 80068b6:	2b45      	cmp	r3, #69	; 0x45
 80068b8:	d118      	bne.n	80068ec <_strtod_l+0x1b4>
 80068ba:	b91d      	cbnz	r5, 80068c4 <_strtod_l+0x18c>
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	4303      	orrs	r3, r0
 80068c0:	d098      	beq.n	80067f4 <_strtod_l+0xbc>
 80068c2:	2500      	movs	r5, #0
 80068c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80068c8:	f108 0301 	add.w	r3, r8, #1
 80068cc:	931d      	str	r3, [sp, #116]	; 0x74
 80068ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80068d2:	2b2b      	cmp	r3, #43	; 0x2b
 80068d4:	d075      	beq.n	80069c2 <_strtod_l+0x28a>
 80068d6:	2b2d      	cmp	r3, #45	; 0x2d
 80068d8:	d07b      	beq.n	80069d2 <_strtod_l+0x29a>
 80068da:	f04f 0c00 	mov.w	ip, #0
 80068de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80068e2:	2909      	cmp	r1, #9
 80068e4:	f240 8082 	bls.w	80069ec <_strtod_l+0x2b4>
 80068e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80068ec:	2600      	movs	r6, #0
 80068ee:	e09d      	b.n	8006a2c <_strtod_l+0x2f4>
 80068f0:	2300      	movs	r3, #0
 80068f2:	e7c4      	b.n	800687e <_strtod_l+0x146>
 80068f4:	2f08      	cmp	r7, #8
 80068f6:	bfd8      	it	le
 80068f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80068fa:	f100 0001 	add.w	r0, r0, #1
 80068fe:	bfda      	itte	le
 8006900:	fb02 3301 	mlale	r3, r2, r1, r3
 8006904:	9309      	strle	r3, [sp, #36]	; 0x24
 8006906:	fb02 3909 	mlagt	r9, r2, r9, r3
 800690a:	3701      	adds	r7, #1
 800690c:	901d      	str	r0, [sp, #116]	; 0x74
 800690e:	e7bf      	b.n	8006890 <_strtod_l+0x158>
 8006910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006912:	195a      	adds	r2, r3, r5
 8006914:	921d      	str	r2, [sp, #116]	; 0x74
 8006916:	5d5b      	ldrb	r3, [r3, r5]
 8006918:	2f00      	cmp	r7, #0
 800691a:	d037      	beq.n	800698c <_strtod_l+0x254>
 800691c:	9007      	str	r0, [sp, #28]
 800691e:	463d      	mov	r5, r7
 8006920:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006924:	2a09      	cmp	r2, #9
 8006926:	d912      	bls.n	800694e <_strtod_l+0x216>
 8006928:	2201      	movs	r2, #1
 800692a:	e7c2      	b.n	80068b2 <_strtod_l+0x17a>
 800692c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	921d      	str	r2, [sp, #116]	; 0x74
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	3001      	adds	r0, #1
 8006936:	2b30      	cmp	r3, #48	; 0x30
 8006938:	d0f8      	beq.n	800692c <_strtod_l+0x1f4>
 800693a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800693e:	2a08      	cmp	r2, #8
 8006940:	f200 84db 	bhi.w	80072fa <_strtod_l+0xbc2>
 8006944:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006946:	9007      	str	r0, [sp, #28]
 8006948:	2000      	movs	r0, #0
 800694a:	920a      	str	r2, [sp, #40]	; 0x28
 800694c:	4605      	mov	r5, r0
 800694e:	3b30      	subs	r3, #48	; 0x30
 8006950:	f100 0201 	add.w	r2, r0, #1
 8006954:	d014      	beq.n	8006980 <_strtod_l+0x248>
 8006956:	9907      	ldr	r1, [sp, #28]
 8006958:	4411      	add	r1, r2
 800695a:	9107      	str	r1, [sp, #28]
 800695c:	462a      	mov	r2, r5
 800695e:	eb00 0e05 	add.w	lr, r0, r5
 8006962:	210a      	movs	r1, #10
 8006964:	4572      	cmp	r2, lr
 8006966:	d113      	bne.n	8006990 <_strtod_l+0x258>
 8006968:	182a      	adds	r2, r5, r0
 800696a:	2a08      	cmp	r2, #8
 800696c:	f105 0501 	add.w	r5, r5, #1
 8006970:	4405      	add	r5, r0
 8006972:	dc1c      	bgt.n	80069ae <_strtod_l+0x276>
 8006974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006976:	220a      	movs	r2, #10
 8006978:	fb02 3301 	mla	r3, r2, r1, r3
 800697c:	9309      	str	r3, [sp, #36]	; 0x24
 800697e:	2200      	movs	r2, #0
 8006980:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006982:	1c59      	adds	r1, r3, #1
 8006984:	911d      	str	r1, [sp, #116]	; 0x74
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	4610      	mov	r0, r2
 800698a:	e7c9      	b.n	8006920 <_strtod_l+0x1e8>
 800698c:	4638      	mov	r0, r7
 800698e:	e7d2      	b.n	8006936 <_strtod_l+0x1fe>
 8006990:	2a08      	cmp	r2, #8
 8006992:	dc04      	bgt.n	800699e <_strtod_l+0x266>
 8006994:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006996:	434e      	muls	r6, r1
 8006998:	9609      	str	r6, [sp, #36]	; 0x24
 800699a:	3201      	adds	r2, #1
 800699c:	e7e2      	b.n	8006964 <_strtod_l+0x22c>
 800699e:	f102 0c01 	add.w	ip, r2, #1
 80069a2:	f1bc 0f10 	cmp.w	ip, #16
 80069a6:	bfd8      	it	le
 80069a8:	fb01 f909 	mulle.w	r9, r1, r9
 80069ac:	e7f5      	b.n	800699a <_strtod_l+0x262>
 80069ae:	2d10      	cmp	r5, #16
 80069b0:	bfdc      	itt	le
 80069b2:	220a      	movle	r2, #10
 80069b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80069b8:	e7e1      	b.n	800697e <_strtod_l+0x246>
 80069ba:	2300      	movs	r3, #0
 80069bc:	9307      	str	r3, [sp, #28]
 80069be:	2201      	movs	r2, #1
 80069c0:	e77c      	b.n	80068bc <_strtod_l+0x184>
 80069c2:	f04f 0c00 	mov.w	ip, #0
 80069c6:	f108 0302 	add.w	r3, r8, #2
 80069ca:	931d      	str	r3, [sp, #116]	; 0x74
 80069cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80069d0:	e785      	b.n	80068de <_strtod_l+0x1a6>
 80069d2:	f04f 0c01 	mov.w	ip, #1
 80069d6:	e7f6      	b.n	80069c6 <_strtod_l+0x28e>
 80069d8:	0800b0e4 	.word	0x0800b0e4
 80069dc:	0800ae2c 	.word	0x0800ae2c
 80069e0:	7ff00000 	.word	0x7ff00000
 80069e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069e6:	1c59      	adds	r1, r3, #1
 80069e8:	911d      	str	r1, [sp, #116]	; 0x74
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b30      	cmp	r3, #48	; 0x30
 80069ee:	d0f9      	beq.n	80069e4 <_strtod_l+0x2ac>
 80069f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80069f4:	2908      	cmp	r1, #8
 80069f6:	f63f af79 	bhi.w	80068ec <_strtod_l+0x1b4>
 80069fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80069fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a00:	9308      	str	r3, [sp, #32]
 8006a02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a04:	1c59      	adds	r1, r3, #1
 8006a06:	911d      	str	r1, [sp, #116]	; 0x74
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006a0e:	2e09      	cmp	r6, #9
 8006a10:	d937      	bls.n	8006a82 <_strtod_l+0x34a>
 8006a12:	9e08      	ldr	r6, [sp, #32]
 8006a14:	1b89      	subs	r1, r1, r6
 8006a16:	2908      	cmp	r1, #8
 8006a18:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006a1c:	dc02      	bgt.n	8006a24 <_strtod_l+0x2ec>
 8006a1e:	4576      	cmp	r6, lr
 8006a20:	bfa8      	it	ge
 8006a22:	4676      	movge	r6, lr
 8006a24:	f1bc 0f00 	cmp.w	ip, #0
 8006a28:	d000      	beq.n	8006a2c <_strtod_l+0x2f4>
 8006a2a:	4276      	negs	r6, r6
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	d14f      	bne.n	8006ad0 <_strtod_l+0x398>
 8006a30:	9904      	ldr	r1, [sp, #16]
 8006a32:	4301      	orrs	r1, r0
 8006a34:	f47f aec2 	bne.w	80067bc <_strtod_l+0x84>
 8006a38:	2a00      	cmp	r2, #0
 8006a3a:	f47f aedb 	bne.w	80067f4 <_strtod_l+0xbc>
 8006a3e:	2b69      	cmp	r3, #105	; 0x69
 8006a40:	d027      	beq.n	8006a92 <_strtod_l+0x35a>
 8006a42:	dc24      	bgt.n	8006a8e <_strtod_l+0x356>
 8006a44:	2b49      	cmp	r3, #73	; 0x49
 8006a46:	d024      	beq.n	8006a92 <_strtod_l+0x35a>
 8006a48:	2b4e      	cmp	r3, #78	; 0x4e
 8006a4a:	f47f aed3 	bne.w	80067f4 <_strtod_l+0xbc>
 8006a4e:	499e      	ldr	r1, [pc, #632]	; (8006cc8 <_strtod_l+0x590>)
 8006a50:	a81d      	add	r0, sp, #116	; 0x74
 8006a52:	f002 f8b7 	bl	8008bc4 <__match>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f43f aecc 	beq.w	80067f4 <_strtod_l+0xbc>
 8006a5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b28      	cmp	r3, #40	; 0x28
 8006a62:	d12d      	bne.n	8006ac0 <_strtod_l+0x388>
 8006a64:	4999      	ldr	r1, [pc, #612]	; (8006ccc <_strtod_l+0x594>)
 8006a66:	aa20      	add	r2, sp, #128	; 0x80
 8006a68:	a81d      	add	r0, sp, #116	; 0x74
 8006a6a:	f002 f8bf 	bl	8008bec <__hexnan>
 8006a6e:	2805      	cmp	r0, #5
 8006a70:	d126      	bne.n	8006ac0 <_strtod_l+0x388>
 8006a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a74:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006a78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a80:	e69c      	b.n	80067bc <_strtod_l+0x84>
 8006a82:	210a      	movs	r1, #10
 8006a84:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006a88:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006a8c:	e7b9      	b.n	8006a02 <_strtod_l+0x2ca>
 8006a8e:	2b6e      	cmp	r3, #110	; 0x6e
 8006a90:	e7db      	b.n	8006a4a <_strtod_l+0x312>
 8006a92:	498f      	ldr	r1, [pc, #572]	; (8006cd0 <_strtod_l+0x598>)
 8006a94:	a81d      	add	r0, sp, #116	; 0x74
 8006a96:	f002 f895 	bl	8008bc4 <__match>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	f43f aeaa 	beq.w	80067f4 <_strtod_l+0xbc>
 8006aa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006aa2:	498c      	ldr	r1, [pc, #560]	; (8006cd4 <_strtod_l+0x59c>)
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	a81d      	add	r0, sp, #116	; 0x74
 8006aa8:	931d      	str	r3, [sp, #116]	; 0x74
 8006aaa:	f002 f88b 	bl	8008bc4 <__match>
 8006aae:	b910      	cbnz	r0, 8006ab6 <_strtod_l+0x37e>
 8006ab0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	931d      	str	r3, [sp, #116]	; 0x74
 8006ab6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006ce4 <_strtod_l+0x5ac>
 8006aba:	f04f 0a00 	mov.w	sl, #0
 8006abe:	e67d      	b.n	80067bc <_strtod_l+0x84>
 8006ac0:	4885      	ldr	r0, [pc, #532]	; (8006cd8 <_strtod_l+0x5a0>)
 8006ac2:	f003 f949 	bl	8009d58 <nan>
 8006ac6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006aca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006ace:	e675      	b.n	80067bc <_strtod_l+0x84>
 8006ad0:	9b07      	ldr	r3, [sp, #28]
 8006ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad4:	1af3      	subs	r3, r6, r3
 8006ad6:	2f00      	cmp	r7, #0
 8006ad8:	bf08      	it	eq
 8006ada:	462f      	moveq	r7, r5
 8006adc:	2d10      	cmp	r5, #16
 8006ade:	9308      	str	r3, [sp, #32]
 8006ae0:	46a8      	mov	r8, r5
 8006ae2:	bfa8      	it	ge
 8006ae4:	f04f 0810 	movge.w	r8, #16
 8006ae8:	f7f9 fd14 	bl	8000514 <__aeabi_ui2d>
 8006aec:	2d09      	cmp	r5, #9
 8006aee:	4682      	mov	sl, r0
 8006af0:	468b      	mov	fp, r1
 8006af2:	dd13      	ble.n	8006b1c <_strtod_l+0x3e4>
 8006af4:	4b79      	ldr	r3, [pc, #484]	; (8006cdc <_strtod_l+0x5a4>)
 8006af6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006afa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006afe:	f7f9 fd83 	bl	8000608 <__aeabi_dmul>
 8006b02:	4682      	mov	sl, r0
 8006b04:	4648      	mov	r0, r9
 8006b06:	468b      	mov	fp, r1
 8006b08:	f7f9 fd04 	bl	8000514 <__aeabi_ui2d>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4650      	mov	r0, sl
 8006b12:	4659      	mov	r1, fp
 8006b14:	f7f9 fbc2 	bl	800029c <__adddf3>
 8006b18:	4682      	mov	sl, r0
 8006b1a:	468b      	mov	fp, r1
 8006b1c:	2d0f      	cmp	r5, #15
 8006b1e:	dc38      	bgt.n	8006b92 <_strtod_l+0x45a>
 8006b20:	9b08      	ldr	r3, [sp, #32]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f43f ae4a 	beq.w	80067bc <_strtod_l+0x84>
 8006b28:	dd24      	ble.n	8006b74 <_strtod_l+0x43c>
 8006b2a:	2b16      	cmp	r3, #22
 8006b2c:	dc0b      	bgt.n	8006b46 <_strtod_l+0x40e>
 8006b2e:	4d6b      	ldr	r5, [pc, #428]	; (8006cdc <_strtod_l+0x5a4>)
 8006b30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006b34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006b38:	4652      	mov	r2, sl
 8006b3a:	465b      	mov	r3, fp
 8006b3c:	f7f9 fd64 	bl	8000608 <__aeabi_dmul>
 8006b40:	4682      	mov	sl, r0
 8006b42:	468b      	mov	fp, r1
 8006b44:	e63a      	b.n	80067bc <_strtod_l+0x84>
 8006b46:	9a08      	ldr	r2, [sp, #32]
 8006b48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	db20      	blt.n	8006b92 <_strtod_l+0x45a>
 8006b50:	4c62      	ldr	r4, [pc, #392]	; (8006cdc <_strtod_l+0x5a4>)
 8006b52:	f1c5 050f 	rsb	r5, r5, #15
 8006b56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b5a:	4652      	mov	r2, sl
 8006b5c:	465b      	mov	r3, fp
 8006b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b62:	f7f9 fd51 	bl	8000608 <__aeabi_dmul>
 8006b66:	9b08      	ldr	r3, [sp, #32]
 8006b68:	1b5d      	subs	r5, r3, r5
 8006b6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b72:	e7e3      	b.n	8006b3c <_strtod_l+0x404>
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	3316      	adds	r3, #22
 8006b78:	db0b      	blt.n	8006b92 <_strtod_l+0x45a>
 8006b7a:	9b07      	ldr	r3, [sp, #28]
 8006b7c:	4a57      	ldr	r2, [pc, #348]	; (8006cdc <_strtod_l+0x5a4>)
 8006b7e:	1b9e      	subs	r6, r3, r6
 8006b80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006b84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b88:	4650      	mov	r0, sl
 8006b8a:	4659      	mov	r1, fp
 8006b8c:	f7f9 fe66 	bl	800085c <__aeabi_ddiv>
 8006b90:	e7d6      	b.n	8006b40 <_strtod_l+0x408>
 8006b92:	9b08      	ldr	r3, [sp, #32]
 8006b94:	eba5 0808 	sub.w	r8, r5, r8
 8006b98:	4498      	add	r8, r3
 8006b9a:	f1b8 0f00 	cmp.w	r8, #0
 8006b9e:	dd71      	ble.n	8006c84 <_strtod_l+0x54c>
 8006ba0:	f018 030f 	ands.w	r3, r8, #15
 8006ba4:	d00a      	beq.n	8006bbc <_strtod_l+0x484>
 8006ba6:	494d      	ldr	r1, [pc, #308]	; (8006cdc <_strtod_l+0x5a4>)
 8006ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bac:	4652      	mov	r2, sl
 8006bae:	465b      	mov	r3, fp
 8006bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb4:	f7f9 fd28 	bl	8000608 <__aeabi_dmul>
 8006bb8:	4682      	mov	sl, r0
 8006bba:	468b      	mov	fp, r1
 8006bbc:	f038 080f 	bics.w	r8, r8, #15
 8006bc0:	d04d      	beq.n	8006c5e <_strtod_l+0x526>
 8006bc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006bc6:	dd22      	ble.n	8006c0e <_strtod_l+0x4d6>
 8006bc8:	2500      	movs	r5, #0
 8006bca:	462e      	mov	r6, r5
 8006bcc:	9509      	str	r5, [sp, #36]	; 0x24
 8006bce:	9507      	str	r5, [sp, #28]
 8006bd0:	2322      	movs	r3, #34	; 0x22
 8006bd2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006ce4 <_strtod_l+0x5ac>
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	f04f 0a00 	mov.w	sl, #0
 8006bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f43f adec 	beq.w	80067bc <_strtod_l+0x84>
 8006be4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006be6:	4620      	mov	r0, r4
 8006be8:	f002 f974 	bl	8008ed4 <_Bfree>
 8006bec:	9907      	ldr	r1, [sp, #28]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f002 f970 	bl	8008ed4 <_Bfree>
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f002 f96c 	bl	8008ed4 <_Bfree>
 8006bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f002 f968 	bl	8008ed4 <_Bfree>
 8006c04:	4629      	mov	r1, r5
 8006c06:	4620      	mov	r0, r4
 8006c08:	f002 f964 	bl	8008ed4 <_Bfree>
 8006c0c:	e5d6      	b.n	80067bc <_strtod_l+0x84>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006c14:	4650      	mov	r0, sl
 8006c16:	4659      	mov	r1, fp
 8006c18:	4699      	mov	r9, r3
 8006c1a:	f1b8 0f01 	cmp.w	r8, #1
 8006c1e:	dc21      	bgt.n	8006c64 <_strtod_l+0x52c>
 8006c20:	b10b      	cbz	r3, 8006c26 <_strtod_l+0x4ee>
 8006c22:	4682      	mov	sl, r0
 8006c24:	468b      	mov	fp, r1
 8006c26:	4b2e      	ldr	r3, [pc, #184]	; (8006ce0 <_strtod_l+0x5a8>)
 8006c28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006c2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006c30:	4652      	mov	r2, sl
 8006c32:	465b      	mov	r3, fp
 8006c34:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006c38:	f7f9 fce6 	bl	8000608 <__aeabi_dmul>
 8006c3c:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <_strtod_l+0x5ac>)
 8006c3e:	460a      	mov	r2, r1
 8006c40:	400b      	ands	r3, r1
 8006c42:	4929      	ldr	r1, [pc, #164]	; (8006ce8 <_strtod_l+0x5b0>)
 8006c44:	428b      	cmp	r3, r1
 8006c46:	4682      	mov	sl, r0
 8006c48:	d8be      	bhi.n	8006bc8 <_strtod_l+0x490>
 8006c4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006c4e:	428b      	cmp	r3, r1
 8006c50:	bf86      	itte	hi
 8006c52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006cec <_strtod_l+0x5b4>
 8006c56:	f04f 3aff 	movhi.w	sl, #4294967295
 8006c5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	e081      	b.n	8006d68 <_strtod_l+0x630>
 8006c64:	f018 0f01 	tst.w	r8, #1
 8006c68:	d007      	beq.n	8006c7a <_strtod_l+0x542>
 8006c6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <_strtod_l+0x5a8>)
 8006c6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f7f9 fcc8 	bl	8000608 <__aeabi_dmul>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f109 0901 	add.w	r9, r9, #1
 8006c7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c82:	e7ca      	b.n	8006c1a <_strtod_l+0x4e2>
 8006c84:	d0eb      	beq.n	8006c5e <_strtod_l+0x526>
 8006c86:	f1c8 0800 	rsb	r8, r8, #0
 8006c8a:	f018 020f 	ands.w	r2, r8, #15
 8006c8e:	d00a      	beq.n	8006ca6 <_strtod_l+0x56e>
 8006c90:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <_strtod_l+0x5a4>)
 8006c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c96:	4650      	mov	r0, sl
 8006c98:	4659      	mov	r1, fp
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 fddd 	bl	800085c <__aeabi_ddiv>
 8006ca2:	4682      	mov	sl, r0
 8006ca4:	468b      	mov	fp, r1
 8006ca6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006caa:	d0d8      	beq.n	8006c5e <_strtod_l+0x526>
 8006cac:	f1b8 0f1f 	cmp.w	r8, #31
 8006cb0:	dd1e      	ble.n	8006cf0 <_strtod_l+0x5b8>
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	462e      	mov	r6, r5
 8006cb6:	9509      	str	r5, [sp, #36]	; 0x24
 8006cb8:	9507      	str	r5, [sp, #28]
 8006cba:	2322      	movs	r3, #34	; 0x22
 8006cbc:	f04f 0a00 	mov.w	sl, #0
 8006cc0:	f04f 0b00 	mov.w	fp, #0
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	e789      	b.n	8006bdc <_strtod_l+0x4a4>
 8006cc8:	0800adfd 	.word	0x0800adfd
 8006ccc:	0800ae40 	.word	0x0800ae40
 8006cd0:	0800adf5 	.word	0x0800adf5
 8006cd4:	0800af84 	.word	0x0800af84
 8006cd8:	0800b2a0 	.word	0x0800b2a0
 8006cdc:	0800b180 	.word	0x0800b180
 8006ce0:	0800b158 	.word	0x0800b158
 8006ce4:	7ff00000 	.word	0x7ff00000
 8006ce8:	7ca00000 	.word	0x7ca00000
 8006cec:	7fefffff 	.word	0x7fefffff
 8006cf0:	f018 0310 	ands.w	r3, r8, #16
 8006cf4:	bf18      	it	ne
 8006cf6:	236a      	movne	r3, #106	; 0x6a
 8006cf8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80070b0 <_strtod_l+0x978>
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	4650      	mov	r0, sl
 8006d00:	4659      	mov	r1, fp
 8006d02:	2300      	movs	r3, #0
 8006d04:	f018 0f01 	tst.w	r8, #1
 8006d08:	d004      	beq.n	8006d14 <_strtod_l+0x5dc>
 8006d0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d0e:	f7f9 fc7b 	bl	8000608 <__aeabi_dmul>
 8006d12:	2301      	movs	r3, #1
 8006d14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006d18:	f109 0908 	add.w	r9, r9, #8
 8006d1c:	d1f2      	bne.n	8006d04 <_strtod_l+0x5cc>
 8006d1e:	b10b      	cbz	r3, 8006d24 <_strtod_l+0x5ec>
 8006d20:	4682      	mov	sl, r0
 8006d22:	468b      	mov	fp, r1
 8006d24:	9b04      	ldr	r3, [sp, #16]
 8006d26:	b1bb      	cbz	r3, 8006d58 <_strtod_l+0x620>
 8006d28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006d2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	4659      	mov	r1, fp
 8006d34:	dd10      	ble.n	8006d58 <_strtod_l+0x620>
 8006d36:	2b1f      	cmp	r3, #31
 8006d38:	f340 8128 	ble.w	8006f8c <_strtod_l+0x854>
 8006d3c:	2b34      	cmp	r3, #52	; 0x34
 8006d3e:	bfde      	ittt	le
 8006d40:	3b20      	suble	r3, #32
 8006d42:	f04f 32ff 	movle.w	r2, #4294967295
 8006d46:	fa02 f303 	lslle.w	r3, r2, r3
 8006d4a:	f04f 0a00 	mov.w	sl, #0
 8006d4e:	bfcc      	ite	gt
 8006d50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006d54:	ea03 0b01 	andle.w	fp, r3, r1
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4650      	mov	r0, sl
 8006d5e:	4659      	mov	r1, fp
 8006d60:	f7f9 feba 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d1a4      	bne.n	8006cb2 <_strtod_l+0x57a>
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d6e:	462b      	mov	r3, r5
 8006d70:	463a      	mov	r2, r7
 8006d72:	4620      	mov	r0, r4
 8006d74:	f002 f91a 	bl	8008fac <__s2b>
 8006d78:	9009      	str	r0, [sp, #36]	; 0x24
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f43f af24 	beq.w	8006bc8 <_strtod_l+0x490>
 8006d80:	9b07      	ldr	r3, [sp, #28]
 8006d82:	1b9e      	subs	r6, r3, r6
 8006d84:	9b08      	ldr	r3, [sp, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bfb4      	ite	lt
 8006d8a:	4633      	movlt	r3, r6
 8006d8c:	2300      	movge	r3, #0
 8006d8e:	9310      	str	r3, [sp, #64]	; 0x40
 8006d90:	9b08      	ldr	r3, [sp, #32]
 8006d92:	2500      	movs	r5, #0
 8006d94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006d98:	9318      	str	r3, [sp, #96]	; 0x60
 8006d9a:	462e      	mov	r6, r5
 8006d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9e:	4620      	mov	r0, r4
 8006da0:	6859      	ldr	r1, [r3, #4]
 8006da2:	f002 f857 	bl	8008e54 <_Balloc>
 8006da6:	9007      	str	r0, [sp, #28]
 8006da8:	2800      	cmp	r0, #0
 8006daa:	f43f af11 	beq.w	8006bd0 <_strtod_l+0x498>
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	3202      	adds	r2, #2
 8006db4:	f103 010c 	add.w	r1, r3, #12
 8006db8:	0092      	lsls	r2, r2, #2
 8006dba:	300c      	adds	r0, #12
 8006dbc:	f002 f830 	bl	8008e20 <memcpy>
 8006dc0:	ec4b ab10 	vmov	d0, sl, fp
 8006dc4:	aa20      	add	r2, sp, #128	; 0x80
 8006dc6:	a91f      	add	r1, sp, #124	; 0x7c
 8006dc8:	4620      	mov	r0, r4
 8006dca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006dce:	f002 fc29 	bl	8009624 <__d2b>
 8006dd2:	901e      	str	r0, [sp, #120]	; 0x78
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f43f aefb 	beq.w	8006bd0 <_strtod_l+0x498>
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f002 f97f 	bl	80090e0 <__i2b>
 8006de2:	4606      	mov	r6, r0
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f43f aef3 	beq.w	8006bd0 <_strtod_l+0x498>
 8006dea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006dec:	9904      	ldr	r1, [sp, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfab      	itete	ge
 8006df2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006df4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006df6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006df8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006dfc:	bfac      	ite	ge
 8006dfe:	eb03 0902 	addge.w	r9, r3, r2
 8006e02:	1ad7      	sublt	r7, r2, r3
 8006e04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e06:	eba3 0801 	sub.w	r8, r3, r1
 8006e0a:	4490      	add	r8, r2
 8006e0c:	4ba3      	ldr	r3, [pc, #652]	; (800709c <_strtod_l+0x964>)
 8006e0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e12:	4598      	cmp	r8, r3
 8006e14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e18:	f280 80cc 	bge.w	8006fb4 <_strtod_l+0x87c>
 8006e1c:	eba3 0308 	sub.w	r3, r3, r8
 8006e20:	2b1f      	cmp	r3, #31
 8006e22:	eba2 0203 	sub.w	r2, r2, r3
 8006e26:	f04f 0101 	mov.w	r1, #1
 8006e2a:	f300 80b6 	bgt.w	8006f9a <_strtod_l+0x862>
 8006e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e32:	9311      	str	r3, [sp, #68]	; 0x44
 8006e34:	2300      	movs	r3, #0
 8006e36:	930c      	str	r3, [sp, #48]	; 0x30
 8006e38:	eb09 0802 	add.w	r8, r9, r2
 8006e3c:	9b04      	ldr	r3, [sp, #16]
 8006e3e:	45c1      	cmp	r9, r8
 8006e40:	4417      	add	r7, r2
 8006e42:	441f      	add	r7, r3
 8006e44:	464b      	mov	r3, r9
 8006e46:	bfa8      	it	ge
 8006e48:	4643      	movge	r3, r8
 8006e4a:	42bb      	cmp	r3, r7
 8006e4c:	bfa8      	it	ge
 8006e4e:	463b      	movge	r3, r7
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bfc2      	ittt	gt
 8006e54:	eba8 0803 	subgt.w	r8, r8, r3
 8006e58:	1aff      	subgt	r7, r7, r3
 8006e5a:	eba9 0903 	subgt.w	r9, r9, r3
 8006e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dd17      	ble.n	8006e94 <_strtod_l+0x75c>
 8006e64:	4631      	mov	r1, r6
 8006e66:	461a      	mov	r2, r3
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f002 f9f5 	bl	8009258 <__pow5mult>
 8006e6e:	4606      	mov	r6, r0
 8006e70:	2800      	cmp	r0, #0
 8006e72:	f43f aead 	beq.w	8006bd0 <_strtod_l+0x498>
 8006e76:	4601      	mov	r1, r0
 8006e78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f002 f946 	bl	800910c <__multiply>
 8006e80:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f43f aea4 	beq.w	8006bd0 <_strtod_l+0x498>
 8006e88:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f002 f822 	bl	8008ed4 <_Bfree>
 8006e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e92:	931e      	str	r3, [sp, #120]	; 0x78
 8006e94:	f1b8 0f00 	cmp.w	r8, #0
 8006e98:	f300 8091 	bgt.w	8006fbe <_strtod_l+0x886>
 8006e9c:	9b08      	ldr	r3, [sp, #32]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dd08      	ble.n	8006eb4 <_strtod_l+0x77c>
 8006ea2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ea4:	9907      	ldr	r1, [sp, #28]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f002 f9d6 	bl	8009258 <__pow5mult>
 8006eac:	9007      	str	r0, [sp, #28]
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f ae8e 	beq.w	8006bd0 <_strtod_l+0x498>
 8006eb4:	2f00      	cmp	r7, #0
 8006eb6:	dd08      	ble.n	8006eca <_strtod_l+0x792>
 8006eb8:	9907      	ldr	r1, [sp, #28]
 8006eba:	463a      	mov	r2, r7
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f002 fa25 	bl	800930c <__lshift>
 8006ec2:	9007      	str	r0, [sp, #28]
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	f43f ae83 	beq.w	8006bd0 <_strtod_l+0x498>
 8006eca:	f1b9 0f00 	cmp.w	r9, #0
 8006ece:	dd08      	ble.n	8006ee2 <_strtod_l+0x7aa>
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	464a      	mov	r2, r9
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f002 fa19 	bl	800930c <__lshift>
 8006eda:	4606      	mov	r6, r0
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f43f ae77 	beq.w	8006bd0 <_strtod_l+0x498>
 8006ee2:	9a07      	ldr	r2, [sp, #28]
 8006ee4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f002 fa98 	bl	800941c <__mdiff>
 8006eec:	4605      	mov	r5, r0
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f43f ae6e 	beq.w	8006bd0 <_strtod_l+0x498>
 8006ef4:	68c3      	ldr	r3, [r0, #12]
 8006ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60c3      	str	r3, [r0, #12]
 8006efc:	4631      	mov	r1, r6
 8006efe:	f002 fa71 	bl	80093e4 <__mcmp>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	da65      	bge.n	8006fd2 <_strtod_l+0x89a>
 8006f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f08:	ea53 030a 	orrs.w	r3, r3, sl
 8006f0c:	f040 8087 	bne.w	800701e <_strtod_l+0x8e6>
 8006f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f040 8082 	bne.w	800701e <_strtod_l+0x8e6>
 8006f1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f1e:	0d1b      	lsrs	r3, r3, #20
 8006f20:	051b      	lsls	r3, r3, #20
 8006f22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f26:	d97a      	bls.n	800701e <_strtod_l+0x8e6>
 8006f28:	696b      	ldr	r3, [r5, #20]
 8006f2a:	b913      	cbnz	r3, 8006f32 <_strtod_l+0x7fa>
 8006f2c:	692b      	ldr	r3, [r5, #16]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	dd75      	ble.n	800701e <_strtod_l+0x8e6>
 8006f32:	4629      	mov	r1, r5
 8006f34:	2201      	movs	r2, #1
 8006f36:	4620      	mov	r0, r4
 8006f38:	f002 f9e8 	bl	800930c <__lshift>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4605      	mov	r5, r0
 8006f40:	f002 fa50 	bl	80093e4 <__mcmp>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	dd6a      	ble.n	800701e <_strtod_l+0x8e6>
 8006f48:	9904      	ldr	r1, [sp, #16]
 8006f4a:	4a55      	ldr	r2, [pc, #340]	; (80070a0 <_strtod_l+0x968>)
 8006f4c:	465b      	mov	r3, fp
 8006f4e:	2900      	cmp	r1, #0
 8006f50:	f000 8085 	beq.w	800705e <_strtod_l+0x926>
 8006f54:	ea02 010b 	and.w	r1, r2, fp
 8006f58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f5c:	dc7f      	bgt.n	800705e <_strtod_l+0x926>
 8006f5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f62:	f77f aeaa 	ble.w	8006cba <_strtod_l+0x582>
 8006f66:	4a4f      	ldr	r2, [pc, #316]	; (80070a4 <_strtod_l+0x96c>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006f6e:	4650      	mov	r0, sl
 8006f70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006f74:	4659      	mov	r1, fp
 8006f76:	f7f9 fb47 	bl	8000608 <__aeabi_dmul>
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4303      	orrs	r3, r0
 8006f7e:	bf08      	it	eq
 8006f80:	2322      	moveq	r3, #34	; 0x22
 8006f82:	4682      	mov	sl, r0
 8006f84:	468b      	mov	fp, r1
 8006f86:	bf08      	it	eq
 8006f88:	6023      	streq	r3, [r4, #0]
 8006f8a:	e62b      	b.n	8006be4 <_strtod_l+0x4ac>
 8006f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	ea03 0a0a 	and.w	sl, r3, sl
 8006f98:	e6de      	b.n	8006d58 <_strtod_l+0x620>
 8006f9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006f9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006fa2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006fa6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006faa:	fa01 f308 	lsl.w	r3, r1, r8
 8006fae:	930c      	str	r3, [sp, #48]	; 0x30
 8006fb0:	9111      	str	r1, [sp, #68]	; 0x44
 8006fb2:	e741      	b.n	8006e38 <_strtod_l+0x700>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8006fb8:	2301      	movs	r3, #1
 8006fba:	9311      	str	r3, [sp, #68]	; 0x44
 8006fbc:	e73c      	b.n	8006e38 <_strtod_l+0x700>
 8006fbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f002 f9a2 	bl	800930c <__lshift>
 8006fc8:	901e      	str	r0, [sp, #120]	; 0x78
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f47f af66 	bne.w	8006e9c <_strtod_l+0x764>
 8006fd0:	e5fe      	b.n	8006bd0 <_strtod_l+0x498>
 8006fd2:	465f      	mov	r7, fp
 8006fd4:	d16e      	bne.n	80070b4 <_strtod_l+0x97c>
 8006fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fdc:	b342      	cbz	r2, 8007030 <_strtod_l+0x8f8>
 8006fde:	4a32      	ldr	r2, [pc, #200]	; (80070a8 <_strtod_l+0x970>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d128      	bne.n	8007036 <_strtod_l+0x8fe>
 8006fe4:	9b04      	ldr	r3, [sp, #16]
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	b1eb      	cbz	r3, 8007026 <_strtod_l+0x8ee>
 8006fea:	4a2d      	ldr	r2, [pc, #180]	; (80070a0 <_strtod_l+0x968>)
 8006fec:	403a      	ands	r2, r7
 8006fee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ff6:	d819      	bhi.n	800702c <_strtod_l+0x8f4>
 8006ff8:	0d12      	lsrs	r2, r2, #20
 8006ffa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8007002:	4298      	cmp	r0, r3
 8007004:	d117      	bne.n	8007036 <_strtod_l+0x8fe>
 8007006:	4b29      	ldr	r3, [pc, #164]	; (80070ac <_strtod_l+0x974>)
 8007008:	429f      	cmp	r7, r3
 800700a:	d102      	bne.n	8007012 <_strtod_l+0x8da>
 800700c:	3001      	adds	r0, #1
 800700e:	f43f addf 	beq.w	8006bd0 <_strtod_l+0x498>
 8007012:	4b23      	ldr	r3, [pc, #140]	; (80070a0 <_strtod_l+0x968>)
 8007014:	403b      	ands	r3, r7
 8007016:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800701a:	f04f 0a00 	mov.w	sl, #0
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1a0      	bne.n	8006f66 <_strtod_l+0x82e>
 8007024:	e5de      	b.n	8006be4 <_strtod_l+0x4ac>
 8007026:	f04f 33ff 	mov.w	r3, #4294967295
 800702a:	e7ea      	b.n	8007002 <_strtod_l+0x8ca>
 800702c:	460b      	mov	r3, r1
 800702e:	e7e8      	b.n	8007002 <_strtod_l+0x8ca>
 8007030:	ea53 030a 	orrs.w	r3, r3, sl
 8007034:	d088      	beq.n	8006f48 <_strtod_l+0x810>
 8007036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007038:	b1db      	cbz	r3, 8007072 <_strtod_l+0x93a>
 800703a:	423b      	tst	r3, r7
 800703c:	d0ef      	beq.n	800701e <_strtod_l+0x8e6>
 800703e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007040:	9a04      	ldr	r2, [sp, #16]
 8007042:	4650      	mov	r0, sl
 8007044:	4659      	mov	r1, fp
 8007046:	b1c3      	cbz	r3, 800707a <_strtod_l+0x942>
 8007048:	f7ff fb59 	bl	80066fe <sulp>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007054:	f7f9 f922 	bl	800029c <__adddf3>
 8007058:	4682      	mov	sl, r0
 800705a:	468b      	mov	fp, r1
 800705c:	e7df      	b.n	800701e <_strtod_l+0x8e6>
 800705e:	4013      	ands	r3, r2
 8007060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007064:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007068:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800706c:	f04f 3aff 	mov.w	sl, #4294967295
 8007070:	e7d5      	b.n	800701e <_strtod_l+0x8e6>
 8007072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007074:	ea13 0f0a 	tst.w	r3, sl
 8007078:	e7e0      	b.n	800703c <_strtod_l+0x904>
 800707a:	f7ff fb40 	bl	80066fe <sulp>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007086:	f7f9 f907 	bl	8000298 <__aeabi_dsub>
 800708a:	2200      	movs	r2, #0
 800708c:	2300      	movs	r3, #0
 800708e:	4682      	mov	sl, r0
 8007090:	468b      	mov	fp, r1
 8007092:	f7f9 fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 8007096:	2800      	cmp	r0, #0
 8007098:	d0c1      	beq.n	800701e <_strtod_l+0x8e6>
 800709a:	e60e      	b.n	8006cba <_strtod_l+0x582>
 800709c:	fffffc02 	.word	0xfffffc02
 80070a0:	7ff00000 	.word	0x7ff00000
 80070a4:	39500000 	.word	0x39500000
 80070a8:	000fffff 	.word	0x000fffff
 80070ac:	7fefffff 	.word	0x7fefffff
 80070b0:	0800ae58 	.word	0x0800ae58
 80070b4:	4631      	mov	r1, r6
 80070b6:	4628      	mov	r0, r5
 80070b8:	f002 fb10 	bl	80096dc <__ratio>
 80070bc:	ec59 8b10 	vmov	r8, r9, d0
 80070c0:	ee10 0a10 	vmov	r0, s0
 80070c4:	2200      	movs	r2, #0
 80070c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070ca:	4649      	mov	r1, r9
 80070cc:	f7f9 fd18 	bl	8000b00 <__aeabi_dcmple>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d07c      	beq.n	80071ce <_strtod_l+0xa96>
 80070d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04c      	beq.n	8007174 <_strtod_l+0xa3c>
 80070da:	4b95      	ldr	r3, [pc, #596]	; (8007330 <_strtod_l+0xbf8>)
 80070dc:	2200      	movs	r2, #0
 80070de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80070e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007330 <_strtod_l+0xbf8>
 80070e6:	f04f 0800 	mov.w	r8, #0
 80070ea:	4b92      	ldr	r3, [pc, #584]	; (8007334 <_strtod_l+0xbfc>)
 80070ec:	403b      	ands	r3, r7
 80070ee:	9311      	str	r3, [sp, #68]	; 0x44
 80070f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80070f2:	4b91      	ldr	r3, [pc, #580]	; (8007338 <_strtod_l+0xc00>)
 80070f4:	429a      	cmp	r2, r3
 80070f6:	f040 80b2 	bne.w	800725e <_strtod_l+0xb26>
 80070fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007102:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007106:	ec4b ab10 	vmov	d0, sl, fp
 800710a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800710e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007112:	f002 fa0b 	bl	800952c <__ulp>
 8007116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800711a:	ec53 2b10 	vmov	r2, r3, d0
 800711e:	f7f9 fa73 	bl	8000608 <__aeabi_dmul>
 8007122:	4652      	mov	r2, sl
 8007124:	465b      	mov	r3, fp
 8007126:	f7f9 f8b9 	bl	800029c <__adddf3>
 800712a:	460b      	mov	r3, r1
 800712c:	4981      	ldr	r1, [pc, #516]	; (8007334 <_strtod_l+0xbfc>)
 800712e:	4a83      	ldr	r2, [pc, #524]	; (800733c <_strtod_l+0xc04>)
 8007130:	4019      	ands	r1, r3
 8007132:	4291      	cmp	r1, r2
 8007134:	4682      	mov	sl, r0
 8007136:	d95e      	bls.n	80071f6 <_strtod_l+0xabe>
 8007138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800713a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800713e:	4293      	cmp	r3, r2
 8007140:	d103      	bne.n	800714a <_strtod_l+0xa12>
 8007142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007144:	3301      	adds	r3, #1
 8007146:	f43f ad43 	beq.w	8006bd0 <_strtod_l+0x498>
 800714a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007348 <_strtod_l+0xc10>
 800714e:	f04f 3aff 	mov.w	sl, #4294967295
 8007152:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007154:	4620      	mov	r0, r4
 8007156:	f001 febd 	bl	8008ed4 <_Bfree>
 800715a:	9907      	ldr	r1, [sp, #28]
 800715c:	4620      	mov	r0, r4
 800715e:	f001 feb9 	bl	8008ed4 <_Bfree>
 8007162:	4631      	mov	r1, r6
 8007164:	4620      	mov	r0, r4
 8007166:	f001 feb5 	bl	8008ed4 <_Bfree>
 800716a:	4629      	mov	r1, r5
 800716c:	4620      	mov	r0, r4
 800716e:	f001 feb1 	bl	8008ed4 <_Bfree>
 8007172:	e613      	b.n	8006d9c <_strtod_l+0x664>
 8007174:	f1ba 0f00 	cmp.w	sl, #0
 8007178:	d11b      	bne.n	80071b2 <_strtod_l+0xa7a>
 800717a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800717e:	b9f3      	cbnz	r3, 80071be <_strtod_l+0xa86>
 8007180:	4b6b      	ldr	r3, [pc, #428]	; (8007330 <_strtod_l+0xbf8>)
 8007182:	2200      	movs	r2, #0
 8007184:	4640      	mov	r0, r8
 8007186:	4649      	mov	r1, r9
 8007188:	f7f9 fcb0 	bl	8000aec <__aeabi_dcmplt>
 800718c:	b9d0      	cbnz	r0, 80071c4 <_strtod_l+0xa8c>
 800718e:	4640      	mov	r0, r8
 8007190:	4649      	mov	r1, r9
 8007192:	4b6b      	ldr	r3, [pc, #428]	; (8007340 <_strtod_l+0xc08>)
 8007194:	2200      	movs	r2, #0
 8007196:	f7f9 fa37 	bl	8000608 <__aeabi_dmul>
 800719a:	4680      	mov	r8, r0
 800719c:	4689      	mov	r9, r1
 800719e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80071a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80071a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80071ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80071b0:	e79b      	b.n	80070ea <_strtod_l+0x9b2>
 80071b2:	f1ba 0f01 	cmp.w	sl, #1
 80071b6:	d102      	bne.n	80071be <_strtod_l+0xa86>
 80071b8:	2f00      	cmp	r7, #0
 80071ba:	f43f ad7e 	beq.w	8006cba <_strtod_l+0x582>
 80071be:	4b61      	ldr	r3, [pc, #388]	; (8007344 <_strtod_l+0xc0c>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	e78c      	b.n	80070de <_strtod_l+0x9a6>
 80071c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007340 <_strtod_l+0xc08>
 80071c8:	f04f 0800 	mov.w	r8, #0
 80071cc:	e7e7      	b.n	800719e <_strtod_l+0xa66>
 80071ce:	4b5c      	ldr	r3, [pc, #368]	; (8007340 <_strtod_l+0xc08>)
 80071d0:	4640      	mov	r0, r8
 80071d2:	4649      	mov	r1, r9
 80071d4:	2200      	movs	r2, #0
 80071d6:	f7f9 fa17 	bl	8000608 <__aeabi_dmul>
 80071da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071dc:	4680      	mov	r8, r0
 80071de:	4689      	mov	r9, r1
 80071e0:	b933      	cbnz	r3, 80071f0 <_strtod_l+0xab8>
 80071e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071e6:	9012      	str	r0, [sp, #72]	; 0x48
 80071e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80071ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80071ee:	e7dd      	b.n	80071ac <_strtod_l+0xa74>
 80071f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80071f4:	e7f9      	b.n	80071ea <_strtod_l+0xab2>
 80071f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80071fa:	9b04      	ldr	r3, [sp, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1a8      	bne.n	8007152 <_strtod_l+0xa1a>
 8007200:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007204:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007206:	0d1b      	lsrs	r3, r3, #20
 8007208:	051b      	lsls	r3, r3, #20
 800720a:	429a      	cmp	r2, r3
 800720c:	d1a1      	bne.n	8007152 <_strtod_l+0xa1a>
 800720e:	4640      	mov	r0, r8
 8007210:	4649      	mov	r1, r9
 8007212:	f7f9 fe67 	bl	8000ee4 <__aeabi_d2lz>
 8007216:	f7f9 f9c9 	bl	80005ac <__aeabi_l2d>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4640      	mov	r0, r8
 8007220:	4649      	mov	r1, r9
 8007222:	f7f9 f839 	bl	8000298 <__aeabi_dsub>
 8007226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800722c:	ea43 030a 	orr.w	r3, r3, sl
 8007230:	4313      	orrs	r3, r2
 8007232:	4680      	mov	r8, r0
 8007234:	4689      	mov	r9, r1
 8007236:	d053      	beq.n	80072e0 <_strtod_l+0xba8>
 8007238:	a335      	add	r3, pc, #212	; (adr r3, 8007310 <_strtod_l+0xbd8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 fc55 	bl	8000aec <__aeabi_dcmplt>
 8007242:	2800      	cmp	r0, #0
 8007244:	f47f acce 	bne.w	8006be4 <_strtod_l+0x4ac>
 8007248:	a333      	add	r3, pc, #204	; (adr r3, 8007318 <_strtod_l+0xbe0>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	4640      	mov	r0, r8
 8007250:	4649      	mov	r1, r9
 8007252:	f7f9 fc69 	bl	8000b28 <__aeabi_dcmpgt>
 8007256:	2800      	cmp	r0, #0
 8007258:	f43f af7b 	beq.w	8007152 <_strtod_l+0xa1a>
 800725c:	e4c2      	b.n	8006be4 <_strtod_l+0x4ac>
 800725e:	9b04      	ldr	r3, [sp, #16]
 8007260:	b333      	cbz	r3, 80072b0 <_strtod_l+0xb78>
 8007262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007264:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007268:	d822      	bhi.n	80072b0 <_strtod_l+0xb78>
 800726a:	a32d      	add	r3, pc, #180	; (adr r3, 8007320 <_strtod_l+0xbe8>)
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	4640      	mov	r0, r8
 8007272:	4649      	mov	r1, r9
 8007274:	f7f9 fc44 	bl	8000b00 <__aeabi_dcmple>
 8007278:	b1a0      	cbz	r0, 80072a4 <_strtod_l+0xb6c>
 800727a:	4649      	mov	r1, r9
 800727c:	4640      	mov	r0, r8
 800727e:	f7f9 fc9b 	bl	8000bb8 <__aeabi_d2uiz>
 8007282:	2801      	cmp	r0, #1
 8007284:	bf38      	it	cc
 8007286:	2001      	movcc	r0, #1
 8007288:	f7f9 f944 	bl	8000514 <__aeabi_ui2d>
 800728c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800728e:	4680      	mov	r8, r0
 8007290:	4689      	mov	r9, r1
 8007292:	bb13      	cbnz	r3, 80072da <_strtod_l+0xba2>
 8007294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007298:	9014      	str	r0, [sp, #80]	; 0x50
 800729a:	9315      	str	r3, [sp, #84]	; 0x54
 800729c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80072a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80072a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80072ac:	1a9b      	subs	r3, r3, r2
 80072ae:	930d      	str	r3, [sp, #52]	; 0x34
 80072b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80072b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80072bc:	f002 f936 	bl	800952c <__ulp>
 80072c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072c4:	ec53 2b10 	vmov	r2, r3, d0
 80072c8:	f7f9 f99e 	bl	8000608 <__aeabi_dmul>
 80072cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072d0:	f7f8 ffe4 	bl	800029c <__adddf3>
 80072d4:	4682      	mov	sl, r0
 80072d6:	468b      	mov	fp, r1
 80072d8:	e78f      	b.n	80071fa <_strtod_l+0xac2>
 80072da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80072de:	e7dd      	b.n	800729c <_strtod_l+0xb64>
 80072e0:	a311      	add	r3, pc, #68	; (adr r3, 8007328 <_strtod_l+0xbf0>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 fc01 	bl	8000aec <__aeabi_dcmplt>
 80072ea:	e7b4      	b.n	8007256 <_strtod_l+0xb1e>
 80072ec:	2300      	movs	r3, #0
 80072ee:	930e      	str	r3, [sp, #56]	; 0x38
 80072f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	f7ff ba65 	b.w	80067c4 <_strtod_l+0x8c>
 80072fa:	2b65      	cmp	r3, #101	; 0x65
 80072fc:	f43f ab5d 	beq.w	80069ba <_strtod_l+0x282>
 8007300:	2b45      	cmp	r3, #69	; 0x45
 8007302:	f43f ab5a 	beq.w	80069ba <_strtod_l+0x282>
 8007306:	2201      	movs	r2, #1
 8007308:	f7ff bb92 	b.w	8006a30 <_strtod_l+0x2f8>
 800730c:	f3af 8000 	nop.w
 8007310:	94a03595 	.word	0x94a03595
 8007314:	3fdfffff 	.word	0x3fdfffff
 8007318:	35afe535 	.word	0x35afe535
 800731c:	3fe00000 	.word	0x3fe00000
 8007320:	ffc00000 	.word	0xffc00000
 8007324:	41dfffff 	.word	0x41dfffff
 8007328:	94a03595 	.word	0x94a03595
 800732c:	3fcfffff 	.word	0x3fcfffff
 8007330:	3ff00000 	.word	0x3ff00000
 8007334:	7ff00000 	.word	0x7ff00000
 8007338:	7fe00000 	.word	0x7fe00000
 800733c:	7c9fffff 	.word	0x7c9fffff
 8007340:	3fe00000 	.word	0x3fe00000
 8007344:	bff00000 	.word	0xbff00000
 8007348:	7fefffff 	.word	0x7fefffff

0800734c <_strtod_r>:
 800734c:	4b01      	ldr	r3, [pc, #4]	; (8007354 <_strtod_r+0x8>)
 800734e:	f7ff b9f3 	b.w	8006738 <_strtod_l>
 8007352:	bf00      	nop
 8007354:	20000074 	.word	0x20000074

08007358 <_strtol_l.isra.0>:
 8007358:	2b01      	cmp	r3, #1
 800735a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735e:	d001      	beq.n	8007364 <_strtol_l.isra.0+0xc>
 8007360:	2b24      	cmp	r3, #36	; 0x24
 8007362:	d906      	bls.n	8007372 <_strtol_l.isra.0+0x1a>
 8007364:	f7fe f956 	bl	8005614 <__errno>
 8007368:	2316      	movs	r3, #22
 800736a:	6003      	str	r3, [r0, #0]
 800736c:	2000      	movs	r0, #0
 800736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007372:	4f3a      	ldr	r7, [pc, #232]	; (800745c <_strtol_l.isra.0+0x104>)
 8007374:	468e      	mov	lr, r1
 8007376:	4676      	mov	r6, lr
 8007378:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800737c:	5de5      	ldrb	r5, [r4, r7]
 800737e:	f015 0508 	ands.w	r5, r5, #8
 8007382:	d1f8      	bne.n	8007376 <_strtol_l.isra.0+0x1e>
 8007384:	2c2d      	cmp	r4, #45	; 0x2d
 8007386:	d134      	bne.n	80073f2 <_strtol_l.isra.0+0x9a>
 8007388:	f89e 4000 	ldrb.w	r4, [lr]
 800738c:	f04f 0801 	mov.w	r8, #1
 8007390:	f106 0e02 	add.w	lr, r6, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d05c      	beq.n	8007452 <_strtol_l.isra.0+0xfa>
 8007398:	2b10      	cmp	r3, #16
 800739a:	d10c      	bne.n	80073b6 <_strtol_l.isra.0+0x5e>
 800739c:	2c30      	cmp	r4, #48	; 0x30
 800739e:	d10a      	bne.n	80073b6 <_strtol_l.isra.0+0x5e>
 80073a0:	f89e 4000 	ldrb.w	r4, [lr]
 80073a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80073a8:	2c58      	cmp	r4, #88	; 0x58
 80073aa:	d14d      	bne.n	8007448 <_strtol_l.isra.0+0xf0>
 80073ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80073b0:	2310      	movs	r3, #16
 80073b2:	f10e 0e02 	add.w	lr, lr, #2
 80073b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80073ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80073be:	2600      	movs	r6, #0
 80073c0:	fbbc f9f3 	udiv	r9, ip, r3
 80073c4:	4635      	mov	r5, r6
 80073c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80073ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80073ce:	2f09      	cmp	r7, #9
 80073d0:	d818      	bhi.n	8007404 <_strtol_l.isra.0+0xac>
 80073d2:	463c      	mov	r4, r7
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	dd24      	ble.n	8007422 <_strtol_l.isra.0+0xca>
 80073d8:	2e00      	cmp	r6, #0
 80073da:	db1f      	blt.n	800741c <_strtol_l.isra.0+0xc4>
 80073dc:	45a9      	cmp	r9, r5
 80073de:	d31d      	bcc.n	800741c <_strtol_l.isra.0+0xc4>
 80073e0:	d101      	bne.n	80073e6 <_strtol_l.isra.0+0x8e>
 80073e2:	45a2      	cmp	sl, r4
 80073e4:	db1a      	blt.n	800741c <_strtol_l.isra.0+0xc4>
 80073e6:	fb05 4503 	mla	r5, r5, r3, r4
 80073ea:	2601      	movs	r6, #1
 80073ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80073f0:	e7eb      	b.n	80073ca <_strtol_l.isra.0+0x72>
 80073f2:	2c2b      	cmp	r4, #43	; 0x2b
 80073f4:	bf08      	it	eq
 80073f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80073fa:	46a8      	mov	r8, r5
 80073fc:	bf08      	it	eq
 80073fe:	f106 0e02 	addeq.w	lr, r6, #2
 8007402:	e7c7      	b.n	8007394 <_strtol_l.isra.0+0x3c>
 8007404:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007408:	2f19      	cmp	r7, #25
 800740a:	d801      	bhi.n	8007410 <_strtol_l.isra.0+0xb8>
 800740c:	3c37      	subs	r4, #55	; 0x37
 800740e:	e7e1      	b.n	80073d4 <_strtol_l.isra.0+0x7c>
 8007410:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007414:	2f19      	cmp	r7, #25
 8007416:	d804      	bhi.n	8007422 <_strtol_l.isra.0+0xca>
 8007418:	3c57      	subs	r4, #87	; 0x57
 800741a:	e7db      	b.n	80073d4 <_strtol_l.isra.0+0x7c>
 800741c:	f04f 36ff 	mov.w	r6, #4294967295
 8007420:	e7e4      	b.n	80073ec <_strtol_l.isra.0+0x94>
 8007422:	2e00      	cmp	r6, #0
 8007424:	da05      	bge.n	8007432 <_strtol_l.isra.0+0xda>
 8007426:	2322      	movs	r3, #34	; 0x22
 8007428:	6003      	str	r3, [r0, #0]
 800742a:	4665      	mov	r5, ip
 800742c:	b942      	cbnz	r2, 8007440 <_strtol_l.isra.0+0xe8>
 800742e:	4628      	mov	r0, r5
 8007430:	e79d      	b.n	800736e <_strtol_l.isra.0+0x16>
 8007432:	f1b8 0f00 	cmp.w	r8, #0
 8007436:	d000      	beq.n	800743a <_strtol_l.isra.0+0xe2>
 8007438:	426d      	negs	r5, r5
 800743a:	2a00      	cmp	r2, #0
 800743c:	d0f7      	beq.n	800742e <_strtol_l.isra.0+0xd6>
 800743e:	b10e      	cbz	r6, 8007444 <_strtol_l.isra.0+0xec>
 8007440:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007444:	6011      	str	r1, [r2, #0]
 8007446:	e7f2      	b.n	800742e <_strtol_l.isra.0+0xd6>
 8007448:	2430      	movs	r4, #48	; 0x30
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1b3      	bne.n	80073b6 <_strtol_l.isra.0+0x5e>
 800744e:	2308      	movs	r3, #8
 8007450:	e7b1      	b.n	80073b6 <_strtol_l.isra.0+0x5e>
 8007452:	2c30      	cmp	r4, #48	; 0x30
 8007454:	d0a4      	beq.n	80073a0 <_strtol_l.isra.0+0x48>
 8007456:	230a      	movs	r3, #10
 8007458:	e7ad      	b.n	80073b6 <_strtol_l.isra.0+0x5e>
 800745a:	bf00      	nop
 800745c:	0800ae81 	.word	0x0800ae81

08007460 <_strtol_r>:
 8007460:	f7ff bf7a 	b.w	8007358 <_strtol_l.isra.0>

08007464 <__swbuf_r>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	460e      	mov	r6, r1
 8007468:	4614      	mov	r4, r2
 800746a:	4605      	mov	r5, r0
 800746c:	b118      	cbz	r0, 8007476 <__swbuf_r+0x12>
 800746e:	6983      	ldr	r3, [r0, #24]
 8007470:	b90b      	cbnz	r3, 8007476 <__swbuf_r+0x12>
 8007472:	f001 f84b 	bl	800850c <__sinit>
 8007476:	4b21      	ldr	r3, [pc, #132]	; (80074fc <__swbuf_r+0x98>)
 8007478:	429c      	cmp	r4, r3
 800747a:	d12b      	bne.n	80074d4 <__swbuf_r+0x70>
 800747c:	686c      	ldr	r4, [r5, #4]
 800747e:	69a3      	ldr	r3, [r4, #24]
 8007480:	60a3      	str	r3, [r4, #8]
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	071a      	lsls	r2, r3, #28
 8007486:	d52f      	bpl.n	80074e8 <__swbuf_r+0x84>
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	b36b      	cbz	r3, 80074e8 <__swbuf_r+0x84>
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	6820      	ldr	r0, [r4, #0]
 8007490:	1ac0      	subs	r0, r0, r3
 8007492:	6963      	ldr	r3, [r4, #20]
 8007494:	b2f6      	uxtb	r6, r6
 8007496:	4283      	cmp	r3, r0
 8007498:	4637      	mov	r7, r6
 800749a:	dc04      	bgt.n	80074a6 <__swbuf_r+0x42>
 800749c:	4621      	mov	r1, r4
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 ffa0 	bl	80083e4 <_fflush_r>
 80074a4:	bb30      	cbnz	r0, 80074f4 <__swbuf_r+0x90>
 80074a6:	68a3      	ldr	r3, [r4, #8]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	60a3      	str	r3, [r4, #8]
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	6022      	str	r2, [r4, #0]
 80074b2:	701e      	strb	r6, [r3, #0]
 80074b4:	6963      	ldr	r3, [r4, #20]
 80074b6:	3001      	adds	r0, #1
 80074b8:	4283      	cmp	r3, r0
 80074ba:	d004      	beq.n	80074c6 <__swbuf_r+0x62>
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	07db      	lsls	r3, r3, #31
 80074c0:	d506      	bpl.n	80074d0 <__swbuf_r+0x6c>
 80074c2:	2e0a      	cmp	r6, #10
 80074c4:	d104      	bne.n	80074d0 <__swbuf_r+0x6c>
 80074c6:	4621      	mov	r1, r4
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 ff8b 	bl	80083e4 <_fflush_r>
 80074ce:	b988      	cbnz	r0, 80074f4 <__swbuf_r+0x90>
 80074d0:	4638      	mov	r0, r7
 80074d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d4:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <__swbuf_r+0x9c>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d101      	bne.n	80074de <__swbuf_r+0x7a>
 80074da:	68ac      	ldr	r4, [r5, #8]
 80074dc:	e7cf      	b.n	800747e <__swbuf_r+0x1a>
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <__swbuf_r+0xa0>)
 80074e0:	429c      	cmp	r4, r3
 80074e2:	bf08      	it	eq
 80074e4:	68ec      	ldreq	r4, [r5, #12]
 80074e6:	e7ca      	b.n	800747e <__swbuf_r+0x1a>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f80c 	bl	8007508 <__swsetup_r>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d0cb      	beq.n	800748c <__swbuf_r+0x28>
 80074f4:	f04f 37ff 	mov.w	r7, #4294967295
 80074f8:	e7ea      	b.n	80074d0 <__swbuf_r+0x6c>
 80074fa:	bf00      	nop
 80074fc:	0800b038 	.word	0x0800b038
 8007500:	0800b058 	.word	0x0800b058
 8007504:	0800b018 	.word	0x0800b018

08007508 <__swsetup_r>:
 8007508:	4b32      	ldr	r3, [pc, #200]	; (80075d4 <__swsetup_r+0xcc>)
 800750a:	b570      	push	{r4, r5, r6, lr}
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	4606      	mov	r6, r0
 8007510:	460c      	mov	r4, r1
 8007512:	b125      	cbz	r5, 800751e <__swsetup_r+0x16>
 8007514:	69ab      	ldr	r3, [r5, #24]
 8007516:	b913      	cbnz	r3, 800751e <__swsetup_r+0x16>
 8007518:	4628      	mov	r0, r5
 800751a:	f000 fff7 	bl	800850c <__sinit>
 800751e:	4b2e      	ldr	r3, [pc, #184]	; (80075d8 <__swsetup_r+0xd0>)
 8007520:	429c      	cmp	r4, r3
 8007522:	d10f      	bne.n	8007544 <__swsetup_r+0x3c>
 8007524:	686c      	ldr	r4, [r5, #4]
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800752c:	0719      	lsls	r1, r3, #28
 800752e:	d42c      	bmi.n	800758a <__swsetup_r+0x82>
 8007530:	06dd      	lsls	r5, r3, #27
 8007532:	d411      	bmi.n	8007558 <__swsetup_r+0x50>
 8007534:	2309      	movs	r3, #9
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	f04f 30ff 	mov.w	r0, #4294967295
 8007542:	e03e      	b.n	80075c2 <__swsetup_r+0xba>
 8007544:	4b25      	ldr	r3, [pc, #148]	; (80075dc <__swsetup_r+0xd4>)
 8007546:	429c      	cmp	r4, r3
 8007548:	d101      	bne.n	800754e <__swsetup_r+0x46>
 800754a:	68ac      	ldr	r4, [r5, #8]
 800754c:	e7eb      	b.n	8007526 <__swsetup_r+0x1e>
 800754e:	4b24      	ldr	r3, [pc, #144]	; (80075e0 <__swsetup_r+0xd8>)
 8007550:	429c      	cmp	r4, r3
 8007552:	bf08      	it	eq
 8007554:	68ec      	ldreq	r4, [r5, #12]
 8007556:	e7e6      	b.n	8007526 <__swsetup_r+0x1e>
 8007558:	0758      	lsls	r0, r3, #29
 800755a:	d512      	bpl.n	8007582 <__swsetup_r+0x7a>
 800755c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755e:	b141      	cbz	r1, 8007572 <__swsetup_r+0x6a>
 8007560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <__swsetup_r+0x66>
 8007568:	4630      	mov	r0, r6
 800756a:	f7fe f895 	bl	8005698 <_free_r>
 800756e:	2300      	movs	r3, #0
 8007570:	6363      	str	r3, [r4, #52]	; 0x34
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007578:	81a3      	strh	r3, [r4, #12]
 800757a:	2300      	movs	r3, #0
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f043 0308 	orr.w	r3, r3, #8
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	b94b      	cbnz	r3, 80075a2 <__swsetup_r+0x9a>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007598:	d003      	beq.n	80075a2 <__swsetup_r+0x9a>
 800759a:	4621      	mov	r1, r4
 800759c:	4630      	mov	r0, r6
 800759e:	f001 fbed 	bl	8008d7c <__smakebuf_r>
 80075a2:	89a0      	ldrh	r0, [r4, #12]
 80075a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a8:	f010 0301 	ands.w	r3, r0, #1
 80075ac:	d00a      	beq.n	80075c4 <__swsetup_r+0xbc>
 80075ae:	2300      	movs	r3, #0
 80075b0:	60a3      	str	r3, [r4, #8]
 80075b2:	6963      	ldr	r3, [r4, #20]
 80075b4:	425b      	negs	r3, r3
 80075b6:	61a3      	str	r3, [r4, #24]
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	b943      	cbnz	r3, 80075ce <__swsetup_r+0xc6>
 80075bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075c0:	d1ba      	bne.n	8007538 <__swsetup_r+0x30>
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	0781      	lsls	r1, r0, #30
 80075c6:	bf58      	it	pl
 80075c8:	6963      	ldrpl	r3, [r4, #20]
 80075ca:	60a3      	str	r3, [r4, #8]
 80075cc:	e7f4      	b.n	80075b8 <__swsetup_r+0xb0>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e7f7      	b.n	80075c2 <__swsetup_r+0xba>
 80075d2:	bf00      	nop
 80075d4:	2000000c 	.word	0x2000000c
 80075d8:	0800b038 	.word	0x0800b038
 80075dc:	0800b058 	.word	0x0800b058
 80075e0:	0800b018 	.word	0x0800b018

080075e4 <quorem>:
 80075e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	6903      	ldr	r3, [r0, #16]
 80075ea:	690c      	ldr	r4, [r1, #16]
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	4607      	mov	r7, r0
 80075f0:	f2c0 8081 	blt.w	80076f6 <quorem+0x112>
 80075f4:	3c01      	subs	r4, #1
 80075f6:	f101 0814 	add.w	r8, r1, #20
 80075fa:	f100 0514 	add.w	r5, r0, #20
 80075fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800760c:	3301      	adds	r3, #1
 800760e:	429a      	cmp	r2, r3
 8007610:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007614:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007618:	fbb2 f6f3 	udiv	r6, r2, r3
 800761c:	d331      	bcc.n	8007682 <quorem+0x9e>
 800761e:	f04f 0e00 	mov.w	lr, #0
 8007622:	4640      	mov	r0, r8
 8007624:	46ac      	mov	ip, r5
 8007626:	46f2      	mov	sl, lr
 8007628:	f850 2b04 	ldr.w	r2, [r0], #4
 800762c:	b293      	uxth	r3, r2
 800762e:	fb06 e303 	mla	r3, r6, r3, lr
 8007632:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007636:	b29b      	uxth	r3, r3
 8007638:	ebaa 0303 	sub.w	r3, sl, r3
 800763c:	0c12      	lsrs	r2, r2, #16
 800763e:	f8dc a000 	ldr.w	sl, [ip]
 8007642:	fb06 e202 	mla	r2, r6, r2, lr
 8007646:	fa13 f38a 	uxtah	r3, r3, sl
 800764a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800764e:	fa1f fa82 	uxth.w	sl, r2
 8007652:	f8dc 2000 	ldr.w	r2, [ip]
 8007656:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800765a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800765e:	b29b      	uxth	r3, r3
 8007660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007664:	4581      	cmp	r9, r0
 8007666:	f84c 3b04 	str.w	r3, [ip], #4
 800766a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800766e:	d2db      	bcs.n	8007628 <quorem+0x44>
 8007670:	f855 300b 	ldr.w	r3, [r5, fp]
 8007674:	b92b      	cbnz	r3, 8007682 <quorem+0x9e>
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	3b04      	subs	r3, #4
 800767a:	429d      	cmp	r5, r3
 800767c:	461a      	mov	r2, r3
 800767e:	d32e      	bcc.n	80076de <quorem+0xfa>
 8007680:	613c      	str	r4, [r7, #16]
 8007682:	4638      	mov	r0, r7
 8007684:	f001 feae 	bl	80093e4 <__mcmp>
 8007688:	2800      	cmp	r0, #0
 800768a:	db24      	blt.n	80076d6 <quorem+0xf2>
 800768c:	3601      	adds	r6, #1
 800768e:	4628      	mov	r0, r5
 8007690:	f04f 0c00 	mov.w	ip, #0
 8007694:	f858 2b04 	ldr.w	r2, [r8], #4
 8007698:	f8d0 e000 	ldr.w	lr, [r0]
 800769c:	b293      	uxth	r3, r2
 800769e:	ebac 0303 	sub.w	r3, ip, r3
 80076a2:	0c12      	lsrs	r2, r2, #16
 80076a4:	fa13 f38e 	uxtah	r3, r3, lr
 80076a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b6:	45c1      	cmp	r9, r8
 80076b8:	f840 3b04 	str.w	r3, [r0], #4
 80076bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076c0:	d2e8      	bcs.n	8007694 <quorem+0xb0>
 80076c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ca:	b922      	cbnz	r2, 80076d6 <quorem+0xf2>
 80076cc:	3b04      	subs	r3, #4
 80076ce:	429d      	cmp	r5, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	d30a      	bcc.n	80076ea <quorem+0x106>
 80076d4:	613c      	str	r4, [r7, #16]
 80076d6:	4630      	mov	r0, r6
 80076d8:	b003      	add	sp, #12
 80076da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	d1cc      	bne.n	8007680 <quorem+0x9c>
 80076e6:	3c01      	subs	r4, #1
 80076e8:	e7c7      	b.n	800767a <quorem+0x96>
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	d1f0      	bne.n	80076d4 <quorem+0xf0>
 80076f2:	3c01      	subs	r4, #1
 80076f4:	e7eb      	b.n	80076ce <quorem+0xea>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e7ee      	b.n	80076d8 <quorem+0xf4>
 80076fa:	0000      	movs	r0, r0
 80076fc:	0000      	movs	r0, r0
	...

08007700 <_dtoa_r>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	ed2d 8b02 	vpush	{d8}
 8007708:	ec57 6b10 	vmov	r6, r7, d0
 800770c:	b095      	sub	sp, #84	; 0x54
 800770e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007710:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007714:	9105      	str	r1, [sp, #20]
 8007716:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800771a:	4604      	mov	r4, r0
 800771c:	9209      	str	r2, [sp, #36]	; 0x24
 800771e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007720:	b975      	cbnz	r5, 8007740 <_dtoa_r+0x40>
 8007722:	2010      	movs	r0, #16
 8007724:	f7fd ffa8 	bl	8005678 <malloc>
 8007728:	4602      	mov	r2, r0
 800772a:	6260      	str	r0, [r4, #36]	; 0x24
 800772c:	b920      	cbnz	r0, 8007738 <_dtoa_r+0x38>
 800772e:	4bb2      	ldr	r3, [pc, #712]	; (80079f8 <_dtoa_r+0x2f8>)
 8007730:	21ea      	movs	r1, #234	; 0xea
 8007732:	48b2      	ldr	r0, [pc, #712]	; (80079fc <_dtoa_r+0x2fc>)
 8007734:	f002 fb8c 	bl	8009e50 <__assert_func>
 8007738:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800773c:	6005      	str	r5, [r0, #0]
 800773e:	60c5      	str	r5, [r0, #12]
 8007740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	b151      	cbz	r1, 800775c <_dtoa_r+0x5c>
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	604a      	str	r2, [r1, #4]
 800774a:	2301      	movs	r3, #1
 800774c:	4093      	lsls	r3, r2
 800774e:	608b      	str	r3, [r1, #8]
 8007750:	4620      	mov	r0, r4
 8007752:	f001 fbbf 	bl	8008ed4 <_Bfree>
 8007756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	1e3b      	subs	r3, r7, #0
 800775e:	bfb9      	ittee	lt
 8007760:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007764:	9303      	strlt	r3, [sp, #12]
 8007766:	2300      	movge	r3, #0
 8007768:	f8c8 3000 	strge.w	r3, [r8]
 800776c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007770:	4ba3      	ldr	r3, [pc, #652]	; (8007a00 <_dtoa_r+0x300>)
 8007772:	bfbc      	itt	lt
 8007774:	2201      	movlt	r2, #1
 8007776:	f8c8 2000 	strlt.w	r2, [r8]
 800777a:	ea33 0309 	bics.w	r3, r3, r9
 800777e:	d11b      	bne.n	80077b8 <_dtoa_r+0xb8>
 8007780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007782:	f242 730f 	movw	r3, #9999	; 0x270f
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800778c:	4333      	orrs	r3, r6
 800778e:	f000 857a 	beq.w	8008286 <_dtoa_r+0xb86>
 8007792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007794:	b963      	cbnz	r3, 80077b0 <_dtoa_r+0xb0>
 8007796:	4b9b      	ldr	r3, [pc, #620]	; (8007a04 <_dtoa_r+0x304>)
 8007798:	e024      	b.n	80077e4 <_dtoa_r+0xe4>
 800779a:	4b9b      	ldr	r3, [pc, #620]	; (8007a08 <_dtoa_r+0x308>)
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	9800      	ldr	r0, [sp, #0]
 80077a6:	b015      	add	sp, #84	; 0x54
 80077a8:	ecbd 8b02 	vpop	{d8}
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	4b94      	ldr	r3, [pc, #592]	; (8007a04 <_dtoa_r+0x304>)
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	3303      	adds	r3, #3
 80077b6:	e7f3      	b.n	80077a0 <_dtoa_r+0xa0>
 80077b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	ec51 0b17 	vmov	r0, r1, d7
 80077c2:	2300      	movs	r3, #0
 80077c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80077c8:	f7f9 f986 	bl	8000ad8 <__aeabi_dcmpeq>
 80077cc:	4680      	mov	r8, r0
 80077ce:	b158      	cbz	r0, 80077e8 <_dtoa_r+0xe8>
 80077d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077d2:	2301      	movs	r3, #1
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8551 	beq.w	8008280 <_dtoa_r+0xb80>
 80077de:	488b      	ldr	r0, [pc, #556]	; (8007a0c <_dtoa_r+0x30c>)
 80077e0:	6018      	str	r0, [r3, #0]
 80077e2:	1e43      	subs	r3, r0, #1
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	e7dd      	b.n	80077a4 <_dtoa_r+0xa4>
 80077e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80077ec:	aa12      	add	r2, sp, #72	; 0x48
 80077ee:	a913      	add	r1, sp, #76	; 0x4c
 80077f0:	4620      	mov	r0, r4
 80077f2:	f001 ff17 	bl	8009624 <__d2b>
 80077f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077fa:	4683      	mov	fp, r0
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	d07c      	beq.n	80078fa <_dtoa_r+0x1fa>
 8007800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007802:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800780a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800780e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007812:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007816:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800781a:	4b7d      	ldr	r3, [pc, #500]	; (8007a10 <_dtoa_r+0x310>)
 800781c:	2200      	movs	r2, #0
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f8 fd39 	bl	8000298 <__aeabi_dsub>
 8007826:	a36e      	add	r3, pc, #440	; (adr r3, 80079e0 <_dtoa_r+0x2e0>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 feec 	bl	8000608 <__aeabi_dmul>
 8007830:	a36d      	add	r3, pc, #436	; (adr r3, 80079e8 <_dtoa_r+0x2e8>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fd31 	bl	800029c <__adddf3>
 800783a:	4606      	mov	r6, r0
 800783c:	4628      	mov	r0, r5
 800783e:	460f      	mov	r7, r1
 8007840:	f7f8 fe78 	bl	8000534 <__aeabi_i2d>
 8007844:	a36a      	add	r3, pc, #424	; (adr r3, 80079f0 <_dtoa_r+0x2f0>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f7f8 fedd 	bl	8000608 <__aeabi_dmul>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4630      	mov	r0, r6
 8007854:	4639      	mov	r1, r7
 8007856:	f7f8 fd21 	bl	800029c <__adddf3>
 800785a:	4606      	mov	r6, r0
 800785c:	460f      	mov	r7, r1
 800785e:	f7f9 f983 	bl	8000b68 <__aeabi_d2iz>
 8007862:	2200      	movs	r2, #0
 8007864:	4682      	mov	sl, r0
 8007866:	2300      	movs	r3, #0
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f9 f93e 	bl	8000aec <__aeabi_dcmplt>
 8007870:	b148      	cbz	r0, 8007886 <_dtoa_r+0x186>
 8007872:	4650      	mov	r0, sl
 8007874:	f7f8 fe5e 	bl	8000534 <__aeabi_i2d>
 8007878:	4632      	mov	r2, r6
 800787a:	463b      	mov	r3, r7
 800787c:	f7f9 f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007880:	b908      	cbnz	r0, 8007886 <_dtoa_r+0x186>
 8007882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007886:	f1ba 0f16 	cmp.w	sl, #22
 800788a:	d854      	bhi.n	8007936 <_dtoa_r+0x236>
 800788c:	4b61      	ldr	r3, [pc, #388]	; (8007a14 <_dtoa_r+0x314>)
 800788e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800789a:	f7f9 f927 	bl	8000aec <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d04b      	beq.n	800793a <_dtoa_r+0x23a>
 80078a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078a6:	2300      	movs	r3, #0
 80078a8:	930e      	str	r3, [sp, #56]	; 0x38
 80078aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078ac:	1b5d      	subs	r5, r3, r5
 80078ae:	1e6b      	subs	r3, r5, #1
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	bf43      	ittte	mi
 80078b4:	2300      	movmi	r3, #0
 80078b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80078ba:	9304      	strmi	r3, [sp, #16]
 80078bc:	f04f 0800 	movpl.w	r8, #0
 80078c0:	f1ba 0f00 	cmp.w	sl, #0
 80078c4:	db3b      	blt.n	800793e <_dtoa_r+0x23e>
 80078c6:	9b04      	ldr	r3, [sp, #16]
 80078c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80078cc:	4453      	add	r3, sl
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	2300      	movs	r3, #0
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	9b05      	ldr	r3, [sp, #20]
 80078d6:	2b09      	cmp	r3, #9
 80078d8:	d869      	bhi.n	80079ae <_dtoa_r+0x2ae>
 80078da:	2b05      	cmp	r3, #5
 80078dc:	bfc4      	itt	gt
 80078de:	3b04      	subgt	r3, #4
 80078e0:	9305      	strgt	r3, [sp, #20]
 80078e2:	9b05      	ldr	r3, [sp, #20]
 80078e4:	f1a3 0302 	sub.w	r3, r3, #2
 80078e8:	bfcc      	ite	gt
 80078ea:	2500      	movgt	r5, #0
 80078ec:	2501      	movle	r5, #1
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d869      	bhi.n	80079c6 <_dtoa_r+0x2c6>
 80078f2:	e8df f003 	tbb	[pc, r3]
 80078f6:	4e2c      	.short	0x4e2c
 80078f8:	5a4c      	.short	0x5a4c
 80078fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80078fe:	441d      	add	r5, r3
 8007900:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007904:	2b20      	cmp	r3, #32
 8007906:	bfc1      	itttt	gt
 8007908:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800790c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007910:	fa09 f303 	lslgt.w	r3, r9, r3
 8007914:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007918:	bfda      	itte	le
 800791a:	f1c3 0320 	rsble	r3, r3, #32
 800791e:	fa06 f003 	lslle.w	r0, r6, r3
 8007922:	4318      	orrgt	r0, r3
 8007924:	f7f8 fdf6 	bl	8000514 <__aeabi_ui2d>
 8007928:	2301      	movs	r3, #1
 800792a:	4606      	mov	r6, r0
 800792c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007930:	3d01      	subs	r5, #1
 8007932:	9310      	str	r3, [sp, #64]	; 0x40
 8007934:	e771      	b.n	800781a <_dtoa_r+0x11a>
 8007936:	2301      	movs	r3, #1
 8007938:	e7b6      	b.n	80078a8 <_dtoa_r+0x1a8>
 800793a:	900e      	str	r0, [sp, #56]	; 0x38
 800793c:	e7b5      	b.n	80078aa <_dtoa_r+0x1aa>
 800793e:	f1ca 0300 	rsb	r3, sl, #0
 8007942:	9306      	str	r3, [sp, #24]
 8007944:	2300      	movs	r3, #0
 8007946:	eba8 080a 	sub.w	r8, r8, sl
 800794a:	930d      	str	r3, [sp, #52]	; 0x34
 800794c:	e7c2      	b.n	80078d4 <_dtoa_r+0x1d4>
 800794e:	2300      	movs	r3, #0
 8007950:	9308      	str	r3, [sp, #32]
 8007952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc39      	bgt.n	80079cc <_dtoa_r+0x2cc>
 8007958:	f04f 0901 	mov.w	r9, #1
 800795c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007960:	464b      	mov	r3, r9
 8007962:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007966:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007968:	2200      	movs	r2, #0
 800796a:	6042      	str	r2, [r0, #4]
 800796c:	2204      	movs	r2, #4
 800796e:	f102 0614 	add.w	r6, r2, #20
 8007972:	429e      	cmp	r6, r3
 8007974:	6841      	ldr	r1, [r0, #4]
 8007976:	d92f      	bls.n	80079d8 <_dtoa_r+0x2d8>
 8007978:	4620      	mov	r0, r4
 800797a:	f001 fa6b 	bl	8008e54 <_Balloc>
 800797e:	9000      	str	r0, [sp, #0]
 8007980:	2800      	cmp	r0, #0
 8007982:	d14b      	bne.n	8007a1c <_dtoa_r+0x31c>
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <_dtoa_r+0x318>)
 8007986:	4602      	mov	r2, r0
 8007988:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800798c:	e6d1      	b.n	8007732 <_dtoa_r+0x32>
 800798e:	2301      	movs	r3, #1
 8007990:	e7de      	b.n	8007950 <_dtoa_r+0x250>
 8007992:	2300      	movs	r3, #0
 8007994:	9308      	str	r3, [sp, #32]
 8007996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007998:	eb0a 0903 	add.w	r9, sl, r3
 800799c:	f109 0301 	add.w	r3, r9, #1
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	bfb8      	it	lt
 80079a6:	2301      	movlt	r3, #1
 80079a8:	e7dd      	b.n	8007966 <_dtoa_r+0x266>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e7f2      	b.n	8007994 <_dtoa_r+0x294>
 80079ae:	2501      	movs	r5, #1
 80079b0:	2300      	movs	r3, #0
 80079b2:	9305      	str	r3, [sp, #20]
 80079b4:	9508      	str	r5, [sp, #32]
 80079b6:	f04f 39ff 	mov.w	r9, #4294967295
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80079c0:	2312      	movs	r3, #18
 80079c2:	9209      	str	r2, [sp, #36]	; 0x24
 80079c4:	e7cf      	b.n	8007966 <_dtoa_r+0x266>
 80079c6:	2301      	movs	r3, #1
 80079c8:	9308      	str	r3, [sp, #32]
 80079ca:	e7f4      	b.n	80079b6 <_dtoa_r+0x2b6>
 80079cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80079d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80079d4:	464b      	mov	r3, r9
 80079d6:	e7c6      	b.n	8007966 <_dtoa_r+0x266>
 80079d8:	3101      	adds	r1, #1
 80079da:	6041      	str	r1, [r0, #4]
 80079dc:	0052      	lsls	r2, r2, #1
 80079de:	e7c6      	b.n	800796e <_dtoa_r+0x26e>
 80079e0:	636f4361 	.word	0x636f4361
 80079e4:	3fd287a7 	.word	0x3fd287a7
 80079e8:	8b60c8b3 	.word	0x8b60c8b3
 80079ec:	3fc68a28 	.word	0x3fc68a28
 80079f0:	509f79fb 	.word	0x509f79fb
 80079f4:	3fd34413 	.word	0x3fd34413
 80079f8:	0800af8e 	.word	0x0800af8e
 80079fc:	0800afa5 	.word	0x0800afa5
 8007a00:	7ff00000 	.word	0x7ff00000
 8007a04:	0800af8a 	.word	0x0800af8a
 8007a08:	0800af81 	.word	0x0800af81
 8007a0c:	0800ae01 	.word	0x0800ae01
 8007a10:	3ff80000 	.word	0x3ff80000
 8007a14:	0800b180 	.word	0x0800b180
 8007a18:	0800b004 	.word	0x0800b004
 8007a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a1e:	9a00      	ldr	r2, [sp, #0]
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	2b0e      	cmp	r3, #14
 8007a26:	f200 80ad 	bhi.w	8007b84 <_dtoa_r+0x484>
 8007a2a:	2d00      	cmp	r5, #0
 8007a2c:	f000 80aa 	beq.w	8007b84 <_dtoa_r+0x484>
 8007a30:	f1ba 0f00 	cmp.w	sl, #0
 8007a34:	dd36      	ble.n	8007aa4 <_dtoa_r+0x3a4>
 8007a36:	4ac3      	ldr	r2, [pc, #780]	; (8007d44 <_dtoa_r+0x644>)
 8007a38:	f00a 030f 	and.w	r3, sl, #15
 8007a3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a40:	ed93 7b00 	vldr	d7, [r3]
 8007a44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007a48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007a4c:	eeb0 8a47 	vmov.f32	s16, s14
 8007a50:	eef0 8a67 	vmov.f32	s17, s15
 8007a54:	d016      	beq.n	8007a84 <_dtoa_r+0x384>
 8007a56:	4bbc      	ldr	r3, [pc, #752]	; (8007d48 <_dtoa_r+0x648>)
 8007a58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a60:	f7f8 fefc 	bl	800085c <__aeabi_ddiv>
 8007a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a68:	f007 070f 	and.w	r7, r7, #15
 8007a6c:	2503      	movs	r5, #3
 8007a6e:	4eb6      	ldr	r6, [pc, #728]	; (8007d48 <_dtoa_r+0x648>)
 8007a70:	b957      	cbnz	r7, 8007a88 <_dtoa_r+0x388>
 8007a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a76:	ec53 2b18 	vmov	r2, r3, d8
 8007a7a:	f7f8 feef 	bl	800085c <__aeabi_ddiv>
 8007a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a82:	e029      	b.n	8007ad8 <_dtoa_r+0x3d8>
 8007a84:	2502      	movs	r5, #2
 8007a86:	e7f2      	b.n	8007a6e <_dtoa_r+0x36e>
 8007a88:	07f9      	lsls	r1, r7, #31
 8007a8a:	d508      	bpl.n	8007a9e <_dtoa_r+0x39e>
 8007a8c:	ec51 0b18 	vmov	r0, r1, d8
 8007a90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a94:	f7f8 fdb8 	bl	8000608 <__aeabi_dmul>
 8007a98:	ec41 0b18 	vmov	d8, r0, r1
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	107f      	asrs	r7, r7, #1
 8007aa0:	3608      	adds	r6, #8
 8007aa2:	e7e5      	b.n	8007a70 <_dtoa_r+0x370>
 8007aa4:	f000 80a6 	beq.w	8007bf4 <_dtoa_r+0x4f4>
 8007aa8:	f1ca 0600 	rsb	r6, sl, #0
 8007aac:	4ba5      	ldr	r3, [pc, #660]	; (8007d44 <_dtoa_r+0x644>)
 8007aae:	4fa6      	ldr	r7, [pc, #664]	; (8007d48 <_dtoa_r+0x648>)
 8007ab0:	f006 020f 	and.w	r2, r6, #15
 8007ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ac0:	f7f8 fda2 	bl	8000608 <__aeabi_dmul>
 8007ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac8:	1136      	asrs	r6, r6, #4
 8007aca:	2300      	movs	r3, #0
 8007acc:	2502      	movs	r5, #2
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	f040 8085 	bne.w	8007bde <_dtoa_r+0x4de>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1d2      	bne.n	8007a7e <_dtoa_r+0x37e>
 8007ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 808c 	beq.w	8007bf8 <_dtoa_r+0x4f8>
 8007ae0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ae4:	4b99      	ldr	r3, [pc, #612]	; (8007d4c <_dtoa_r+0x64c>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f8 fffe 	bl	8000aec <__aeabi_dcmplt>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f000 8081 	beq.w	8007bf8 <_dtoa_r+0x4f8>
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d07d      	beq.n	8007bf8 <_dtoa_r+0x4f8>
 8007afc:	f1b9 0f00 	cmp.w	r9, #0
 8007b00:	dd3c      	ble.n	8007b7c <_dtoa_r+0x47c>
 8007b02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4b91      	ldr	r3, [pc, #580]	; (8007d50 <_dtoa_r+0x650>)
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	f7f8 fd7a 	bl	8000608 <__aeabi_dmul>
 8007b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b18:	3501      	adds	r5, #1
 8007b1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007b1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fd06 	bl	8000534 <__aeabi_i2d>
 8007b28:	4632      	mov	r2, r6
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	f7f8 fd6c 	bl	8000608 <__aeabi_dmul>
 8007b30:	4b88      	ldr	r3, [pc, #544]	; (8007d54 <_dtoa_r+0x654>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fbb2 	bl	800029c <__adddf3>
 8007b38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d15c      	bne.n	8007c02 <_dtoa_r+0x502>
 8007b48:	4b83      	ldr	r3, [pc, #524]	; (8007d58 <_dtoa_r+0x658>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	4639      	mov	r1, r7
 8007b50:	f7f8 fba2 	bl	8000298 <__aeabi_dsub>
 8007b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b58:	4606      	mov	r6, r0
 8007b5a:	460f      	mov	r7, r1
 8007b5c:	f7f8 ffe4 	bl	8000b28 <__aeabi_dcmpgt>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	f040 8296 	bne.w	8008092 <_dtoa_r+0x992>
 8007b66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 ffbb 	bl	8000aec <__aeabi_dcmplt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f040 8288 	bne.w	800808c <_dtoa_r+0x98c>
 8007b7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f2c0 8158 	blt.w	8007e3c <_dtoa_r+0x73c>
 8007b8c:	f1ba 0f0e 	cmp.w	sl, #14
 8007b90:	f300 8154 	bgt.w	8007e3c <_dtoa_r+0x73c>
 8007b94:	4b6b      	ldr	r3, [pc, #428]	; (8007d44 <_dtoa_r+0x644>)
 8007b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f280 80e3 	bge.w	8007d6c <_dtoa_r+0x66c>
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f300 80df 	bgt.w	8007d6c <_dtoa_r+0x66c>
 8007bae:	f040 826d 	bne.w	800808c <_dtoa_r+0x98c>
 8007bb2:	4b69      	ldr	r3, [pc, #420]	; (8007d58 <_dtoa_r+0x658>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	4649      	mov	r1, r9
 8007bba:	f7f8 fd25 	bl	8000608 <__aeabi_dmul>
 8007bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bc2:	f7f8 ffa7 	bl	8000b14 <__aeabi_dcmpge>
 8007bc6:	9e01      	ldr	r6, [sp, #4]
 8007bc8:	4637      	mov	r7, r6
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f040 8243 	bne.w	8008056 <_dtoa_r+0x956>
 8007bd0:	9d00      	ldr	r5, [sp, #0]
 8007bd2:	2331      	movs	r3, #49	; 0x31
 8007bd4:	f805 3b01 	strb.w	r3, [r5], #1
 8007bd8:	f10a 0a01 	add.w	sl, sl, #1
 8007bdc:	e23f      	b.n	800805e <_dtoa_r+0x95e>
 8007bde:	07f2      	lsls	r2, r6, #31
 8007be0:	d505      	bpl.n	8007bee <_dtoa_r+0x4ee>
 8007be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be6:	f7f8 fd0f 	bl	8000608 <__aeabi_dmul>
 8007bea:	3501      	adds	r5, #1
 8007bec:	2301      	movs	r3, #1
 8007bee:	1076      	asrs	r6, r6, #1
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	e76c      	b.n	8007ace <_dtoa_r+0x3ce>
 8007bf4:	2502      	movs	r5, #2
 8007bf6:	e76f      	b.n	8007ad8 <_dtoa_r+0x3d8>
 8007bf8:	9b01      	ldr	r3, [sp, #4]
 8007bfa:	f8cd a01c 	str.w	sl, [sp, #28]
 8007bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8007c00:	e78d      	b.n	8007b1e <_dtoa_r+0x41e>
 8007c02:	9900      	ldr	r1, [sp, #0]
 8007c04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c08:	4b4e      	ldr	r3, [pc, #312]	; (8007d44 <_dtoa_r+0x644>)
 8007c0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c0e:	4401      	add	r1, r0
 8007c10:	9102      	str	r1, [sp, #8]
 8007c12:	9908      	ldr	r1, [sp, #32]
 8007c14:	eeb0 8a47 	vmov.f32	s16, s14
 8007c18:	eef0 8a67 	vmov.f32	s17, s15
 8007c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c24:	2900      	cmp	r1, #0
 8007c26:	d045      	beq.n	8007cb4 <_dtoa_r+0x5b4>
 8007c28:	494c      	ldr	r1, [pc, #304]	; (8007d5c <_dtoa_r+0x65c>)
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	f7f8 fe16 	bl	800085c <__aeabi_ddiv>
 8007c30:	ec53 2b18 	vmov	r2, r3, d8
 8007c34:	f7f8 fb30 	bl	8000298 <__aeabi_dsub>
 8007c38:	9d00      	ldr	r5, [sp, #0]
 8007c3a:	ec41 0b18 	vmov	d8, r0, r1
 8007c3e:	4639      	mov	r1, r7
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7f8 ff91 	bl	8000b68 <__aeabi_d2iz>
 8007c46:	900c      	str	r0, [sp, #48]	; 0x30
 8007c48:	f7f8 fc74 	bl	8000534 <__aeabi_i2d>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7f8 fb20 	bl	8000298 <__aeabi_dsub>
 8007c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c5a:	3330      	adds	r3, #48	; 0x30
 8007c5c:	f805 3b01 	strb.w	r3, [r5], #1
 8007c60:	ec53 2b18 	vmov	r2, r3, d8
 8007c64:	4606      	mov	r6, r0
 8007c66:	460f      	mov	r7, r1
 8007c68:	f7f8 ff40 	bl	8000aec <__aeabi_dcmplt>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d165      	bne.n	8007d3c <_dtoa_r+0x63c>
 8007c70:	4632      	mov	r2, r6
 8007c72:	463b      	mov	r3, r7
 8007c74:	4935      	ldr	r1, [pc, #212]	; (8007d4c <_dtoa_r+0x64c>)
 8007c76:	2000      	movs	r0, #0
 8007c78:	f7f8 fb0e 	bl	8000298 <__aeabi_dsub>
 8007c7c:	ec53 2b18 	vmov	r2, r3, d8
 8007c80:	f7f8 ff34 	bl	8000aec <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f040 80b9 	bne.w	8007dfc <_dtoa_r+0x6fc>
 8007c8a:	9b02      	ldr	r3, [sp, #8]
 8007c8c:	429d      	cmp	r5, r3
 8007c8e:	f43f af75 	beq.w	8007b7c <_dtoa_r+0x47c>
 8007c92:	4b2f      	ldr	r3, [pc, #188]	; (8007d50 <_dtoa_r+0x650>)
 8007c94:	ec51 0b18 	vmov	r0, r1, d8
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f7f8 fcb5 	bl	8000608 <__aeabi_dmul>
 8007c9e:	4b2c      	ldr	r3, [pc, #176]	; (8007d50 <_dtoa_r+0x650>)
 8007ca0:	ec41 0b18 	vmov	d8, r0, r1
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f7f8 fcad 	bl	8000608 <__aeabi_dmul>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	e7c4      	b.n	8007c3e <_dtoa_r+0x53e>
 8007cb4:	ec51 0b17 	vmov	r0, r1, d7
 8007cb8:	f7f8 fca6 	bl	8000608 <__aeabi_dmul>
 8007cbc:	9b02      	ldr	r3, [sp, #8]
 8007cbe:	9d00      	ldr	r5, [sp, #0]
 8007cc0:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc2:	ec41 0b18 	vmov	d8, r0, r1
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7f8 ff4d 	bl	8000b68 <__aeabi_d2iz>
 8007cce:	9011      	str	r0, [sp, #68]	; 0x44
 8007cd0:	f7f8 fc30 	bl	8000534 <__aeabi_i2d>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4630      	mov	r0, r6
 8007cda:	4639      	mov	r1, r7
 8007cdc:	f7f8 fadc 	bl	8000298 <__aeabi_dsub>
 8007ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce2:	3330      	adds	r3, #48	; 0x30
 8007ce4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	429d      	cmp	r5, r3
 8007cec:	4606      	mov	r6, r0
 8007cee:	460f      	mov	r7, r1
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	d134      	bne.n	8007d60 <_dtoa_r+0x660>
 8007cf6:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <_dtoa_r+0x65c>)
 8007cf8:	ec51 0b18 	vmov	r0, r1, d8
 8007cfc:	f7f8 face 	bl	800029c <__adddf3>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	f7f8 ff0e 	bl	8000b28 <__aeabi_dcmpgt>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d175      	bne.n	8007dfc <_dtoa_r+0x6fc>
 8007d10:	ec53 2b18 	vmov	r2, r3, d8
 8007d14:	4911      	ldr	r1, [pc, #68]	; (8007d5c <_dtoa_r+0x65c>)
 8007d16:	2000      	movs	r0, #0
 8007d18:	f7f8 fabe 	bl	8000298 <__aeabi_dsub>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4630      	mov	r0, r6
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 fee2 	bl	8000aec <__aeabi_dcmplt>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	f43f af27 	beq.w	8007b7c <_dtoa_r+0x47c>
 8007d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d30:	1e6b      	subs	r3, r5, #1
 8007d32:	930c      	str	r3, [sp, #48]	; 0x30
 8007d34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d38:	2b30      	cmp	r3, #48	; 0x30
 8007d3a:	d0f8      	beq.n	8007d2e <_dtoa_r+0x62e>
 8007d3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007d40:	e04a      	b.n	8007dd8 <_dtoa_r+0x6d8>
 8007d42:	bf00      	nop
 8007d44:	0800b180 	.word	0x0800b180
 8007d48:	0800b158 	.word	0x0800b158
 8007d4c:	3ff00000 	.word	0x3ff00000
 8007d50:	40240000 	.word	0x40240000
 8007d54:	401c0000 	.word	0x401c0000
 8007d58:	40140000 	.word	0x40140000
 8007d5c:	3fe00000 	.word	0x3fe00000
 8007d60:	4baf      	ldr	r3, [pc, #700]	; (8008020 <_dtoa_r+0x920>)
 8007d62:	f7f8 fc51 	bl	8000608 <__aeabi_dmul>
 8007d66:	4606      	mov	r6, r0
 8007d68:	460f      	mov	r7, r1
 8007d6a:	e7ac      	b.n	8007cc6 <_dtoa_r+0x5c6>
 8007d6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d70:	9d00      	ldr	r5, [sp, #0]
 8007d72:	4642      	mov	r2, r8
 8007d74:	464b      	mov	r3, r9
 8007d76:	4630      	mov	r0, r6
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f7f8 fd6f 	bl	800085c <__aeabi_ddiv>
 8007d7e:	f7f8 fef3 	bl	8000b68 <__aeabi_d2iz>
 8007d82:	9002      	str	r0, [sp, #8]
 8007d84:	f7f8 fbd6 	bl	8000534 <__aeabi_i2d>
 8007d88:	4642      	mov	r2, r8
 8007d8a:	464b      	mov	r3, r9
 8007d8c:	f7f8 fc3c 	bl	8000608 <__aeabi_dmul>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4630      	mov	r0, r6
 8007d96:	4639      	mov	r1, r7
 8007d98:	f7f8 fa7e 	bl	8000298 <__aeabi_dsub>
 8007d9c:	9e02      	ldr	r6, [sp, #8]
 8007d9e:	9f01      	ldr	r7, [sp, #4]
 8007da0:	3630      	adds	r6, #48	; 0x30
 8007da2:	f805 6b01 	strb.w	r6, [r5], #1
 8007da6:	9e00      	ldr	r6, [sp, #0]
 8007da8:	1bae      	subs	r6, r5, r6
 8007daa:	42b7      	cmp	r7, r6
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	d137      	bne.n	8007e22 <_dtoa_r+0x722>
 8007db2:	f7f8 fa73 	bl	800029c <__adddf3>
 8007db6:	4642      	mov	r2, r8
 8007db8:	464b      	mov	r3, r9
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	f7f8 feb3 	bl	8000b28 <__aeabi_dcmpgt>
 8007dc2:	b9c8      	cbnz	r0, 8007df8 <_dtoa_r+0x6f8>
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	4630      	mov	r0, r6
 8007dca:	4639      	mov	r1, r7
 8007dcc:	f7f8 fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dd0:	b110      	cbz	r0, 8007dd8 <_dtoa_r+0x6d8>
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	07d9      	lsls	r1, r3, #31
 8007dd6:	d40f      	bmi.n	8007df8 <_dtoa_r+0x6f8>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	4659      	mov	r1, fp
 8007ddc:	f001 f87a 	bl	8008ed4 <_Bfree>
 8007de0:	2300      	movs	r3, #0
 8007de2:	702b      	strb	r3, [r5, #0]
 8007de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007de6:	f10a 0001 	add.w	r0, sl, #1
 8007dea:	6018      	str	r0, [r3, #0]
 8007dec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f43f acd8 	beq.w	80077a4 <_dtoa_r+0xa4>
 8007df4:	601d      	str	r5, [r3, #0]
 8007df6:	e4d5      	b.n	80077a4 <_dtoa_r+0xa4>
 8007df8:	f8cd a01c 	str.w	sl, [sp, #28]
 8007dfc:	462b      	mov	r3, r5
 8007dfe:	461d      	mov	r5, r3
 8007e00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e04:	2a39      	cmp	r2, #57	; 0x39
 8007e06:	d108      	bne.n	8007e1a <_dtoa_r+0x71a>
 8007e08:	9a00      	ldr	r2, [sp, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d1f7      	bne.n	8007dfe <_dtoa_r+0x6fe>
 8007e0e:	9a07      	ldr	r2, [sp, #28]
 8007e10:	9900      	ldr	r1, [sp, #0]
 8007e12:	3201      	adds	r2, #1
 8007e14:	9207      	str	r2, [sp, #28]
 8007e16:	2230      	movs	r2, #48	; 0x30
 8007e18:	700a      	strb	r2, [r1, #0]
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	3201      	adds	r2, #1
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	e78c      	b.n	8007d3c <_dtoa_r+0x63c>
 8007e22:	4b7f      	ldr	r3, [pc, #508]	; (8008020 <_dtoa_r+0x920>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	f7f8 fbef 	bl	8000608 <__aeabi_dmul>
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	f7f8 fe51 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d09b      	beq.n	8007d72 <_dtoa_r+0x672>
 8007e3a:	e7cd      	b.n	8007dd8 <_dtoa_r+0x6d8>
 8007e3c:	9a08      	ldr	r2, [sp, #32]
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	f000 80c4 	beq.w	8007fcc <_dtoa_r+0x8cc>
 8007e44:	9a05      	ldr	r2, [sp, #20]
 8007e46:	2a01      	cmp	r2, #1
 8007e48:	f300 80a8 	bgt.w	8007f9c <_dtoa_r+0x89c>
 8007e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	f000 80a0 	beq.w	8007f94 <_dtoa_r+0x894>
 8007e54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e58:	9e06      	ldr	r6, [sp, #24]
 8007e5a:	4645      	mov	r5, r8
 8007e5c:	9a04      	ldr	r2, [sp, #16]
 8007e5e:	2101      	movs	r1, #1
 8007e60:	441a      	add	r2, r3
 8007e62:	4620      	mov	r0, r4
 8007e64:	4498      	add	r8, r3
 8007e66:	9204      	str	r2, [sp, #16]
 8007e68:	f001 f93a 	bl	80090e0 <__i2b>
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	dd0b      	ble.n	8007e8a <_dtoa_r+0x78a>
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dd08      	ble.n	8007e8a <_dtoa_r+0x78a>
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	9a04      	ldr	r2, [sp, #16]
 8007e7c:	bfa8      	it	ge
 8007e7e:	462b      	movge	r3, r5
 8007e80:	eba8 0803 	sub.w	r8, r8, r3
 8007e84:	1aed      	subs	r5, r5, r3
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	9b06      	ldr	r3, [sp, #24]
 8007e8c:	b1fb      	cbz	r3, 8007ece <_dtoa_r+0x7ce>
 8007e8e:	9b08      	ldr	r3, [sp, #32]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 809f 	beq.w	8007fd4 <_dtoa_r+0x8d4>
 8007e96:	2e00      	cmp	r6, #0
 8007e98:	dd11      	ble.n	8007ebe <_dtoa_r+0x7be>
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f001 f9da 	bl	8009258 <__pow5mult>
 8007ea4:	465a      	mov	r2, fp
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f001 f92e 	bl	800910c <__multiply>
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	9007      	str	r0, [sp, #28]
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f001 f80d 	bl	8008ed4 <_Bfree>
 8007eba:	9b07      	ldr	r3, [sp, #28]
 8007ebc:	469b      	mov	fp, r3
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	1b9a      	subs	r2, r3, r6
 8007ec2:	d004      	beq.n	8007ece <_dtoa_r+0x7ce>
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f001 f9c6 	bl	8009258 <__pow5mult>
 8007ecc:	4683      	mov	fp, r0
 8007ece:	2101      	movs	r1, #1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f001 f905 	bl	80090e0 <__i2b>
 8007ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	4606      	mov	r6, r0
 8007edc:	dd7c      	ble.n	8007fd8 <_dtoa_r+0x8d8>
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f001 f9b8 	bl	8009258 <__pow5mult>
 8007ee8:	9b05      	ldr	r3, [sp, #20]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	4606      	mov	r6, r0
 8007eee:	dd76      	ble.n	8007fde <_dtoa_r+0x8de>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	6933      	ldr	r3, [r6, #16]
 8007ef6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007efa:	6918      	ldr	r0, [r3, #16]
 8007efc:	f001 f8a0 	bl	8009040 <__hi0bits>
 8007f00:	f1c0 0020 	rsb	r0, r0, #32
 8007f04:	9b04      	ldr	r3, [sp, #16]
 8007f06:	4418      	add	r0, r3
 8007f08:	f010 001f 	ands.w	r0, r0, #31
 8007f0c:	f000 8086 	beq.w	800801c <_dtoa_r+0x91c>
 8007f10:	f1c0 0320 	rsb	r3, r0, #32
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	dd7f      	ble.n	8008018 <_dtoa_r+0x918>
 8007f18:	f1c0 001c 	rsb	r0, r0, #28
 8007f1c:	9b04      	ldr	r3, [sp, #16]
 8007f1e:	4403      	add	r3, r0
 8007f20:	4480      	add	r8, r0
 8007f22:	4405      	add	r5, r0
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	f1b8 0f00 	cmp.w	r8, #0
 8007f2a:	dd05      	ble.n	8007f38 <_dtoa_r+0x838>
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	4642      	mov	r2, r8
 8007f30:	4620      	mov	r0, r4
 8007f32:	f001 f9eb 	bl	800930c <__lshift>
 8007f36:	4683      	mov	fp, r0
 8007f38:	9b04      	ldr	r3, [sp, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dd05      	ble.n	8007f4a <_dtoa_r+0x84a>
 8007f3e:	4631      	mov	r1, r6
 8007f40:	461a      	mov	r2, r3
 8007f42:	4620      	mov	r0, r4
 8007f44:	f001 f9e2 	bl	800930c <__lshift>
 8007f48:	4606      	mov	r6, r0
 8007f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d069      	beq.n	8008024 <_dtoa_r+0x924>
 8007f50:	4631      	mov	r1, r6
 8007f52:	4658      	mov	r0, fp
 8007f54:	f001 fa46 	bl	80093e4 <__mcmp>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	da63      	bge.n	8008024 <_dtoa_r+0x924>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4659      	mov	r1, fp
 8007f60:	220a      	movs	r2, #10
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 ffd8 	bl	8008f18 <__multadd>
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f6e:	4683      	mov	fp, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 818f 	beq.w	8008294 <_dtoa_r+0xb94>
 8007f76:	4639      	mov	r1, r7
 8007f78:	2300      	movs	r3, #0
 8007f7a:	220a      	movs	r2, #10
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 ffcb 	bl	8008f18 <__multadd>
 8007f82:	f1b9 0f00 	cmp.w	r9, #0
 8007f86:	4607      	mov	r7, r0
 8007f88:	f300 808e 	bgt.w	80080a8 <_dtoa_r+0x9a8>
 8007f8c:	9b05      	ldr	r3, [sp, #20]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	dc50      	bgt.n	8008034 <_dtoa_r+0x934>
 8007f92:	e089      	b.n	80080a8 <_dtoa_r+0x9a8>
 8007f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f9a:	e75d      	b.n	8007e58 <_dtoa_r+0x758>
 8007f9c:	9b01      	ldr	r3, [sp, #4]
 8007f9e:	1e5e      	subs	r6, r3, #1
 8007fa0:	9b06      	ldr	r3, [sp, #24]
 8007fa2:	42b3      	cmp	r3, r6
 8007fa4:	bfbf      	itttt	lt
 8007fa6:	9b06      	ldrlt	r3, [sp, #24]
 8007fa8:	9606      	strlt	r6, [sp, #24]
 8007faa:	1af2      	sublt	r2, r6, r3
 8007fac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007fae:	bfb6      	itet	lt
 8007fb0:	189b      	addlt	r3, r3, r2
 8007fb2:	1b9e      	subge	r6, r3, r6
 8007fb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007fb6:	9b01      	ldr	r3, [sp, #4]
 8007fb8:	bfb8      	it	lt
 8007fba:	2600      	movlt	r6, #0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bfb5      	itete	lt
 8007fc0:	eba8 0503 	sublt.w	r5, r8, r3
 8007fc4:	9b01      	ldrge	r3, [sp, #4]
 8007fc6:	2300      	movlt	r3, #0
 8007fc8:	4645      	movge	r5, r8
 8007fca:	e747      	b.n	8007e5c <_dtoa_r+0x75c>
 8007fcc:	9e06      	ldr	r6, [sp, #24]
 8007fce:	9f08      	ldr	r7, [sp, #32]
 8007fd0:	4645      	mov	r5, r8
 8007fd2:	e74c      	b.n	8007e6e <_dtoa_r+0x76e>
 8007fd4:	9a06      	ldr	r2, [sp, #24]
 8007fd6:	e775      	b.n	8007ec4 <_dtoa_r+0x7c4>
 8007fd8:	9b05      	ldr	r3, [sp, #20]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	dc18      	bgt.n	8008010 <_dtoa_r+0x910>
 8007fde:	9b02      	ldr	r3, [sp, #8]
 8007fe0:	b9b3      	cbnz	r3, 8008010 <_dtoa_r+0x910>
 8007fe2:	9b03      	ldr	r3, [sp, #12]
 8007fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fe8:	b9a3      	cbnz	r3, 8008014 <_dtoa_r+0x914>
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ff0:	0d1b      	lsrs	r3, r3, #20
 8007ff2:	051b      	lsls	r3, r3, #20
 8007ff4:	b12b      	cbz	r3, 8008002 <_dtoa_r+0x902>
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	f108 0801 	add.w	r8, r8, #1
 8008000:	2301      	movs	r3, #1
 8008002:	9306      	str	r3, [sp, #24]
 8008004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008006:	2b00      	cmp	r3, #0
 8008008:	f47f af74 	bne.w	8007ef4 <_dtoa_r+0x7f4>
 800800c:	2001      	movs	r0, #1
 800800e:	e779      	b.n	8007f04 <_dtoa_r+0x804>
 8008010:	2300      	movs	r3, #0
 8008012:	e7f6      	b.n	8008002 <_dtoa_r+0x902>
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	e7f4      	b.n	8008002 <_dtoa_r+0x902>
 8008018:	d085      	beq.n	8007f26 <_dtoa_r+0x826>
 800801a:	4618      	mov	r0, r3
 800801c:	301c      	adds	r0, #28
 800801e:	e77d      	b.n	8007f1c <_dtoa_r+0x81c>
 8008020:	40240000 	.word	0x40240000
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	dc38      	bgt.n	800809c <_dtoa_r+0x99c>
 800802a:	9b05      	ldr	r3, [sp, #20]
 800802c:	2b02      	cmp	r3, #2
 800802e:	dd35      	ble.n	800809c <_dtoa_r+0x99c>
 8008030:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008034:	f1b9 0f00 	cmp.w	r9, #0
 8008038:	d10d      	bne.n	8008056 <_dtoa_r+0x956>
 800803a:	4631      	mov	r1, r6
 800803c:	464b      	mov	r3, r9
 800803e:	2205      	movs	r2, #5
 8008040:	4620      	mov	r0, r4
 8008042:	f000 ff69 	bl	8008f18 <__multadd>
 8008046:	4601      	mov	r1, r0
 8008048:	4606      	mov	r6, r0
 800804a:	4658      	mov	r0, fp
 800804c:	f001 f9ca 	bl	80093e4 <__mcmp>
 8008050:	2800      	cmp	r0, #0
 8008052:	f73f adbd 	bgt.w	8007bd0 <_dtoa_r+0x4d0>
 8008056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008058:	9d00      	ldr	r5, [sp, #0]
 800805a:	ea6f 0a03 	mvn.w	sl, r3
 800805e:	f04f 0800 	mov.w	r8, #0
 8008062:	4631      	mov	r1, r6
 8008064:	4620      	mov	r0, r4
 8008066:	f000 ff35 	bl	8008ed4 <_Bfree>
 800806a:	2f00      	cmp	r7, #0
 800806c:	f43f aeb4 	beq.w	8007dd8 <_dtoa_r+0x6d8>
 8008070:	f1b8 0f00 	cmp.w	r8, #0
 8008074:	d005      	beq.n	8008082 <_dtoa_r+0x982>
 8008076:	45b8      	cmp	r8, r7
 8008078:	d003      	beq.n	8008082 <_dtoa_r+0x982>
 800807a:	4641      	mov	r1, r8
 800807c:	4620      	mov	r0, r4
 800807e:	f000 ff29 	bl	8008ed4 <_Bfree>
 8008082:	4639      	mov	r1, r7
 8008084:	4620      	mov	r0, r4
 8008086:	f000 ff25 	bl	8008ed4 <_Bfree>
 800808a:	e6a5      	b.n	8007dd8 <_dtoa_r+0x6d8>
 800808c:	2600      	movs	r6, #0
 800808e:	4637      	mov	r7, r6
 8008090:	e7e1      	b.n	8008056 <_dtoa_r+0x956>
 8008092:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008094:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008098:	4637      	mov	r7, r6
 800809a:	e599      	b.n	8007bd0 <_dtoa_r+0x4d0>
 800809c:	9b08      	ldr	r3, [sp, #32]
 800809e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 80fd 	beq.w	80082a2 <_dtoa_r+0xba2>
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	dd05      	ble.n	80080b8 <_dtoa_r+0x9b8>
 80080ac:	4639      	mov	r1, r7
 80080ae:	462a      	mov	r2, r5
 80080b0:	4620      	mov	r0, r4
 80080b2:	f001 f92b 	bl	800930c <__lshift>
 80080b6:	4607      	mov	r7, r0
 80080b8:	9b06      	ldr	r3, [sp, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d05c      	beq.n	8008178 <_dtoa_r+0xa78>
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 fec7 	bl	8008e54 <_Balloc>
 80080c6:	4605      	mov	r5, r0
 80080c8:	b928      	cbnz	r0, 80080d6 <_dtoa_r+0x9d6>
 80080ca:	4b80      	ldr	r3, [pc, #512]	; (80082cc <_dtoa_r+0xbcc>)
 80080cc:	4602      	mov	r2, r0
 80080ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080d2:	f7ff bb2e 	b.w	8007732 <_dtoa_r+0x32>
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	3202      	adds	r2, #2
 80080da:	0092      	lsls	r2, r2, #2
 80080dc:	f107 010c 	add.w	r1, r7, #12
 80080e0:	300c      	adds	r0, #12
 80080e2:	f000 fe9d 	bl	8008e20 <memcpy>
 80080e6:	2201      	movs	r2, #1
 80080e8:	4629      	mov	r1, r5
 80080ea:	4620      	mov	r0, r4
 80080ec:	f001 f90e 	bl	800930c <__lshift>
 80080f0:	9b00      	ldr	r3, [sp, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	9b00      	ldr	r3, [sp, #0]
 80080f8:	444b      	add	r3, r9
 80080fa:	9307      	str	r3, [sp, #28]
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	46b8      	mov	r8, r7
 8008104:	9306      	str	r3, [sp, #24]
 8008106:	4607      	mov	r7, r0
 8008108:	9b01      	ldr	r3, [sp, #4]
 800810a:	4631      	mov	r1, r6
 800810c:	3b01      	subs	r3, #1
 800810e:	4658      	mov	r0, fp
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	f7ff fa67 	bl	80075e4 <quorem>
 8008116:	4603      	mov	r3, r0
 8008118:	3330      	adds	r3, #48	; 0x30
 800811a:	9004      	str	r0, [sp, #16]
 800811c:	4641      	mov	r1, r8
 800811e:	4658      	mov	r0, fp
 8008120:	9308      	str	r3, [sp, #32]
 8008122:	f001 f95f 	bl	80093e4 <__mcmp>
 8008126:	463a      	mov	r2, r7
 8008128:	4681      	mov	r9, r0
 800812a:	4631      	mov	r1, r6
 800812c:	4620      	mov	r0, r4
 800812e:	f001 f975 	bl	800941c <__mdiff>
 8008132:	68c2      	ldr	r2, [r0, #12]
 8008134:	9b08      	ldr	r3, [sp, #32]
 8008136:	4605      	mov	r5, r0
 8008138:	bb02      	cbnz	r2, 800817c <_dtoa_r+0xa7c>
 800813a:	4601      	mov	r1, r0
 800813c:	4658      	mov	r0, fp
 800813e:	f001 f951 	bl	80093e4 <__mcmp>
 8008142:	9b08      	ldr	r3, [sp, #32]
 8008144:	4602      	mov	r2, r0
 8008146:	4629      	mov	r1, r5
 8008148:	4620      	mov	r0, r4
 800814a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800814e:	f000 fec1 	bl	8008ed4 <_Bfree>
 8008152:	9b05      	ldr	r3, [sp, #20]
 8008154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008156:	9d01      	ldr	r5, [sp, #4]
 8008158:	ea43 0102 	orr.w	r1, r3, r2
 800815c:	9b06      	ldr	r3, [sp, #24]
 800815e:	430b      	orrs	r3, r1
 8008160:	9b08      	ldr	r3, [sp, #32]
 8008162:	d10d      	bne.n	8008180 <_dtoa_r+0xa80>
 8008164:	2b39      	cmp	r3, #57	; 0x39
 8008166:	d029      	beq.n	80081bc <_dtoa_r+0xabc>
 8008168:	f1b9 0f00 	cmp.w	r9, #0
 800816c:	dd01      	ble.n	8008172 <_dtoa_r+0xa72>
 800816e:	9b04      	ldr	r3, [sp, #16]
 8008170:	3331      	adds	r3, #49	; 0x31
 8008172:	9a02      	ldr	r2, [sp, #8]
 8008174:	7013      	strb	r3, [r2, #0]
 8008176:	e774      	b.n	8008062 <_dtoa_r+0x962>
 8008178:	4638      	mov	r0, r7
 800817a:	e7b9      	b.n	80080f0 <_dtoa_r+0x9f0>
 800817c:	2201      	movs	r2, #1
 800817e:	e7e2      	b.n	8008146 <_dtoa_r+0xa46>
 8008180:	f1b9 0f00 	cmp.w	r9, #0
 8008184:	db06      	blt.n	8008194 <_dtoa_r+0xa94>
 8008186:	9905      	ldr	r1, [sp, #20]
 8008188:	ea41 0909 	orr.w	r9, r1, r9
 800818c:	9906      	ldr	r1, [sp, #24]
 800818e:	ea59 0101 	orrs.w	r1, r9, r1
 8008192:	d120      	bne.n	80081d6 <_dtoa_r+0xad6>
 8008194:	2a00      	cmp	r2, #0
 8008196:	ddec      	ble.n	8008172 <_dtoa_r+0xa72>
 8008198:	4659      	mov	r1, fp
 800819a:	2201      	movs	r2, #1
 800819c:	4620      	mov	r0, r4
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	f001 f8b4 	bl	800930c <__lshift>
 80081a4:	4631      	mov	r1, r6
 80081a6:	4683      	mov	fp, r0
 80081a8:	f001 f91c 	bl	80093e4 <__mcmp>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	dc02      	bgt.n	80081b8 <_dtoa_r+0xab8>
 80081b2:	d1de      	bne.n	8008172 <_dtoa_r+0xa72>
 80081b4:	07da      	lsls	r2, r3, #31
 80081b6:	d5dc      	bpl.n	8008172 <_dtoa_r+0xa72>
 80081b8:	2b39      	cmp	r3, #57	; 0x39
 80081ba:	d1d8      	bne.n	800816e <_dtoa_r+0xa6e>
 80081bc:	9a02      	ldr	r2, [sp, #8]
 80081be:	2339      	movs	r3, #57	; 0x39
 80081c0:	7013      	strb	r3, [r2, #0]
 80081c2:	462b      	mov	r3, r5
 80081c4:	461d      	mov	r5, r3
 80081c6:	3b01      	subs	r3, #1
 80081c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081cc:	2a39      	cmp	r2, #57	; 0x39
 80081ce:	d050      	beq.n	8008272 <_dtoa_r+0xb72>
 80081d0:	3201      	adds	r2, #1
 80081d2:	701a      	strb	r2, [r3, #0]
 80081d4:	e745      	b.n	8008062 <_dtoa_r+0x962>
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	dd03      	ble.n	80081e2 <_dtoa_r+0xae2>
 80081da:	2b39      	cmp	r3, #57	; 0x39
 80081dc:	d0ee      	beq.n	80081bc <_dtoa_r+0xabc>
 80081de:	3301      	adds	r3, #1
 80081e0:	e7c7      	b.n	8008172 <_dtoa_r+0xa72>
 80081e2:	9a01      	ldr	r2, [sp, #4]
 80081e4:	9907      	ldr	r1, [sp, #28]
 80081e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081ea:	428a      	cmp	r2, r1
 80081ec:	d02a      	beq.n	8008244 <_dtoa_r+0xb44>
 80081ee:	4659      	mov	r1, fp
 80081f0:	2300      	movs	r3, #0
 80081f2:	220a      	movs	r2, #10
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 fe8f 	bl	8008f18 <__multadd>
 80081fa:	45b8      	cmp	r8, r7
 80081fc:	4683      	mov	fp, r0
 80081fe:	f04f 0300 	mov.w	r3, #0
 8008202:	f04f 020a 	mov.w	r2, #10
 8008206:	4641      	mov	r1, r8
 8008208:	4620      	mov	r0, r4
 800820a:	d107      	bne.n	800821c <_dtoa_r+0xb1c>
 800820c:	f000 fe84 	bl	8008f18 <__multadd>
 8008210:	4680      	mov	r8, r0
 8008212:	4607      	mov	r7, r0
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	3301      	adds	r3, #1
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	e775      	b.n	8008108 <_dtoa_r+0xa08>
 800821c:	f000 fe7c 	bl	8008f18 <__multadd>
 8008220:	4639      	mov	r1, r7
 8008222:	4680      	mov	r8, r0
 8008224:	2300      	movs	r3, #0
 8008226:	220a      	movs	r2, #10
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fe75 	bl	8008f18 <__multadd>
 800822e:	4607      	mov	r7, r0
 8008230:	e7f0      	b.n	8008214 <_dtoa_r+0xb14>
 8008232:	f1b9 0f00 	cmp.w	r9, #0
 8008236:	9a00      	ldr	r2, [sp, #0]
 8008238:	bfcc      	ite	gt
 800823a:	464d      	movgt	r5, r9
 800823c:	2501      	movle	r5, #1
 800823e:	4415      	add	r5, r2
 8008240:	f04f 0800 	mov.w	r8, #0
 8008244:	4659      	mov	r1, fp
 8008246:	2201      	movs	r2, #1
 8008248:	4620      	mov	r0, r4
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	f001 f85e 	bl	800930c <__lshift>
 8008250:	4631      	mov	r1, r6
 8008252:	4683      	mov	fp, r0
 8008254:	f001 f8c6 	bl	80093e4 <__mcmp>
 8008258:	2800      	cmp	r0, #0
 800825a:	dcb2      	bgt.n	80081c2 <_dtoa_r+0xac2>
 800825c:	d102      	bne.n	8008264 <_dtoa_r+0xb64>
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	07db      	lsls	r3, r3, #31
 8008262:	d4ae      	bmi.n	80081c2 <_dtoa_r+0xac2>
 8008264:	462b      	mov	r3, r5
 8008266:	461d      	mov	r5, r3
 8008268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800826c:	2a30      	cmp	r2, #48	; 0x30
 800826e:	d0fa      	beq.n	8008266 <_dtoa_r+0xb66>
 8008270:	e6f7      	b.n	8008062 <_dtoa_r+0x962>
 8008272:	9a00      	ldr	r2, [sp, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d1a5      	bne.n	80081c4 <_dtoa_r+0xac4>
 8008278:	f10a 0a01 	add.w	sl, sl, #1
 800827c:	2331      	movs	r3, #49	; 0x31
 800827e:	e779      	b.n	8008174 <_dtoa_r+0xa74>
 8008280:	4b13      	ldr	r3, [pc, #76]	; (80082d0 <_dtoa_r+0xbd0>)
 8008282:	f7ff baaf 	b.w	80077e4 <_dtoa_r+0xe4>
 8008286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008288:	2b00      	cmp	r3, #0
 800828a:	f47f aa86 	bne.w	800779a <_dtoa_r+0x9a>
 800828e:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <_dtoa_r+0xbd4>)
 8008290:	f7ff baa8 	b.w	80077e4 <_dtoa_r+0xe4>
 8008294:	f1b9 0f00 	cmp.w	r9, #0
 8008298:	dc03      	bgt.n	80082a2 <_dtoa_r+0xba2>
 800829a:	9b05      	ldr	r3, [sp, #20]
 800829c:	2b02      	cmp	r3, #2
 800829e:	f73f aec9 	bgt.w	8008034 <_dtoa_r+0x934>
 80082a2:	9d00      	ldr	r5, [sp, #0]
 80082a4:	4631      	mov	r1, r6
 80082a6:	4658      	mov	r0, fp
 80082a8:	f7ff f99c 	bl	80075e4 <quorem>
 80082ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80082b0:	f805 3b01 	strb.w	r3, [r5], #1
 80082b4:	9a00      	ldr	r2, [sp, #0]
 80082b6:	1aaa      	subs	r2, r5, r2
 80082b8:	4591      	cmp	r9, r2
 80082ba:	ddba      	ble.n	8008232 <_dtoa_r+0xb32>
 80082bc:	4659      	mov	r1, fp
 80082be:	2300      	movs	r3, #0
 80082c0:	220a      	movs	r2, #10
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 fe28 	bl	8008f18 <__multadd>
 80082c8:	4683      	mov	fp, r0
 80082ca:	e7eb      	b.n	80082a4 <_dtoa_r+0xba4>
 80082cc:	0800b004 	.word	0x0800b004
 80082d0:	0800ae00 	.word	0x0800ae00
 80082d4:	0800af81 	.word	0x0800af81

080082d8 <__sflush_r>:
 80082d8:	898a      	ldrh	r2, [r1, #12]
 80082da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082de:	4605      	mov	r5, r0
 80082e0:	0710      	lsls	r0, r2, #28
 80082e2:	460c      	mov	r4, r1
 80082e4:	d458      	bmi.n	8008398 <__sflush_r+0xc0>
 80082e6:	684b      	ldr	r3, [r1, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dc05      	bgt.n	80082f8 <__sflush_r+0x20>
 80082ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	dc02      	bgt.n	80082f8 <__sflush_r+0x20>
 80082f2:	2000      	movs	r0, #0
 80082f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082fa:	2e00      	cmp	r6, #0
 80082fc:	d0f9      	beq.n	80082f2 <__sflush_r+0x1a>
 80082fe:	2300      	movs	r3, #0
 8008300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008304:	682f      	ldr	r7, [r5, #0]
 8008306:	602b      	str	r3, [r5, #0]
 8008308:	d032      	beq.n	8008370 <__sflush_r+0x98>
 800830a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	075a      	lsls	r2, r3, #29
 8008310:	d505      	bpl.n	800831e <__sflush_r+0x46>
 8008312:	6863      	ldr	r3, [r4, #4]
 8008314:	1ac0      	subs	r0, r0, r3
 8008316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008318:	b10b      	cbz	r3, 800831e <__sflush_r+0x46>
 800831a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800831c:	1ac0      	subs	r0, r0, r3
 800831e:	2300      	movs	r3, #0
 8008320:	4602      	mov	r2, r0
 8008322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008324:	6a21      	ldr	r1, [r4, #32]
 8008326:	4628      	mov	r0, r5
 8008328:	47b0      	blx	r6
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	d106      	bne.n	800833e <__sflush_r+0x66>
 8008330:	6829      	ldr	r1, [r5, #0]
 8008332:	291d      	cmp	r1, #29
 8008334:	d82c      	bhi.n	8008390 <__sflush_r+0xb8>
 8008336:	4a2a      	ldr	r2, [pc, #168]	; (80083e0 <__sflush_r+0x108>)
 8008338:	40ca      	lsrs	r2, r1
 800833a:	07d6      	lsls	r6, r2, #31
 800833c:	d528      	bpl.n	8008390 <__sflush_r+0xb8>
 800833e:	2200      	movs	r2, #0
 8008340:	6062      	str	r2, [r4, #4]
 8008342:	04d9      	lsls	r1, r3, #19
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	d504      	bpl.n	8008354 <__sflush_r+0x7c>
 800834a:	1c42      	adds	r2, r0, #1
 800834c:	d101      	bne.n	8008352 <__sflush_r+0x7a>
 800834e:	682b      	ldr	r3, [r5, #0]
 8008350:	b903      	cbnz	r3, 8008354 <__sflush_r+0x7c>
 8008352:	6560      	str	r0, [r4, #84]	; 0x54
 8008354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008356:	602f      	str	r7, [r5, #0]
 8008358:	2900      	cmp	r1, #0
 800835a:	d0ca      	beq.n	80082f2 <__sflush_r+0x1a>
 800835c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008360:	4299      	cmp	r1, r3
 8008362:	d002      	beq.n	800836a <__sflush_r+0x92>
 8008364:	4628      	mov	r0, r5
 8008366:	f7fd f997 	bl	8005698 <_free_r>
 800836a:	2000      	movs	r0, #0
 800836c:	6360      	str	r0, [r4, #52]	; 0x34
 800836e:	e7c1      	b.n	80082f4 <__sflush_r+0x1c>
 8008370:	6a21      	ldr	r1, [r4, #32]
 8008372:	2301      	movs	r3, #1
 8008374:	4628      	mov	r0, r5
 8008376:	47b0      	blx	r6
 8008378:	1c41      	adds	r1, r0, #1
 800837a:	d1c7      	bne.n	800830c <__sflush_r+0x34>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0c4      	beq.n	800830c <__sflush_r+0x34>
 8008382:	2b1d      	cmp	r3, #29
 8008384:	d001      	beq.n	800838a <__sflush_r+0xb2>
 8008386:	2b16      	cmp	r3, #22
 8008388:	d101      	bne.n	800838e <__sflush_r+0xb6>
 800838a:	602f      	str	r7, [r5, #0]
 800838c:	e7b1      	b.n	80082f2 <__sflush_r+0x1a>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008394:	81a3      	strh	r3, [r4, #12]
 8008396:	e7ad      	b.n	80082f4 <__sflush_r+0x1c>
 8008398:	690f      	ldr	r7, [r1, #16]
 800839a:	2f00      	cmp	r7, #0
 800839c:	d0a9      	beq.n	80082f2 <__sflush_r+0x1a>
 800839e:	0793      	lsls	r3, r2, #30
 80083a0:	680e      	ldr	r6, [r1, #0]
 80083a2:	bf08      	it	eq
 80083a4:	694b      	ldreq	r3, [r1, #20]
 80083a6:	600f      	str	r7, [r1, #0]
 80083a8:	bf18      	it	ne
 80083aa:	2300      	movne	r3, #0
 80083ac:	eba6 0807 	sub.w	r8, r6, r7
 80083b0:	608b      	str	r3, [r1, #8]
 80083b2:	f1b8 0f00 	cmp.w	r8, #0
 80083b6:	dd9c      	ble.n	80082f2 <__sflush_r+0x1a>
 80083b8:	6a21      	ldr	r1, [r4, #32]
 80083ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083bc:	4643      	mov	r3, r8
 80083be:	463a      	mov	r2, r7
 80083c0:	4628      	mov	r0, r5
 80083c2:	47b0      	blx	r6
 80083c4:	2800      	cmp	r0, #0
 80083c6:	dc06      	bgt.n	80083d6 <__sflush_r+0xfe>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	e78e      	b.n	80082f4 <__sflush_r+0x1c>
 80083d6:	4407      	add	r7, r0
 80083d8:	eba8 0800 	sub.w	r8, r8, r0
 80083dc:	e7e9      	b.n	80083b2 <__sflush_r+0xda>
 80083de:	bf00      	nop
 80083e0:	20400001 	.word	0x20400001

080083e4 <_fflush_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	690b      	ldr	r3, [r1, #16]
 80083e8:	4605      	mov	r5, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	b913      	cbnz	r3, 80083f4 <_fflush_r+0x10>
 80083ee:	2500      	movs	r5, #0
 80083f0:	4628      	mov	r0, r5
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	b118      	cbz	r0, 80083fe <_fflush_r+0x1a>
 80083f6:	6983      	ldr	r3, [r0, #24]
 80083f8:	b90b      	cbnz	r3, 80083fe <_fflush_r+0x1a>
 80083fa:	f000 f887 	bl	800850c <__sinit>
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <_fflush_r+0x6c>)
 8008400:	429c      	cmp	r4, r3
 8008402:	d11b      	bne.n	800843c <_fflush_r+0x58>
 8008404:	686c      	ldr	r4, [r5, #4]
 8008406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ef      	beq.n	80083ee <_fflush_r+0xa>
 800840e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008410:	07d0      	lsls	r0, r2, #31
 8008412:	d404      	bmi.n	800841e <_fflush_r+0x3a>
 8008414:	0599      	lsls	r1, r3, #22
 8008416:	d402      	bmi.n	800841e <_fflush_r+0x3a>
 8008418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800841a:	f000 fc88 	bl	8008d2e <__retarget_lock_acquire_recursive>
 800841e:	4628      	mov	r0, r5
 8008420:	4621      	mov	r1, r4
 8008422:	f7ff ff59 	bl	80082d8 <__sflush_r>
 8008426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008428:	07da      	lsls	r2, r3, #31
 800842a:	4605      	mov	r5, r0
 800842c:	d4e0      	bmi.n	80083f0 <_fflush_r+0xc>
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	059b      	lsls	r3, r3, #22
 8008432:	d4dd      	bmi.n	80083f0 <_fflush_r+0xc>
 8008434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008436:	f000 fc7b 	bl	8008d30 <__retarget_lock_release_recursive>
 800843a:	e7d9      	b.n	80083f0 <_fflush_r+0xc>
 800843c:	4b05      	ldr	r3, [pc, #20]	; (8008454 <_fflush_r+0x70>)
 800843e:	429c      	cmp	r4, r3
 8008440:	d101      	bne.n	8008446 <_fflush_r+0x62>
 8008442:	68ac      	ldr	r4, [r5, #8]
 8008444:	e7df      	b.n	8008406 <_fflush_r+0x22>
 8008446:	4b04      	ldr	r3, [pc, #16]	; (8008458 <_fflush_r+0x74>)
 8008448:	429c      	cmp	r4, r3
 800844a:	bf08      	it	eq
 800844c:	68ec      	ldreq	r4, [r5, #12]
 800844e:	e7da      	b.n	8008406 <_fflush_r+0x22>
 8008450:	0800b038 	.word	0x0800b038
 8008454:	0800b058 	.word	0x0800b058
 8008458:	0800b018 	.word	0x0800b018

0800845c <std>:
 800845c:	2300      	movs	r3, #0
 800845e:	b510      	push	{r4, lr}
 8008460:	4604      	mov	r4, r0
 8008462:	e9c0 3300 	strd	r3, r3, [r0]
 8008466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800846a:	6083      	str	r3, [r0, #8]
 800846c:	8181      	strh	r1, [r0, #12]
 800846e:	6643      	str	r3, [r0, #100]	; 0x64
 8008470:	81c2      	strh	r2, [r0, #14]
 8008472:	6183      	str	r3, [r0, #24]
 8008474:	4619      	mov	r1, r3
 8008476:	2208      	movs	r2, #8
 8008478:	305c      	adds	r0, #92	; 0x5c
 800847a:	f7fd f905 	bl	8005688 <memset>
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <std+0x38>)
 8008480:	6263      	str	r3, [r4, #36]	; 0x24
 8008482:	4b05      	ldr	r3, [pc, #20]	; (8008498 <std+0x3c>)
 8008484:	62a3      	str	r3, [r4, #40]	; 0x28
 8008486:	4b05      	ldr	r3, [pc, #20]	; (800849c <std+0x40>)
 8008488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800848a:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <std+0x44>)
 800848c:	6224      	str	r4, [r4, #32]
 800848e:	6323      	str	r3, [r4, #48]	; 0x30
 8008490:	bd10      	pop	{r4, pc}
 8008492:	bf00      	nop
 8008494:	08009d69 	.word	0x08009d69
 8008498:	08009d8b 	.word	0x08009d8b
 800849c:	08009dc3 	.word	0x08009dc3
 80084a0:	08009de7 	.word	0x08009de7

080084a4 <_cleanup_r>:
 80084a4:	4901      	ldr	r1, [pc, #4]	; (80084ac <_cleanup_r+0x8>)
 80084a6:	f000 b8af 	b.w	8008608 <_fwalk_reent>
 80084aa:	bf00      	nop
 80084ac:	080083e5 	.word	0x080083e5

080084b0 <__sfmoreglue>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	1e4a      	subs	r2, r1, #1
 80084b4:	2568      	movs	r5, #104	; 0x68
 80084b6:	4355      	muls	r5, r2
 80084b8:	460e      	mov	r6, r1
 80084ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084be:	f7fd f93b 	bl	8005738 <_malloc_r>
 80084c2:	4604      	mov	r4, r0
 80084c4:	b140      	cbz	r0, 80084d8 <__sfmoreglue+0x28>
 80084c6:	2100      	movs	r1, #0
 80084c8:	e9c0 1600 	strd	r1, r6, [r0]
 80084cc:	300c      	adds	r0, #12
 80084ce:	60a0      	str	r0, [r4, #8]
 80084d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084d4:	f7fd f8d8 	bl	8005688 <memset>
 80084d8:	4620      	mov	r0, r4
 80084da:	bd70      	pop	{r4, r5, r6, pc}

080084dc <__sfp_lock_acquire>:
 80084dc:	4801      	ldr	r0, [pc, #4]	; (80084e4 <__sfp_lock_acquire+0x8>)
 80084de:	f000 bc26 	b.w	8008d2e <__retarget_lock_acquire_recursive>
 80084e2:	bf00      	nop
 80084e4:	200005bc 	.word	0x200005bc

080084e8 <__sfp_lock_release>:
 80084e8:	4801      	ldr	r0, [pc, #4]	; (80084f0 <__sfp_lock_release+0x8>)
 80084ea:	f000 bc21 	b.w	8008d30 <__retarget_lock_release_recursive>
 80084ee:	bf00      	nop
 80084f0:	200005bc 	.word	0x200005bc

080084f4 <__sinit_lock_acquire>:
 80084f4:	4801      	ldr	r0, [pc, #4]	; (80084fc <__sinit_lock_acquire+0x8>)
 80084f6:	f000 bc1a 	b.w	8008d2e <__retarget_lock_acquire_recursive>
 80084fa:	bf00      	nop
 80084fc:	200005b7 	.word	0x200005b7

08008500 <__sinit_lock_release>:
 8008500:	4801      	ldr	r0, [pc, #4]	; (8008508 <__sinit_lock_release+0x8>)
 8008502:	f000 bc15 	b.w	8008d30 <__retarget_lock_release_recursive>
 8008506:	bf00      	nop
 8008508:	200005b7 	.word	0x200005b7

0800850c <__sinit>:
 800850c:	b510      	push	{r4, lr}
 800850e:	4604      	mov	r4, r0
 8008510:	f7ff fff0 	bl	80084f4 <__sinit_lock_acquire>
 8008514:	69a3      	ldr	r3, [r4, #24]
 8008516:	b11b      	cbz	r3, 8008520 <__sinit+0x14>
 8008518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800851c:	f7ff bff0 	b.w	8008500 <__sinit_lock_release>
 8008520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008524:	6523      	str	r3, [r4, #80]	; 0x50
 8008526:	4b13      	ldr	r3, [pc, #76]	; (8008574 <__sinit+0x68>)
 8008528:	4a13      	ldr	r2, [pc, #76]	; (8008578 <__sinit+0x6c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	62a2      	str	r2, [r4, #40]	; 0x28
 800852e:	42a3      	cmp	r3, r4
 8008530:	bf04      	itt	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	61a3      	streq	r3, [r4, #24]
 8008536:	4620      	mov	r0, r4
 8008538:	f000 f820 	bl	800857c <__sfp>
 800853c:	6060      	str	r0, [r4, #4]
 800853e:	4620      	mov	r0, r4
 8008540:	f000 f81c 	bl	800857c <__sfp>
 8008544:	60a0      	str	r0, [r4, #8]
 8008546:	4620      	mov	r0, r4
 8008548:	f000 f818 	bl	800857c <__sfp>
 800854c:	2200      	movs	r2, #0
 800854e:	60e0      	str	r0, [r4, #12]
 8008550:	2104      	movs	r1, #4
 8008552:	6860      	ldr	r0, [r4, #4]
 8008554:	f7ff ff82 	bl	800845c <std>
 8008558:	68a0      	ldr	r0, [r4, #8]
 800855a:	2201      	movs	r2, #1
 800855c:	2109      	movs	r1, #9
 800855e:	f7ff ff7d 	bl	800845c <std>
 8008562:	68e0      	ldr	r0, [r4, #12]
 8008564:	2202      	movs	r2, #2
 8008566:	2112      	movs	r1, #18
 8008568:	f7ff ff78 	bl	800845c <std>
 800856c:	2301      	movs	r3, #1
 800856e:	61a3      	str	r3, [r4, #24]
 8008570:	e7d2      	b.n	8008518 <__sinit+0xc>
 8008572:	bf00      	nop
 8008574:	0800adec 	.word	0x0800adec
 8008578:	080084a5 	.word	0x080084a5

0800857c <__sfp>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	4607      	mov	r7, r0
 8008580:	f7ff ffac 	bl	80084dc <__sfp_lock_acquire>
 8008584:	4b1e      	ldr	r3, [pc, #120]	; (8008600 <__sfp+0x84>)
 8008586:	681e      	ldr	r6, [r3, #0]
 8008588:	69b3      	ldr	r3, [r6, #24]
 800858a:	b913      	cbnz	r3, 8008592 <__sfp+0x16>
 800858c:	4630      	mov	r0, r6
 800858e:	f7ff ffbd 	bl	800850c <__sinit>
 8008592:	3648      	adds	r6, #72	; 0x48
 8008594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008598:	3b01      	subs	r3, #1
 800859a:	d503      	bpl.n	80085a4 <__sfp+0x28>
 800859c:	6833      	ldr	r3, [r6, #0]
 800859e:	b30b      	cbz	r3, 80085e4 <__sfp+0x68>
 80085a0:	6836      	ldr	r6, [r6, #0]
 80085a2:	e7f7      	b.n	8008594 <__sfp+0x18>
 80085a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085a8:	b9d5      	cbnz	r5, 80085e0 <__sfp+0x64>
 80085aa:	4b16      	ldr	r3, [pc, #88]	; (8008604 <__sfp+0x88>)
 80085ac:	60e3      	str	r3, [r4, #12]
 80085ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085b2:	6665      	str	r5, [r4, #100]	; 0x64
 80085b4:	f000 fbba 	bl	8008d2c <__retarget_lock_init_recursive>
 80085b8:	f7ff ff96 	bl	80084e8 <__sfp_lock_release>
 80085bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085c4:	6025      	str	r5, [r4, #0]
 80085c6:	61a5      	str	r5, [r4, #24]
 80085c8:	2208      	movs	r2, #8
 80085ca:	4629      	mov	r1, r5
 80085cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085d0:	f7fd f85a 	bl	8005688 <memset>
 80085d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085dc:	4620      	mov	r0, r4
 80085de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085e0:	3468      	adds	r4, #104	; 0x68
 80085e2:	e7d9      	b.n	8008598 <__sfp+0x1c>
 80085e4:	2104      	movs	r1, #4
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7ff ff62 	bl	80084b0 <__sfmoreglue>
 80085ec:	4604      	mov	r4, r0
 80085ee:	6030      	str	r0, [r6, #0]
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d1d5      	bne.n	80085a0 <__sfp+0x24>
 80085f4:	f7ff ff78 	bl	80084e8 <__sfp_lock_release>
 80085f8:	230c      	movs	r3, #12
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	e7ee      	b.n	80085dc <__sfp+0x60>
 80085fe:	bf00      	nop
 8008600:	0800adec 	.word	0x0800adec
 8008604:	ffff0001 	.word	0xffff0001

08008608 <_fwalk_reent>:
 8008608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800860c:	4606      	mov	r6, r0
 800860e:	4688      	mov	r8, r1
 8008610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008614:	2700      	movs	r7, #0
 8008616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800861a:	f1b9 0901 	subs.w	r9, r9, #1
 800861e:	d505      	bpl.n	800862c <_fwalk_reent+0x24>
 8008620:	6824      	ldr	r4, [r4, #0]
 8008622:	2c00      	cmp	r4, #0
 8008624:	d1f7      	bne.n	8008616 <_fwalk_reent+0xe>
 8008626:	4638      	mov	r0, r7
 8008628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800862c:	89ab      	ldrh	r3, [r5, #12]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d907      	bls.n	8008642 <_fwalk_reent+0x3a>
 8008632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008636:	3301      	adds	r3, #1
 8008638:	d003      	beq.n	8008642 <_fwalk_reent+0x3a>
 800863a:	4629      	mov	r1, r5
 800863c:	4630      	mov	r0, r6
 800863e:	47c0      	blx	r8
 8008640:	4307      	orrs	r7, r0
 8008642:	3568      	adds	r5, #104	; 0x68
 8008644:	e7e9      	b.n	800861a <_fwalk_reent+0x12>

08008646 <rshift>:
 8008646:	6903      	ldr	r3, [r0, #16]
 8008648:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800864c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008650:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008654:	f100 0414 	add.w	r4, r0, #20
 8008658:	dd45      	ble.n	80086e6 <rshift+0xa0>
 800865a:	f011 011f 	ands.w	r1, r1, #31
 800865e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008662:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008666:	d10c      	bne.n	8008682 <rshift+0x3c>
 8008668:	f100 0710 	add.w	r7, r0, #16
 800866c:	4629      	mov	r1, r5
 800866e:	42b1      	cmp	r1, r6
 8008670:	d334      	bcc.n	80086dc <rshift+0x96>
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	1eea      	subs	r2, r5, #3
 8008678:	4296      	cmp	r6, r2
 800867a:	bf38      	it	cc
 800867c:	2300      	movcc	r3, #0
 800867e:	4423      	add	r3, r4
 8008680:	e015      	b.n	80086ae <rshift+0x68>
 8008682:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008686:	f1c1 0820 	rsb	r8, r1, #32
 800868a:	40cf      	lsrs	r7, r1
 800868c:	f105 0e04 	add.w	lr, r5, #4
 8008690:	46a1      	mov	r9, r4
 8008692:	4576      	cmp	r6, lr
 8008694:	46f4      	mov	ip, lr
 8008696:	d815      	bhi.n	80086c4 <rshift+0x7e>
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	009a      	lsls	r2, r3, #2
 800869c:	3a04      	subs	r2, #4
 800869e:	3501      	adds	r5, #1
 80086a0:	42ae      	cmp	r6, r5
 80086a2:	bf38      	it	cc
 80086a4:	2200      	movcc	r2, #0
 80086a6:	18a3      	adds	r3, r4, r2
 80086a8:	50a7      	str	r7, [r4, r2]
 80086aa:	b107      	cbz	r7, 80086ae <rshift+0x68>
 80086ac:	3304      	adds	r3, #4
 80086ae:	1b1a      	subs	r2, r3, r4
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086b6:	bf08      	it	eq
 80086b8:	2300      	moveq	r3, #0
 80086ba:	6102      	str	r2, [r0, #16]
 80086bc:	bf08      	it	eq
 80086be:	6143      	streq	r3, [r0, #20]
 80086c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c4:	f8dc c000 	ldr.w	ip, [ip]
 80086c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80086cc:	ea4c 0707 	orr.w	r7, ip, r7
 80086d0:	f849 7b04 	str.w	r7, [r9], #4
 80086d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086d8:	40cf      	lsrs	r7, r1
 80086da:	e7da      	b.n	8008692 <rshift+0x4c>
 80086dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80086e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80086e4:	e7c3      	b.n	800866e <rshift+0x28>
 80086e6:	4623      	mov	r3, r4
 80086e8:	e7e1      	b.n	80086ae <rshift+0x68>

080086ea <__hexdig_fun>:
 80086ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80086ee:	2b09      	cmp	r3, #9
 80086f0:	d802      	bhi.n	80086f8 <__hexdig_fun+0xe>
 80086f2:	3820      	subs	r0, #32
 80086f4:	b2c0      	uxtb	r0, r0
 80086f6:	4770      	bx	lr
 80086f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80086fc:	2b05      	cmp	r3, #5
 80086fe:	d801      	bhi.n	8008704 <__hexdig_fun+0x1a>
 8008700:	3847      	subs	r0, #71	; 0x47
 8008702:	e7f7      	b.n	80086f4 <__hexdig_fun+0xa>
 8008704:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008708:	2b05      	cmp	r3, #5
 800870a:	d801      	bhi.n	8008710 <__hexdig_fun+0x26>
 800870c:	3827      	subs	r0, #39	; 0x27
 800870e:	e7f1      	b.n	80086f4 <__hexdig_fun+0xa>
 8008710:	2000      	movs	r0, #0
 8008712:	4770      	bx	lr

08008714 <__gethex>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	ed2d 8b02 	vpush	{d8}
 800871c:	b089      	sub	sp, #36	; 0x24
 800871e:	ee08 0a10 	vmov	s16, r0
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	4bbc      	ldr	r3, [pc, #752]	; (8008a18 <__gethex+0x304>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	4618      	mov	r0, r3
 800872c:	468b      	mov	fp, r1
 800872e:	4690      	mov	r8, r2
 8008730:	f7f7 fd56 	bl	80001e0 <strlen>
 8008734:	9b01      	ldr	r3, [sp, #4]
 8008736:	f8db 2000 	ldr.w	r2, [fp]
 800873a:	4403      	add	r3, r0
 800873c:	4682      	mov	sl, r0
 800873e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008742:	9305      	str	r3, [sp, #20]
 8008744:	1c93      	adds	r3, r2, #2
 8008746:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800874a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800874e:	32fe      	adds	r2, #254	; 0xfe
 8008750:	18d1      	adds	r1, r2, r3
 8008752:	461f      	mov	r7, r3
 8008754:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008758:	9100      	str	r1, [sp, #0]
 800875a:	2830      	cmp	r0, #48	; 0x30
 800875c:	d0f8      	beq.n	8008750 <__gethex+0x3c>
 800875e:	f7ff ffc4 	bl	80086ea <__hexdig_fun>
 8008762:	4604      	mov	r4, r0
 8008764:	2800      	cmp	r0, #0
 8008766:	d13a      	bne.n	80087de <__gethex+0xca>
 8008768:	9901      	ldr	r1, [sp, #4]
 800876a:	4652      	mov	r2, sl
 800876c:	4638      	mov	r0, r7
 800876e:	f001 fb3e 	bl	8009dee <strncmp>
 8008772:	4605      	mov	r5, r0
 8008774:	2800      	cmp	r0, #0
 8008776:	d168      	bne.n	800884a <__gethex+0x136>
 8008778:	f817 000a 	ldrb.w	r0, [r7, sl]
 800877c:	eb07 060a 	add.w	r6, r7, sl
 8008780:	f7ff ffb3 	bl	80086ea <__hexdig_fun>
 8008784:	2800      	cmp	r0, #0
 8008786:	d062      	beq.n	800884e <__gethex+0x13a>
 8008788:	4633      	mov	r3, r6
 800878a:	7818      	ldrb	r0, [r3, #0]
 800878c:	2830      	cmp	r0, #48	; 0x30
 800878e:	461f      	mov	r7, r3
 8008790:	f103 0301 	add.w	r3, r3, #1
 8008794:	d0f9      	beq.n	800878a <__gethex+0x76>
 8008796:	f7ff ffa8 	bl	80086ea <__hexdig_fun>
 800879a:	2301      	movs	r3, #1
 800879c:	fab0 f480 	clz	r4, r0
 80087a0:	0964      	lsrs	r4, r4, #5
 80087a2:	4635      	mov	r5, r6
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	463a      	mov	r2, r7
 80087a8:	4616      	mov	r6, r2
 80087aa:	3201      	adds	r2, #1
 80087ac:	7830      	ldrb	r0, [r6, #0]
 80087ae:	f7ff ff9c 	bl	80086ea <__hexdig_fun>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d1f8      	bne.n	80087a8 <__gethex+0x94>
 80087b6:	9901      	ldr	r1, [sp, #4]
 80087b8:	4652      	mov	r2, sl
 80087ba:	4630      	mov	r0, r6
 80087bc:	f001 fb17 	bl	8009dee <strncmp>
 80087c0:	b980      	cbnz	r0, 80087e4 <__gethex+0xd0>
 80087c2:	b94d      	cbnz	r5, 80087d8 <__gethex+0xc4>
 80087c4:	eb06 050a 	add.w	r5, r6, sl
 80087c8:	462a      	mov	r2, r5
 80087ca:	4616      	mov	r6, r2
 80087cc:	3201      	adds	r2, #1
 80087ce:	7830      	ldrb	r0, [r6, #0]
 80087d0:	f7ff ff8b 	bl	80086ea <__hexdig_fun>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d1f8      	bne.n	80087ca <__gethex+0xb6>
 80087d8:	1bad      	subs	r5, r5, r6
 80087da:	00ad      	lsls	r5, r5, #2
 80087dc:	e004      	b.n	80087e8 <__gethex+0xd4>
 80087de:	2400      	movs	r4, #0
 80087e0:	4625      	mov	r5, r4
 80087e2:	e7e0      	b.n	80087a6 <__gethex+0x92>
 80087e4:	2d00      	cmp	r5, #0
 80087e6:	d1f7      	bne.n	80087d8 <__gethex+0xc4>
 80087e8:	7833      	ldrb	r3, [r6, #0]
 80087ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087ee:	2b50      	cmp	r3, #80	; 0x50
 80087f0:	d13b      	bne.n	800886a <__gethex+0x156>
 80087f2:	7873      	ldrb	r3, [r6, #1]
 80087f4:	2b2b      	cmp	r3, #43	; 0x2b
 80087f6:	d02c      	beq.n	8008852 <__gethex+0x13e>
 80087f8:	2b2d      	cmp	r3, #45	; 0x2d
 80087fa:	d02e      	beq.n	800885a <__gethex+0x146>
 80087fc:	1c71      	adds	r1, r6, #1
 80087fe:	f04f 0900 	mov.w	r9, #0
 8008802:	7808      	ldrb	r0, [r1, #0]
 8008804:	f7ff ff71 	bl	80086ea <__hexdig_fun>
 8008808:	1e43      	subs	r3, r0, #1
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b18      	cmp	r3, #24
 800880e:	d82c      	bhi.n	800886a <__gethex+0x156>
 8008810:	f1a0 0210 	sub.w	r2, r0, #16
 8008814:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008818:	f7ff ff67 	bl	80086ea <__hexdig_fun>
 800881c:	1e43      	subs	r3, r0, #1
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b18      	cmp	r3, #24
 8008822:	d91d      	bls.n	8008860 <__gethex+0x14c>
 8008824:	f1b9 0f00 	cmp.w	r9, #0
 8008828:	d000      	beq.n	800882c <__gethex+0x118>
 800882a:	4252      	negs	r2, r2
 800882c:	4415      	add	r5, r2
 800882e:	f8cb 1000 	str.w	r1, [fp]
 8008832:	b1e4      	cbz	r4, 800886e <__gethex+0x15a>
 8008834:	9b00      	ldr	r3, [sp, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	bf14      	ite	ne
 800883a:	2700      	movne	r7, #0
 800883c:	2706      	moveq	r7, #6
 800883e:	4638      	mov	r0, r7
 8008840:	b009      	add	sp, #36	; 0x24
 8008842:	ecbd 8b02 	vpop	{d8}
 8008846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884a:	463e      	mov	r6, r7
 800884c:	4625      	mov	r5, r4
 800884e:	2401      	movs	r4, #1
 8008850:	e7ca      	b.n	80087e8 <__gethex+0xd4>
 8008852:	f04f 0900 	mov.w	r9, #0
 8008856:	1cb1      	adds	r1, r6, #2
 8008858:	e7d3      	b.n	8008802 <__gethex+0xee>
 800885a:	f04f 0901 	mov.w	r9, #1
 800885e:	e7fa      	b.n	8008856 <__gethex+0x142>
 8008860:	230a      	movs	r3, #10
 8008862:	fb03 0202 	mla	r2, r3, r2, r0
 8008866:	3a10      	subs	r2, #16
 8008868:	e7d4      	b.n	8008814 <__gethex+0x100>
 800886a:	4631      	mov	r1, r6
 800886c:	e7df      	b.n	800882e <__gethex+0x11a>
 800886e:	1bf3      	subs	r3, r6, r7
 8008870:	3b01      	subs	r3, #1
 8008872:	4621      	mov	r1, r4
 8008874:	2b07      	cmp	r3, #7
 8008876:	dc0b      	bgt.n	8008890 <__gethex+0x17c>
 8008878:	ee18 0a10 	vmov	r0, s16
 800887c:	f000 faea 	bl	8008e54 <_Balloc>
 8008880:	4604      	mov	r4, r0
 8008882:	b940      	cbnz	r0, 8008896 <__gethex+0x182>
 8008884:	4b65      	ldr	r3, [pc, #404]	; (8008a1c <__gethex+0x308>)
 8008886:	4602      	mov	r2, r0
 8008888:	21de      	movs	r1, #222	; 0xde
 800888a:	4865      	ldr	r0, [pc, #404]	; (8008a20 <__gethex+0x30c>)
 800888c:	f001 fae0 	bl	8009e50 <__assert_func>
 8008890:	3101      	adds	r1, #1
 8008892:	105b      	asrs	r3, r3, #1
 8008894:	e7ee      	b.n	8008874 <__gethex+0x160>
 8008896:	f100 0914 	add.w	r9, r0, #20
 800889a:	f04f 0b00 	mov.w	fp, #0
 800889e:	f1ca 0301 	rsb	r3, sl, #1
 80088a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80088a6:	f8cd b000 	str.w	fp, [sp]
 80088aa:	9306      	str	r3, [sp, #24]
 80088ac:	42b7      	cmp	r7, r6
 80088ae:	d340      	bcc.n	8008932 <__gethex+0x21e>
 80088b0:	9802      	ldr	r0, [sp, #8]
 80088b2:	9b00      	ldr	r3, [sp, #0]
 80088b4:	f840 3b04 	str.w	r3, [r0], #4
 80088b8:	eba0 0009 	sub.w	r0, r0, r9
 80088bc:	1080      	asrs	r0, r0, #2
 80088be:	0146      	lsls	r6, r0, #5
 80088c0:	6120      	str	r0, [r4, #16]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fbbc 	bl	8009040 <__hi0bits>
 80088c8:	1a30      	subs	r0, r6, r0
 80088ca:	f8d8 6000 	ldr.w	r6, [r8]
 80088ce:	42b0      	cmp	r0, r6
 80088d0:	dd63      	ble.n	800899a <__gethex+0x286>
 80088d2:	1b87      	subs	r7, r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 ff56 	bl	8009788 <__any_on>
 80088dc:	4682      	mov	sl, r0
 80088de:	b1a8      	cbz	r0, 800890c <__gethex+0x1f8>
 80088e0:	1e7b      	subs	r3, r7, #1
 80088e2:	1159      	asrs	r1, r3, #5
 80088e4:	f003 021f 	and.w	r2, r3, #31
 80088e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80088ec:	f04f 0a01 	mov.w	sl, #1
 80088f0:	fa0a f202 	lsl.w	r2, sl, r2
 80088f4:	420a      	tst	r2, r1
 80088f6:	d009      	beq.n	800890c <__gethex+0x1f8>
 80088f8:	4553      	cmp	r3, sl
 80088fa:	dd05      	ble.n	8008908 <__gethex+0x1f4>
 80088fc:	1eb9      	subs	r1, r7, #2
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 ff42 	bl	8009788 <__any_on>
 8008904:	2800      	cmp	r0, #0
 8008906:	d145      	bne.n	8008994 <__gethex+0x280>
 8008908:	f04f 0a02 	mov.w	sl, #2
 800890c:	4639      	mov	r1, r7
 800890e:	4620      	mov	r0, r4
 8008910:	f7ff fe99 	bl	8008646 <rshift>
 8008914:	443d      	add	r5, r7
 8008916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800891a:	42ab      	cmp	r3, r5
 800891c:	da4c      	bge.n	80089b8 <__gethex+0x2a4>
 800891e:	ee18 0a10 	vmov	r0, s16
 8008922:	4621      	mov	r1, r4
 8008924:	f000 fad6 	bl	8008ed4 <_Bfree>
 8008928:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800892a:	2300      	movs	r3, #0
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	27a3      	movs	r7, #163	; 0xa3
 8008930:	e785      	b.n	800883e <__gethex+0x12a>
 8008932:	1e73      	subs	r3, r6, #1
 8008934:	9a05      	ldr	r2, [sp, #20]
 8008936:	9303      	str	r3, [sp, #12]
 8008938:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800893c:	4293      	cmp	r3, r2
 800893e:	d019      	beq.n	8008974 <__gethex+0x260>
 8008940:	f1bb 0f20 	cmp.w	fp, #32
 8008944:	d107      	bne.n	8008956 <__gethex+0x242>
 8008946:	9b02      	ldr	r3, [sp, #8]
 8008948:	9a00      	ldr	r2, [sp, #0]
 800894a:	f843 2b04 	str.w	r2, [r3], #4
 800894e:	9302      	str	r3, [sp, #8]
 8008950:	2300      	movs	r3, #0
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	469b      	mov	fp, r3
 8008956:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800895a:	f7ff fec6 	bl	80086ea <__hexdig_fun>
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	f000 000f 	and.w	r0, r0, #15
 8008964:	fa00 f00b 	lsl.w	r0, r0, fp
 8008968:	4303      	orrs	r3, r0
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	f10b 0b04 	add.w	fp, fp, #4
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	e00d      	b.n	8008990 <__gethex+0x27c>
 8008974:	9b03      	ldr	r3, [sp, #12]
 8008976:	9a06      	ldr	r2, [sp, #24]
 8008978:	4413      	add	r3, r2
 800897a:	42bb      	cmp	r3, r7
 800897c:	d3e0      	bcc.n	8008940 <__gethex+0x22c>
 800897e:	4618      	mov	r0, r3
 8008980:	9901      	ldr	r1, [sp, #4]
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	4652      	mov	r2, sl
 8008986:	f001 fa32 	bl	8009dee <strncmp>
 800898a:	9b07      	ldr	r3, [sp, #28]
 800898c:	2800      	cmp	r0, #0
 800898e:	d1d7      	bne.n	8008940 <__gethex+0x22c>
 8008990:	461e      	mov	r6, r3
 8008992:	e78b      	b.n	80088ac <__gethex+0x198>
 8008994:	f04f 0a03 	mov.w	sl, #3
 8008998:	e7b8      	b.n	800890c <__gethex+0x1f8>
 800899a:	da0a      	bge.n	80089b2 <__gethex+0x29e>
 800899c:	1a37      	subs	r7, r6, r0
 800899e:	4621      	mov	r1, r4
 80089a0:	ee18 0a10 	vmov	r0, s16
 80089a4:	463a      	mov	r2, r7
 80089a6:	f000 fcb1 	bl	800930c <__lshift>
 80089aa:	1bed      	subs	r5, r5, r7
 80089ac:	4604      	mov	r4, r0
 80089ae:	f100 0914 	add.w	r9, r0, #20
 80089b2:	f04f 0a00 	mov.w	sl, #0
 80089b6:	e7ae      	b.n	8008916 <__gethex+0x202>
 80089b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80089bc:	42a8      	cmp	r0, r5
 80089be:	dd72      	ble.n	8008aa6 <__gethex+0x392>
 80089c0:	1b45      	subs	r5, r0, r5
 80089c2:	42ae      	cmp	r6, r5
 80089c4:	dc36      	bgt.n	8008a34 <__gethex+0x320>
 80089c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d02a      	beq.n	8008a24 <__gethex+0x310>
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d02c      	beq.n	8008a2c <__gethex+0x318>
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d115      	bne.n	8008a02 <__gethex+0x2ee>
 80089d6:	42ae      	cmp	r6, r5
 80089d8:	d113      	bne.n	8008a02 <__gethex+0x2ee>
 80089da:	2e01      	cmp	r6, #1
 80089dc:	d10b      	bne.n	80089f6 <__gethex+0x2e2>
 80089de:	9a04      	ldr	r2, [sp, #16]
 80089e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	2301      	movs	r3, #1
 80089e8:	6123      	str	r3, [r4, #16]
 80089ea:	f8c9 3000 	str.w	r3, [r9]
 80089ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089f0:	2762      	movs	r7, #98	; 0x62
 80089f2:	601c      	str	r4, [r3, #0]
 80089f4:	e723      	b.n	800883e <__gethex+0x12a>
 80089f6:	1e71      	subs	r1, r6, #1
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fec5 	bl	8009788 <__any_on>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d1ed      	bne.n	80089de <__gethex+0x2ca>
 8008a02:	ee18 0a10 	vmov	r0, s16
 8008a06:	4621      	mov	r1, r4
 8008a08:	f000 fa64 	bl	8008ed4 <_Bfree>
 8008a0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	2750      	movs	r7, #80	; 0x50
 8008a14:	e713      	b.n	800883e <__gethex+0x12a>
 8008a16:	bf00      	nop
 8008a18:	0800b0e4 	.word	0x0800b0e4
 8008a1c:	0800b004 	.word	0x0800b004
 8008a20:	0800b078 	.word	0x0800b078
 8008a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1eb      	bne.n	8008a02 <__gethex+0x2ee>
 8008a2a:	e7d8      	b.n	80089de <__gethex+0x2ca>
 8008a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1d5      	bne.n	80089de <__gethex+0x2ca>
 8008a32:	e7e6      	b.n	8008a02 <__gethex+0x2ee>
 8008a34:	1e6f      	subs	r7, r5, #1
 8008a36:	f1ba 0f00 	cmp.w	sl, #0
 8008a3a:	d131      	bne.n	8008aa0 <__gethex+0x38c>
 8008a3c:	b127      	cbz	r7, 8008a48 <__gethex+0x334>
 8008a3e:	4639      	mov	r1, r7
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fea1 	bl	8009788 <__any_on>
 8008a46:	4682      	mov	sl, r0
 8008a48:	117b      	asrs	r3, r7, #5
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008a50:	f007 071f 	and.w	r7, r7, #31
 8008a54:	fa01 f707 	lsl.w	r7, r1, r7
 8008a58:	421f      	tst	r7, r3
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	bf18      	it	ne
 8008a60:	f04a 0a02 	orrne.w	sl, sl, #2
 8008a64:	1b76      	subs	r6, r6, r5
 8008a66:	f7ff fdee 	bl	8008646 <rshift>
 8008a6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a6e:	2702      	movs	r7, #2
 8008a70:	f1ba 0f00 	cmp.w	sl, #0
 8008a74:	d048      	beq.n	8008b08 <__gethex+0x3f4>
 8008a76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d015      	beq.n	8008aaa <__gethex+0x396>
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d017      	beq.n	8008ab2 <__gethex+0x39e>
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d109      	bne.n	8008a9a <__gethex+0x386>
 8008a86:	f01a 0f02 	tst.w	sl, #2
 8008a8a:	d006      	beq.n	8008a9a <__gethex+0x386>
 8008a8c:	f8d9 0000 	ldr.w	r0, [r9]
 8008a90:	ea4a 0a00 	orr.w	sl, sl, r0
 8008a94:	f01a 0f01 	tst.w	sl, #1
 8008a98:	d10e      	bne.n	8008ab8 <__gethex+0x3a4>
 8008a9a:	f047 0710 	orr.w	r7, r7, #16
 8008a9e:	e033      	b.n	8008b08 <__gethex+0x3f4>
 8008aa0:	f04f 0a01 	mov.w	sl, #1
 8008aa4:	e7d0      	b.n	8008a48 <__gethex+0x334>
 8008aa6:	2701      	movs	r7, #1
 8008aa8:	e7e2      	b.n	8008a70 <__gethex+0x35c>
 8008aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aac:	f1c3 0301 	rsb	r3, r3, #1
 8008ab0:	9315      	str	r3, [sp, #84]	; 0x54
 8008ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0f0      	beq.n	8008a9a <__gethex+0x386>
 8008ab8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008abc:	f104 0314 	add.w	r3, r4, #20
 8008ac0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ac4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ac8:	f04f 0c00 	mov.w	ip, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ad6:	d01c      	beq.n	8008b12 <__gethex+0x3fe>
 8008ad8:	3201      	adds	r2, #1
 8008ada:	6002      	str	r2, [r0, #0]
 8008adc:	2f02      	cmp	r7, #2
 8008ade:	f104 0314 	add.w	r3, r4, #20
 8008ae2:	d13f      	bne.n	8008b64 <__gethex+0x450>
 8008ae4:	f8d8 2000 	ldr.w	r2, [r8]
 8008ae8:	3a01      	subs	r2, #1
 8008aea:	42b2      	cmp	r2, r6
 8008aec:	d10a      	bne.n	8008b04 <__gethex+0x3f0>
 8008aee:	1171      	asrs	r1, r6, #5
 8008af0:	2201      	movs	r2, #1
 8008af2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008af6:	f006 061f 	and.w	r6, r6, #31
 8008afa:	fa02 f606 	lsl.w	r6, r2, r6
 8008afe:	421e      	tst	r6, r3
 8008b00:	bf18      	it	ne
 8008b02:	4617      	movne	r7, r2
 8008b04:	f047 0720 	orr.w	r7, r7, #32
 8008b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b0a:	601c      	str	r4, [r3, #0]
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	601d      	str	r5, [r3, #0]
 8008b10:	e695      	b.n	800883e <__gethex+0x12a>
 8008b12:	4299      	cmp	r1, r3
 8008b14:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b18:	d8d8      	bhi.n	8008acc <__gethex+0x3b8>
 8008b1a:	68a3      	ldr	r3, [r4, #8]
 8008b1c:	459b      	cmp	fp, r3
 8008b1e:	db19      	blt.n	8008b54 <__gethex+0x440>
 8008b20:	6861      	ldr	r1, [r4, #4]
 8008b22:	ee18 0a10 	vmov	r0, s16
 8008b26:	3101      	adds	r1, #1
 8008b28:	f000 f994 	bl	8008e54 <_Balloc>
 8008b2c:	4681      	mov	r9, r0
 8008b2e:	b918      	cbnz	r0, 8008b38 <__gethex+0x424>
 8008b30:	4b1a      	ldr	r3, [pc, #104]	; (8008b9c <__gethex+0x488>)
 8008b32:	4602      	mov	r2, r0
 8008b34:	2184      	movs	r1, #132	; 0x84
 8008b36:	e6a8      	b.n	800888a <__gethex+0x176>
 8008b38:	6922      	ldr	r2, [r4, #16]
 8008b3a:	3202      	adds	r2, #2
 8008b3c:	f104 010c 	add.w	r1, r4, #12
 8008b40:	0092      	lsls	r2, r2, #2
 8008b42:	300c      	adds	r0, #12
 8008b44:	f000 f96c 	bl	8008e20 <memcpy>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	ee18 0a10 	vmov	r0, s16
 8008b4e:	f000 f9c1 	bl	8008ed4 <_Bfree>
 8008b52:	464c      	mov	r4, r9
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b5c:	6122      	str	r2, [r4, #16]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	615a      	str	r2, [r3, #20]
 8008b62:	e7bb      	b.n	8008adc <__gethex+0x3c8>
 8008b64:	6922      	ldr	r2, [r4, #16]
 8008b66:	455a      	cmp	r2, fp
 8008b68:	dd0b      	ble.n	8008b82 <__gethex+0x46e>
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f7ff fd6a 	bl	8008646 <rshift>
 8008b72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b76:	3501      	adds	r5, #1
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	f6ff aed0 	blt.w	800891e <__gethex+0x20a>
 8008b7e:	2701      	movs	r7, #1
 8008b80:	e7c0      	b.n	8008b04 <__gethex+0x3f0>
 8008b82:	f016 061f 	ands.w	r6, r6, #31
 8008b86:	d0fa      	beq.n	8008b7e <__gethex+0x46a>
 8008b88:	449a      	add	sl, r3
 8008b8a:	f1c6 0620 	rsb	r6, r6, #32
 8008b8e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008b92:	f000 fa55 	bl	8009040 <__hi0bits>
 8008b96:	42b0      	cmp	r0, r6
 8008b98:	dbe7      	blt.n	8008b6a <__gethex+0x456>
 8008b9a:	e7f0      	b.n	8008b7e <__gethex+0x46a>
 8008b9c:	0800b004 	.word	0x0800b004

08008ba0 <L_shift>:
 8008ba0:	f1c2 0208 	rsb	r2, r2, #8
 8008ba4:	0092      	lsls	r2, r2, #2
 8008ba6:	b570      	push	{r4, r5, r6, lr}
 8008ba8:	f1c2 0620 	rsb	r6, r2, #32
 8008bac:	6843      	ldr	r3, [r0, #4]
 8008bae:	6804      	ldr	r4, [r0, #0]
 8008bb0:	fa03 f506 	lsl.w	r5, r3, r6
 8008bb4:	432c      	orrs	r4, r5
 8008bb6:	40d3      	lsrs	r3, r2
 8008bb8:	6004      	str	r4, [r0, #0]
 8008bba:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bbe:	4288      	cmp	r0, r1
 8008bc0:	d3f4      	bcc.n	8008bac <L_shift+0xc>
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}

08008bc4 <__match>:
 8008bc4:	b530      	push	{r4, r5, lr}
 8008bc6:	6803      	ldr	r3, [r0, #0]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bce:	b914      	cbnz	r4, 8008bd6 <__match+0x12>
 8008bd0:	6003      	str	r3, [r0, #0]
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	bd30      	pop	{r4, r5, pc}
 8008bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bde:	2d19      	cmp	r5, #25
 8008be0:	bf98      	it	ls
 8008be2:	3220      	addls	r2, #32
 8008be4:	42a2      	cmp	r2, r4
 8008be6:	d0f0      	beq.n	8008bca <__match+0x6>
 8008be8:	2000      	movs	r0, #0
 8008bea:	e7f3      	b.n	8008bd4 <__match+0x10>

08008bec <__hexnan>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	680b      	ldr	r3, [r1, #0]
 8008bf2:	6801      	ldr	r1, [r0, #0]
 8008bf4:	115e      	asrs	r6, r3, #5
 8008bf6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bfa:	f013 031f 	ands.w	r3, r3, #31
 8008bfe:	b087      	sub	sp, #28
 8008c00:	bf18      	it	ne
 8008c02:	3604      	addne	r6, #4
 8008c04:	2500      	movs	r5, #0
 8008c06:	1f37      	subs	r7, r6, #4
 8008c08:	4682      	mov	sl, r0
 8008c0a:	4690      	mov	r8, r2
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c12:	46b9      	mov	r9, r7
 8008c14:	463c      	mov	r4, r7
 8008c16:	9502      	str	r5, [sp, #8]
 8008c18:	46ab      	mov	fp, r5
 8008c1a:	784a      	ldrb	r2, [r1, #1]
 8008c1c:	1c4b      	adds	r3, r1, #1
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	b342      	cbz	r2, 8008c74 <__hexnan+0x88>
 8008c22:	4610      	mov	r0, r2
 8008c24:	9105      	str	r1, [sp, #20]
 8008c26:	9204      	str	r2, [sp, #16]
 8008c28:	f7ff fd5f 	bl	80086ea <__hexdig_fun>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d14f      	bne.n	8008cd0 <__hexnan+0xe4>
 8008c30:	9a04      	ldr	r2, [sp, #16]
 8008c32:	9905      	ldr	r1, [sp, #20]
 8008c34:	2a20      	cmp	r2, #32
 8008c36:	d818      	bhi.n	8008c6a <__hexnan+0x7e>
 8008c38:	9b02      	ldr	r3, [sp, #8]
 8008c3a:	459b      	cmp	fp, r3
 8008c3c:	dd13      	ble.n	8008c66 <__hexnan+0x7a>
 8008c3e:	454c      	cmp	r4, r9
 8008c40:	d206      	bcs.n	8008c50 <__hexnan+0x64>
 8008c42:	2d07      	cmp	r5, #7
 8008c44:	dc04      	bgt.n	8008c50 <__hexnan+0x64>
 8008c46:	462a      	mov	r2, r5
 8008c48:	4649      	mov	r1, r9
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f7ff ffa8 	bl	8008ba0 <L_shift>
 8008c50:	4544      	cmp	r4, r8
 8008c52:	d950      	bls.n	8008cf6 <__hexnan+0x10a>
 8008c54:	2300      	movs	r3, #0
 8008c56:	f1a4 0904 	sub.w	r9, r4, #4
 8008c5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c5e:	f8cd b008 	str.w	fp, [sp, #8]
 8008c62:	464c      	mov	r4, r9
 8008c64:	461d      	mov	r5, r3
 8008c66:	9903      	ldr	r1, [sp, #12]
 8008c68:	e7d7      	b.n	8008c1a <__hexnan+0x2e>
 8008c6a:	2a29      	cmp	r2, #41	; 0x29
 8008c6c:	d156      	bne.n	8008d1c <__hexnan+0x130>
 8008c6e:	3102      	adds	r1, #2
 8008c70:	f8ca 1000 	str.w	r1, [sl]
 8008c74:	f1bb 0f00 	cmp.w	fp, #0
 8008c78:	d050      	beq.n	8008d1c <__hexnan+0x130>
 8008c7a:	454c      	cmp	r4, r9
 8008c7c:	d206      	bcs.n	8008c8c <__hexnan+0xa0>
 8008c7e:	2d07      	cmp	r5, #7
 8008c80:	dc04      	bgt.n	8008c8c <__hexnan+0xa0>
 8008c82:	462a      	mov	r2, r5
 8008c84:	4649      	mov	r1, r9
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7ff ff8a 	bl	8008ba0 <L_shift>
 8008c8c:	4544      	cmp	r4, r8
 8008c8e:	d934      	bls.n	8008cfa <__hexnan+0x10e>
 8008c90:	f1a8 0204 	sub.w	r2, r8, #4
 8008c94:	4623      	mov	r3, r4
 8008c96:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c9e:	429f      	cmp	r7, r3
 8008ca0:	d2f9      	bcs.n	8008c96 <__hexnan+0xaa>
 8008ca2:	1b3b      	subs	r3, r7, r4
 8008ca4:	f023 0303 	bic.w	r3, r3, #3
 8008ca8:	3304      	adds	r3, #4
 8008caa:	3401      	adds	r4, #1
 8008cac:	3e03      	subs	r6, #3
 8008cae:	42b4      	cmp	r4, r6
 8008cb0:	bf88      	it	hi
 8008cb2:	2304      	movhi	r3, #4
 8008cb4:	4443      	add	r3, r8
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f843 2b04 	str.w	r2, [r3], #4
 8008cbc:	429f      	cmp	r7, r3
 8008cbe:	d2fb      	bcs.n	8008cb8 <__hexnan+0xcc>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	b91b      	cbnz	r3, 8008ccc <__hexnan+0xe0>
 8008cc4:	4547      	cmp	r7, r8
 8008cc6:	d127      	bne.n	8008d18 <__hexnan+0x12c>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	603b      	str	r3, [r7, #0]
 8008ccc:	2005      	movs	r0, #5
 8008cce:	e026      	b.n	8008d1e <__hexnan+0x132>
 8008cd0:	3501      	adds	r5, #1
 8008cd2:	2d08      	cmp	r5, #8
 8008cd4:	f10b 0b01 	add.w	fp, fp, #1
 8008cd8:	dd06      	ble.n	8008ce8 <__hexnan+0xfc>
 8008cda:	4544      	cmp	r4, r8
 8008cdc:	d9c3      	bls.n	8008c66 <__hexnan+0x7a>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ce4:	2501      	movs	r5, #1
 8008ce6:	3c04      	subs	r4, #4
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	f000 000f 	and.w	r0, r0, #15
 8008cee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008cf2:	6022      	str	r2, [r4, #0]
 8008cf4:	e7b7      	b.n	8008c66 <__hexnan+0x7a>
 8008cf6:	2508      	movs	r5, #8
 8008cf8:	e7b5      	b.n	8008c66 <__hexnan+0x7a>
 8008cfa:	9b01      	ldr	r3, [sp, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0df      	beq.n	8008cc0 <__hexnan+0xd4>
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	f1c3 0320 	rsb	r3, r3, #32
 8008d08:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d10:	401a      	ands	r2, r3
 8008d12:	f846 2c04 	str.w	r2, [r6, #-4]
 8008d16:	e7d3      	b.n	8008cc0 <__hexnan+0xd4>
 8008d18:	3f04      	subs	r7, #4
 8008d1a:	e7d1      	b.n	8008cc0 <__hexnan+0xd4>
 8008d1c:	2004      	movs	r0, #4
 8008d1e:	b007      	add	sp, #28
 8008d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d24 <_localeconv_r>:
 8008d24:	4800      	ldr	r0, [pc, #0]	; (8008d28 <_localeconv_r+0x4>)
 8008d26:	4770      	bx	lr
 8008d28:	20000164 	.word	0x20000164

08008d2c <__retarget_lock_init_recursive>:
 8008d2c:	4770      	bx	lr

08008d2e <__retarget_lock_acquire_recursive>:
 8008d2e:	4770      	bx	lr

08008d30 <__retarget_lock_release_recursive>:
 8008d30:	4770      	bx	lr

08008d32 <__swhatbuf_r>:
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	460e      	mov	r6, r1
 8008d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3a:	2900      	cmp	r1, #0
 8008d3c:	b096      	sub	sp, #88	; 0x58
 8008d3e:	4614      	mov	r4, r2
 8008d40:	461d      	mov	r5, r3
 8008d42:	da07      	bge.n	8008d54 <__swhatbuf_r+0x22>
 8008d44:	2300      	movs	r3, #0
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	89b3      	ldrh	r3, [r6, #12]
 8008d4a:	061a      	lsls	r2, r3, #24
 8008d4c:	d410      	bmi.n	8008d70 <__swhatbuf_r+0x3e>
 8008d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d52:	e00e      	b.n	8008d72 <__swhatbuf_r+0x40>
 8008d54:	466a      	mov	r2, sp
 8008d56:	f001 f8bb 	bl	8009ed0 <_fstat_r>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	dbf2      	blt.n	8008d44 <__swhatbuf_r+0x12>
 8008d5e:	9a01      	ldr	r2, [sp, #4]
 8008d60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d68:	425a      	negs	r2, r3
 8008d6a:	415a      	adcs	r2, r3
 8008d6c:	602a      	str	r2, [r5, #0]
 8008d6e:	e7ee      	b.n	8008d4e <__swhatbuf_r+0x1c>
 8008d70:	2340      	movs	r3, #64	; 0x40
 8008d72:	2000      	movs	r0, #0
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	b016      	add	sp, #88	; 0x58
 8008d78:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d7c <__smakebuf_r>:
 8008d7c:	898b      	ldrh	r3, [r1, #12]
 8008d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d80:	079d      	lsls	r5, r3, #30
 8008d82:	4606      	mov	r6, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	d507      	bpl.n	8008d98 <__smakebuf_r+0x1c>
 8008d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	2301      	movs	r3, #1
 8008d92:	6163      	str	r3, [r4, #20]
 8008d94:	b002      	add	sp, #8
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	ab01      	add	r3, sp, #4
 8008d9a:	466a      	mov	r2, sp
 8008d9c:	f7ff ffc9 	bl	8008d32 <__swhatbuf_r>
 8008da0:	9900      	ldr	r1, [sp, #0]
 8008da2:	4605      	mov	r5, r0
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7fc fcc7 	bl	8005738 <_malloc_r>
 8008daa:	b948      	cbnz	r0, 8008dc0 <__smakebuf_r+0x44>
 8008dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db0:	059a      	lsls	r2, r3, #22
 8008db2:	d4ef      	bmi.n	8008d94 <__smakebuf_r+0x18>
 8008db4:	f023 0303 	bic.w	r3, r3, #3
 8008db8:	f043 0302 	orr.w	r3, r3, #2
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	e7e3      	b.n	8008d88 <__smakebuf_r+0xc>
 8008dc0:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <__smakebuf_r+0x7c>)
 8008dc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	6020      	str	r0, [r4, #0]
 8008dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	9b00      	ldr	r3, [sp, #0]
 8008dd0:	6163      	str	r3, [r4, #20]
 8008dd2:	9b01      	ldr	r3, [sp, #4]
 8008dd4:	6120      	str	r0, [r4, #16]
 8008dd6:	b15b      	cbz	r3, 8008df0 <__smakebuf_r+0x74>
 8008dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f001 f889 	bl	8009ef4 <_isatty_r>
 8008de2:	b128      	cbz	r0, 8008df0 <__smakebuf_r+0x74>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	f023 0303 	bic.w	r3, r3, #3
 8008dea:	f043 0301 	orr.w	r3, r3, #1
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	89a0      	ldrh	r0, [r4, #12]
 8008df2:	4305      	orrs	r5, r0
 8008df4:	81a5      	strh	r5, [r4, #12]
 8008df6:	e7cd      	b.n	8008d94 <__smakebuf_r+0x18>
 8008df8:	080084a5 	.word	0x080084a5

08008dfc <__ascii_mbtowc>:
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	b901      	cbnz	r1, 8008e02 <__ascii_mbtowc+0x6>
 8008e00:	a901      	add	r1, sp, #4
 8008e02:	b142      	cbz	r2, 8008e16 <__ascii_mbtowc+0x1a>
 8008e04:	b14b      	cbz	r3, 8008e1a <__ascii_mbtowc+0x1e>
 8008e06:	7813      	ldrb	r3, [r2, #0]
 8008e08:	600b      	str	r3, [r1, #0]
 8008e0a:	7812      	ldrb	r2, [r2, #0]
 8008e0c:	1e10      	subs	r0, r2, #0
 8008e0e:	bf18      	it	ne
 8008e10:	2001      	movne	r0, #1
 8008e12:	b002      	add	sp, #8
 8008e14:	4770      	bx	lr
 8008e16:	4610      	mov	r0, r2
 8008e18:	e7fb      	b.n	8008e12 <__ascii_mbtowc+0x16>
 8008e1a:	f06f 0001 	mvn.w	r0, #1
 8008e1e:	e7f8      	b.n	8008e12 <__ascii_mbtowc+0x16>

08008e20 <memcpy>:
 8008e20:	440a      	add	r2, r1
 8008e22:	4291      	cmp	r1, r2
 8008e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e28:	d100      	bne.n	8008e2c <memcpy+0xc>
 8008e2a:	4770      	bx	lr
 8008e2c:	b510      	push	{r4, lr}
 8008e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e36:	4291      	cmp	r1, r2
 8008e38:	d1f9      	bne.n	8008e2e <memcpy+0xe>
 8008e3a:	bd10      	pop	{r4, pc}

08008e3c <__malloc_lock>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__malloc_lock+0x8>)
 8008e3e:	f7ff bf76 	b.w	8008d2e <__retarget_lock_acquire_recursive>
 8008e42:	bf00      	nop
 8008e44:	200005b8 	.word	0x200005b8

08008e48 <__malloc_unlock>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__malloc_unlock+0x8>)
 8008e4a:	f7ff bf71 	b.w	8008d30 <__retarget_lock_release_recursive>
 8008e4e:	bf00      	nop
 8008e50:	200005b8 	.word	0x200005b8

08008e54 <_Balloc>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	b976      	cbnz	r6, 8008e7c <_Balloc+0x28>
 8008e5e:	2010      	movs	r0, #16
 8008e60:	f7fc fc0a 	bl	8005678 <malloc>
 8008e64:	4602      	mov	r2, r0
 8008e66:	6260      	str	r0, [r4, #36]	; 0x24
 8008e68:	b920      	cbnz	r0, 8008e74 <_Balloc+0x20>
 8008e6a:	4b18      	ldr	r3, [pc, #96]	; (8008ecc <_Balloc+0x78>)
 8008e6c:	4818      	ldr	r0, [pc, #96]	; (8008ed0 <_Balloc+0x7c>)
 8008e6e:	2166      	movs	r1, #102	; 0x66
 8008e70:	f000 ffee 	bl	8009e50 <__assert_func>
 8008e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e78:	6006      	str	r6, [r0, #0]
 8008e7a:	60c6      	str	r6, [r0, #12]
 8008e7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e7e:	68f3      	ldr	r3, [r6, #12]
 8008e80:	b183      	cbz	r3, 8008ea4 <_Balloc+0x50>
 8008e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e8a:	b9b8      	cbnz	r0, 8008ebc <_Balloc+0x68>
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008e92:	1d72      	adds	r2, r6, #5
 8008e94:	0092      	lsls	r2, r2, #2
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 fc97 	bl	80097ca <_calloc_r>
 8008e9c:	b160      	cbz	r0, 8008eb8 <_Balloc+0x64>
 8008e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ea2:	e00e      	b.n	8008ec2 <_Balloc+0x6e>
 8008ea4:	2221      	movs	r2, #33	; 0x21
 8008ea6:	2104      	movs	r1, #4
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 fc8e 	bl	80097ca <_calloc_r>
 8008eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb0:	60f0      	str	r0, [r6, #12]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e4      	bne.n	8008e82 <_Balloc+0x2e>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	6802      	ldr	r2, [r0, #0]
 8008ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ec8:	e7f7      	b.n	8008eba <_Balloc+0x66>
 8008eca:	bf00      	nop
 8008ecc:	0800af8e 	.word	0x0800af8e
 8008ed0:	0800b0f8 	.word	0x0800b0f8

08008ed4 <_Bfree>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ed8:	4605      	mov	r5, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	b976      	cbnz	r6, 8008efc <_Bfree+0x28>
 8008ede:	2010      	movs	r0, #16
 8008ee0:	f7fc fbca 	bl	8005678 <malloc>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	6268      	str	r0, [r5, #36]	; 0x24
 8008ee8:	b920      	cbnz	r0, 8008ef4 <_Bfree+0x20>
 8008eea:	4b09      	ldr	r3, [pc, #36]	; (8008f10 <_Bfree+0x3c>)
 8008eec:	4809      	ldr	r0, [pc, #36]	; (8008f14 <_Bfree+0x40>)
 8008eee:	218a      	movs	r1, #138	; 0x8a
 8008ef0:	f000 ffae 	bl	8009e50 <__assert_func>
 8008ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef8:	6006      	str	r6, [r0, #0]
 8008efa:	60c6      	str	r6, [r0, #12]
 8008efc:	b13c      	cbz	r4, 8008f0e <_Bfree+0x3a>
 8008efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f00:	6862      	ldr	r2, [r4, #4]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f08:	6021      	str	r1, [r4, #0]
 8008f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	0800af8e 	.word	0x0800af8e
 8008f14:	0800b0f8 	.word	0x0800b0f8

08008f18 <__multadd>:
 8008f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	690e      	ldr	r6, [r1, #16]
 8008f1e:	4607      	mov	r7, r0
 8008f20:	4698      	mov	r8, r3
 8008f22:	460c      	mov	r4, r1
 8008f24:	f101 0014 	add.w	r0, r1, #20
 8008f28:	2300      	movs	r3, #0
 8008f2a:	6805      	ldr	r5, [r0, #0]
 8008f2c:	b2a9      	uxth	r1, r5
 8008f2e:	fb02 8101 	mla	r1, r2, r1, r8
 8008f32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008f36:	0c2d      	lsrs	r5, r5, #16
 8008f38:	fb02 c505 	mla	r5, r2, r5, ip
 8008f3c:	b289      	uxth	r1, r1
 8008f3e:	3301      	adds	r3, #1
 8008f40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008f44:	429e      	cmp	r6, r3
 8008f46:	f840 1b04 	str.w	r1, [r0], #4
 8008f4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008f4e:	dcec      	bgt.n	8008f2a <__multadd+0x12>
 8008f50:	f1b8 0f00 	cmp.w	r8, #0
 8008f54:	d022      	beq.n	8008f9c <__multadd+0x84>
 8008f56:	68a3      	ldr	r3, [r4, #8]
 8008f58:	42b3      	cmp	r3, r6
 8008f5a:	dc19      	bgt.n	8008f90 <__multadd+0x78>
 8008f5c:	6861      	ldr	r1, [r4, #4]
 8008f5e:	4638      	mov	r0, r7
 8008f60:	3101      	adds	r1, #1
 8008f62:	f7ff ff77 	bl	8008e54 <_Balloc>
 8008f66:	4605      	mov	r5, r0
 8008f68:	b928      	cbnz	r0, 8008f76 <__multadd+0x5e>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <__multadd+0x8c>)
 8008f6e:	480e      	ldr	r0, [pc, #56]	; (8008fa8 <__multadd+0x90>)
 8008f70:	21b5      	movs	r1, #181	; 0xb5
 8008f72:	f000 ff6d 	bl	8009e50 <__assert_func>
 8008f76:	6922      	ldr	r2, [r4, #16]
 8008f78:	3202      	adds	r2, #2
 8008f7a:	f104 010c 	add.w	r1, r4, #12
 8008f7e:	0092      	lsls	r2, r2, #2
 8008f80:	300c      	adds	r0, #12
 8008f82:	f7ff ff4d 	bl	8008e20 <memcpy>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ffa3 	bl	8008ed4 <_Bfree>
 8008f8e:	462c      	mov	r4, r5
 8008f90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008f94:	3601      	adds	r6, #1
 8008f96:	f8c3 8014 	str.w	r8, [r3, #20]
 8008f9a:	6126      	str	r6, [r4, #16]
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa2:	bf00      	nop
 8008fa4:	0800b004 	.word	0x0800b004
 8008fa8:	0800b0f8 	.word	0x0800b0f8

08008fac <__s2b>:
 8008fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	4615      	mov	r5, r2
 8008fb4:	461f      	mov	r7, r3
 8008fb6:	2209      	movs	r2, #9
 8008fb8:	3308      	adds	r3, #8
 8008fba:	4606      	mov	r6, r0
 8008fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	db09      	blt.n	8008fdc <__s2b+0x30>
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff ff43 	bl	8008e54 <_Balloc>
 8008fce:	b940      	cbnz	r0, 8008fe2 <__s2b+0x36>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	4b19      	ldr	r3, [pc, #100]	; (8009038 <__s2b+0x8c>)
 8008fd4:	4819      	ldr	r0, [pc, #100]	; (800903c <__s2b+0x90>)
 8008fd6:	21ce      	movs	r1, #206	; 0xce
 8008fd8:	f000 ff3a 	bl	8009e50 <__assert_func>
 8008fdc:	0052      	lsls	r2, r2, #1
 8008fde:	3101      	adds	r1, #1
 8008fe0:	e7f0      	b.n	8008fc4 <__s2b+0x18>
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	6143      	str	r3, [r0, #20]
 8008fe6:	2d09      	cmp	r5, #9
 8008fe8:	f04f 0301 	mov.w	r3, #1
 8008fec:	6103      	str	r3, [r0, #16]
 8008fee:	dd16      	ble.n	800901e <__s2b+0x72>
 8008ff0:	f104 0909 	add.w	r9, r4, #9
 8008ff4:	46c8      	mov	r8, r9
 8008ff6:	442c      	add	r4, r5
 8008ff8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ffc:	4601      	mov	r1, r0
 8008ffe:	3b30      	subs	r3, #48	; 0x30
 8009000:	220a      	movs	r2, #10
 8009002:	4630      	mov	r0, r6
 8009004:	f7ff ff88 	bl	8008f18 <__multadd>
 8009008:	45a0      	cmp	r8, r4
 800900a:	d1f5      	bne.n	8008ff8 <__s2b+0x4c>
 800900c:	f1a5 0408 	sub.w	r4, r5, #8
 8009010:	444c      	add	r4, r9
 8009012:	1b2d      	subs	r5, r5, r4
 8009014:	1963      	adds	r3, r4, r5
 8009016:	42bb      	cmp	r3, r7
 8009018:	db04      	blt.n	8009024 <__s2b+0x78>
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901e:	340a      	adds	r4, #10
 8009020:	2509      	movs	r5, #9
 8009022:	e7f6      	b.n	8009012 <__s2b+0x66>
 8009024:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009028:	4601      	mov	r1, r0
 800902a:	3b30      	subs	r3, #48	; 0x30
 800902c:	220a      	movs	r2, #10
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ff72 	bl	8008f18 <__multadd>
 8009034:	e7ee      	b.n	8009014 <__s2b+0x68>
 8009036:	bf00      	nop
 8009038:	0800b004 	.word	0x0800b004
 800903c:	0800b0f8 	.word	0x0800b0f8

08009040 <__hi0bits>:
 8009040:	0c03      	lsrs	r3, r0, #16
 8009042:	041b      	lsls	r3, r3, #16
 8009044:	b9d3      	cbnz	r3, 800907c <__hi0bits+0x3c>
 8009046:	0400      	lsls	r0, r0, #16
 8009048:	2310      	movs	r3, #16
 800904a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800904e:	bf04      	itt	eq
 8009050:	0200      	lsleq	r0, r0, #8
 8009052:	3308      	addeq	r3, #8
 8009054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009058:	bf04      	itt	eq
 800905a:	0100      	lsleq	r0, r0, #4
 800905c:	3304      	addeq	r3, #4
 800905e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009062:	bf04      	itt	eq
 8009064:	0080      	lsleq	r0, r0, #2
 8009066:	3302      	addeq	r3, #2
 8009068:	2800      	cmp	r0, #0
 800906a:	db05      	blt.n	8009078 <__hi0bits+0x38>
 800906c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009070:	f103 0301 	add.w	r3, r3, #1
 8009074:	bf08      	it	eq
 8009076:	2320      	moveq	r3, #32
 8009078:	4618      	mov	r0, r3
 800907a:	4770      	bx	lr
 800907c:	2300      	movs	r3, #0
 800907e:	e7e4      	b.n	800904a <__hi0bits+0xa>

08009080 <__lo0bits>:
 8009080:	6803      	ldr	r3, [r0, #0]
 8009082:	f013 0207 	ands.w	r2, r3, #7
 8009086:	4601      	mov	r1, r0
 8009088:	d00b      	beq.n	80090a2 <__lo0bits+0x22>
 800908a:	07da      	lsls	r2, r3, #31
 800908c:	d424      	bmi.n	80090d8 <__lo0bits+0x58>
 800908e:	0798      	lsls	r0, r3, #30
 8009090:	bf49      	itett	mi
 8009092:	085b      	lsrmi	r3, r3, #1
 8009094:	089b      	lsrpl	r3, r3, #2
 8009096:	2001      	movmi	r0, #1
 8009098:	600b      	strmi	r3, [r1, #0]
 800909a:	bf5c      	itt	pl
 800909c:	600b      	strpl	r3, [r1, #0]
 800909e:	2002      	movpl	r0, #2
 80090a0:	4770      	bx	lr
 80090a2:	b298      	uxth	r0, r3
 80090a4:	b9b0      	cbnz	r0, 80090d4 <__lo0bits+0x54>
 80090a6:	0c1b      	lsrs	r3, r3, #16
 80090a8:	2010      	movs	r0, #16
 80090aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090ae:	bf04      	itt	eq
 80090b0:	0a1b      	lsreq	r3, r3, #8
 80090b2:	3008      	addeq	r0, #8
 80090b4:	071a      	lsls	r2, r3, #28
 80090b6:	bf04      	itt	eq
 80090b8:	091b      	lsreq	r3, r3, #4
 80090ba:	3004      	addeq	r0, #4
 80090bc:	079a      	lsls	r2, r3, #30
 80090be:	bf04      	itt	eq
 80090c0:	089b      	lsreq	r3, r3, #2
 80090c2:	3002      	addeq	r0, #2
 80090c4:	07da      	lsls	r2, r3, #31
 80090c6:	d403      	bmi.n	80090d0 <__lo0bits+0x50>
 80090c8:	085b      	lsrs	r3, r3, #1
 80090ca:	f100 0001 	add.w	r0, r0, #1
 80090ce:	d005      	beq.n	80090dc <__lo0bits+0x5c>
 80090d0:	600b      	str	r3, [r1, #0]
 80090d2:	4770      	bx	lr
 80090d4:	4610      	mov	r0, r2
 80090d6:	e7e8      	b.n	80090aa <__lo0bits+0x2a>
 80090d8:	2000      	movs	r0, #0
 80090da:	4770      	bx	lr
 80090dc:	2020      	movs	r0, #32
 80090de:	4770      	bx	lr

080090e0 <__i2b>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	460c      	mov	r4, r1
 80090e4:	2101      	movs	r1, #1
 80090e6:	f7ff feb5 	bl	8008e54 <_Balloc>
 80090ea:	4602      	mov	r2, r0
 80090ec:	b928      	cbnz	r0, 80090fa <__i2b+0x1a>
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <__i2b+0x24>)
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <__i2b+0x28>)
 80090f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090f6:	f000 feab 	bl	8009e50 <__assert_func>
 80090fa:	2301      	movs	r3, #1
 80090fc:	6144      	str	r4, [r0, #20]
 80090fe:	6103      	str	r3, [r0, #16]
 8009100:	bd10      	pop	{r4, pc}
 8009102:	bf00      	nop
 8009104:	0800b004 	.word	0x0800b004
 8009108:	0800b0f8 	.word	0x0800b0f8

0800910c <__multiply>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	4614      	mov	r4, r2
 8009112:	690a      	ldr	r2, [r1, #16]
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	bfb8      	it	lt
 800911a:	460b      	movlt	r3, r1
 800911c:	460d      	mov	r5, r1
 800911e:	bfbc      	itt	lt
 8009120:	4625      	movlt	r5, r4
 8009122:	461c      	movlt	r4, r3
 8009124:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009128:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800912c:	68ab      	ldr	r3, [r5, #8]
 800912e:	6869      	ldr	r1, [r5, #4]
 8009130:	eb0a 0709 	add.w	r7, sl, r9
 8009134:	42bb      	cmp	r3, r7
 8009136:	b085      	sub	sp, #20
 8009138:	bfb8      	it	lt
 800913a:	3101      	addlt	r1, #1
 800913c:	f7ff fe8a 	bl	8008e54 <_Balloc>
 8009140:	b930      	cbnz	r0, 8009150 <__multiply+0x44>
 8009142:	4602      	mov	r2, r0
 8009144:	4b42      	ldr	r3, [pc, #264]	; (8009250 <__multiply+0x144>)
 8009146:	4843      	ldr	r0, [pc, #268]	; (8009254 <__multiply+0x148>)
 8009148:	f240 115d 	movw	r1, #349	; 0x15d
 800914c:	f000 fe80 	bl	8009e50 <__assert_func>
 8009150:	f100 0614 	add.w	r6, r0, #20
 8009154:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009158:	4633      	mov	r3, r6
 800915a:	2200      	movs	r2, #0
 800915c:	4543      	cmp	r3, r8
 800915e:	d31e      	bcc.n	800919e <__multiply+0x92>
 8009160:	f105 0c14 	add.w	ip, r5, #20
 8009164:	f104 0314 	add.w	r3, r4, #20
 8009168:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800916c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009170:	9202      	str	r2, [sp, #8]
 8009172:	ebac 0205 	sub.w	r2, ip, r5
 8009176:	3a15      	subs	r2, #21
 8009178:	f022 0203 	bic.w	r2, r2, #3
 800917c:	3204      	adds	r2, #4
 800917e:	f105 0115 	add.w	r1, r5, #21
 8009182:	458c      	cmp	ip, r1
 8009184:	bf38      	it	cc
 8009186:	2204      	movcc	r2, #4
 8009188:	9201      	str	r2, [sp, #4]
 800918a:	9a02      	ldr	r2, [sp, #8]
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	429a      	cmp	r2, r3
 8009190:	d808      	bhi.n	80091a4 <__multiply+0x98>
 8009192:	2f00      	cmp	r7, #0
 8009194:	dc55      	bgt.n	8009242 <__multiply+0x136>
 8009196:	6107      	str	r7, [r0, #16]
 8009198:	b005      	add	sp, #20
 800919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919e:	f843 2b04 	str.w	r2, [r3], #4
 80091a2:	e7db      	b.n	800915c <__multiply+0x50>
 80091a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80091a8:	f1ba 0f00 	cmp.w	sl, #0
 80091ac:	d020      	beq.n	80091f0 <__multiply+0xe4>
 80091ae:	f105 0e14 	add.w	lr, r5, #20
 80091b2:	46b1      	mov	r9, r6
 80091b4:	2200      	movs	r2, #0
 80091b6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80091ba:	f8d9 b000 	ldr.w	fp, [r9]
 80091be:	b2a1      	uxth	r1, r4
 80091c0:	fa1f fb8b 	uxth.w	fp, fp
 80091c4:	fb0a b101 	mla	r1, sl, r1, fp
 80091c8:	4411      	add	r1, r2
 80091ca:	f8d9 2000 	ldr.w	r2, [r9]
 80091ce:	0c24      	lsrs	r4, r4, #16
 80091d0:	0c12      	lsrs	r2, r2, #16
 80091d2:	fb0a 2404 	mla	r4, sl, r4, r2
 80091d6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80091da:	b289      	uxth	r1, r1
 80091dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80091e0:	45f4      	cmp	ip, lr
 80091e2:	f849 1b04 	str.w	r1, [r9], #4
 80091e6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80091ea:	d8e4      	bhi.n	80091b6 <__multiply+0xaa>
 80091ec:	9901      	ldr	r1, [sp, #4]
 80091ee:	5072      	str	r2, [r6, r1]
 80091f0:	9a03      	ldr	r2, [sp, #12]
 80091f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091f6:	3304      	adds	r3, #4
 80091f8:	f1b9 0f00 	cmp.w	r9, #0
 80091fc:	d01f      	beq.n	800923e <__multiply+0x132>
 80091fe:	6834      	ldr	r4, [r6, #0]
 8009200:	f105 0114 	add.w	r1, r5, #20
 8009204:	46b6      	mov	lr, r6
 8009206:	f04f 0a00 	mov.w	sl, #0
 800920a:	880a      	ldrh	r2, [r1, #0]
 800920c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009210:	fb09 b202 	mla	r2, r9, r2, fp
 8009214:	4492      	add	sl, r2
 8009216:	b2a4      	uxth	r4, r4
 8009218:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800921c:	f84e 4b04 	str.w	r4, [lr], #4
 8009220:	f851 4b04 	ldr.w	r4, [r1], #4
 8009224:	f8be 2000 	ldrh.w	r2, [lr]
 8009228:	0c24      	lsrs	r4, r4, #16
 800922a:	fb09 2404 	mla	r4, r9, r4, r2
 800922e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009232:	458c      	cmp	ip, r1
 8009234:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009238:	d8e7      	bhi.n	800920a <__multiply+0xfe>
 800923a:	9a01      	ldr	r2, [sp, #4]
 800923c:	50b4      	str	r4, [r6, r2]
 800923e:	3604      	adds	r6, #4
 8009240:	e7a3      	b.n	800918a <__multiply+0x7e>
 8009242:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1a5      	bne.n	8009196 <__multiply+0x8a>
 800924a:	3f01      	subs	r7, #1
 800924c:	e7a1      	b.n	8009192 <__multiply+0x86>
 800924e:	bf00      	nop
 8009250:	0800b004 	.word	0x0800b004
 8009254:	0800b0f8 	.word	0x0800b0f8

08009258 <__pow5mult>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	4615      	mov	r5, r2
 800925e:	f012 0203 	ands.w	r2, r2, #3
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	d007      	beq.n	8009278 <__pow5mult+0x20>
 8009268:	4c25      	ldr	r4, [pc, #148]	; (8009300 <__pow5mult+0xa8>)
 800926a:	3a01      	subs	r2, #1
 800926c:	2300      	movs	r3, #0
 800926e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009272:	f7ff fe51 	bl	8008f18 <__multadd>
 8009276:	4607      	mov	r7, r0
 8009278:	10ad      	asrs	r5, r5, #2
 800927a:	d03d      	beq.n	80092f8 <__pow5mult+0xa0>
 800927c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800927e:	b97c      	cbnz	r4, 80092a0 <__pow5mult+0x48>
 8009280:	2010      	movs	r0, #16
 8009282:	f7fc f9f9 	bl	8005678 <malloc>
 8009286:	4602      	mov	r2, r0
 8009288:	6270      	str	r0, [r6, #36]	; 0x24
 800928a:	b928      	cbnz	r0, 8009298 <__pow5mult+0x40>
 800928c:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <__pow5mult+0xac>)
 800928e:	481e      	ldr	r0, [pc, #120]	; (8009308 <__pow5mult+0xb0>)
 8009290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009294:	f000 fddc 	bl	8009e50 <__assert_func>
 8009298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800929c:	6004      	str	r4, [r0, #0]
 800929e:	60c4      	str	r4, [r0, #12]
 80092a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a8:	b94c      	cbnz	r4, 80092be <__pow5mult+0x66>
 80092aa:	f240 2171 	movw	r1, #625	; 0x271
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ff16 	bl	80090e0 <__i2b>
 80092b4:	2300      	movs	r3, #0
 80092b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ba:	4604      	mov	r4, r0
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	f04f 0900 	mov.w	r9, #0
 80092c2:	07eb      	lsls	r3, r5, #31
 80092c4:	d50a      	bpl.n	80092dc <__pow5mult+0x84>
 80092c6:	4639      	mov	r1, r7
 80092c8:	4622      	mov	r2, r4
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ff1e 	bl	800910c <__multiply>
 80092d0:	4639      	mov	r1, r7
 80092d2:	4680      	mov	r8, r0
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff fdfd 	bl	8008ed4 <_Bfree>
 80092da:	4647      	mov	r7, r8
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	d00b      	beq.n	80092f8 <__pow5mult+0xa0>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	b938      	cbnz	r0, 80092f4 <__pow5mult+0x9c>
 80092e4:	4622      	mov	r2, r4
 80092e6:	4621      	mov	r1, r4
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff ff0f 	bl	800910c <__multiply>
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	f8c0 9000 	str.w	r9, [r0]
 80092f4:	4604      	mov	r4, r0
 80092f6:	e7e4      	b.n	80092c2 <__pow5mult+0x6a>
 80092f8:	4638      	mov	r0, r7
 80092fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fe:	bf00      	nop
 8009300:	0800b248 	.word	0x0800b248
 8009304:	0800af8e 	.word	0x0800af8e
 8009308:	0800b0f8 	.word	0x0800b0f8

0800930c <__lshift>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	6849      	ldr	r1, [r1, #4]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	4607      	mov	r7, r0
 800931e:	4691      	mov	r9, r2
 8009320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009324:	f108 0601 	add.w	r6, r8, #1
 8009328:	42b3      	cmp	r3, r6
 800932a:	db0b      	blt.n	8009344 <__lshift+0x38>
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff fd91 	bl	8008e54 <_Balloc>
 8009332:	4605      	mov	r5, r0
 8009334:	b948      	cbnz	r0, 800934a <__lshift+0x3e>
 8009336:	4602      	mov	r2, r0
 8009338:	4b28      	ldr	r3, [pc, #160]	; (80093dc <__lshift+0xd0>)
 800933a:	4829      	ldr	r0, [pc, #164]	; (80093e0 <__lshift+0xd4>)
 800933c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009340:	f000 fd86 	bl	8009e50 <__assert_func>
 8009344:	3101      	adds	r1, #1
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	e7ee      	b.n	8009328 <__lshift+0x1c>
 800934a:	2300      	movs	r3, #0
 800934c:	f100 0114 	add.w	r1, r0, #20
 8009350:	f100 0210 	add.w	r2, r0, #16
 8009354:	4618      	mov	r0, r3
 8009356:	4553      	cmp	r3, sl
 8009358:	db33      	blt.n	80093c2 <__lshift+0xb6>
 800935a:	6920      	ldr	r0, [r4, #16]
 800935c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009360:	f104 0314 	add.w	r3, r4, #20
 8009364:	f019 091f 	ands.w	r9, r9, #31
 8009368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800936c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009370:	d02b      	beq.n	80093ca <__lshift+0xbe>
 8009372:	f1c9 0e20 	rsb	lr, r9, #32
 8009376:	468a      	mov	sl, r1
 8009378:	2200      	movs	r2, #0
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	fa00 f009 	lsl.w	r0, r0, r9
 8009380:	4302      	orrs	r2, r0
 8009382:	f84a 2b04 	str.w	r2, [sl], #4
 8009386:	f853 2b04 	ldr.w	r2, [r3], #4
 800938a:	459c      	cmp	ip, r3
 800938c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009390:	d8f3      	bhi.n	800937a <__lshift+0x6e>
 8009392:	ebac 0304 	sub.w	r3, ip, r4
 8009396:	3b15      	subs	r3, #21
 8009398:	f023 0303 	bic.w	r3, r3, #3
 800939c:	3304      	adds	r3, #4
 800939e:	f104 0015 	add.w	r0, r4, #21
 80093a2:	4584      	cmp	ip, r0
 80093a4:	bf38      	it	cc
 80093a6:	2304      	movcc	r3, #4
 80093a8:	50ca      	str	r2, [r1, r3]
 80093aa:	b10a      	cbz	r2, 80093b0 <__lshift+0xa4>
 80093ac:	f108 0602 	add.w	r6, r8, #2
 80093b0:	3e01      	subs	r6, #1
 80093b2:	4638      	mov	r0, r7
 80093b4:	612e      	str	r6, [r5, #16]
 80093b6:	4621      	mov	r1, r4
 80093b8:	f7ff fd8c 	bl	8008ed4 <_Bfree>
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7c5      	b.n	8009356 <__lshift+0x4a>
 80093ca:	3904      	subs	r1, #4
 80093cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093d4:	459c      	cmp	ip, r3
 80093d6:	d8f9      	bhi.n	80093cc <__lshift+0xc0>
 80093d8:	e7ea      	b.n	80093b0 <__lshift+0xa4>
 80093da:	bf00      	nop
 80093dc:	0800b004 	.word	0x0800b004
 80093e0:	0800b0f8 	.word	0x0800b0f8

080093e4 <__mcmp>:
 80093e4:	b530      	push	{r4, r5, lr}
 80093e6:	6902      	ldr	r2, [r0, #16]
 80093e8:	690c      	ldr	r4, [r1, #16]
 80093ea:	1b12      	subs	r2, r2, r4
 80093ec:	d10e      	bne.n	800940c <__mcmp+0x28>
 80093ee:	f100 0314 	add.w	r3, r0, #20
 80093f2:	3114      	adds	r1, #20
 80093f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009404:	42a5      	cmp	r5, r4
 8009406:	d003      	beq.n	8009410 <__mcmp+0x2c>
 8009408:	d305      	bcc.n	8009416 <__mcmp+0x32>
 800940a:	2201      	movs	r2, #1
 800940c:	4610      	mov	r0, r2
 800940e:	bd30      	pop	{r4, r5, pc}
 8009410:	4283      	cmp	r3, r0
 8009412:	d3f3      	bcc.n	80093fc <__mcmp+0x18>
 8009414:	e7fa      	b.n	800940c <__mcmp+0x28>
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	e7f7      	b.n	800940c <__mcmp+0x28>

0800941c <__mdiff>:
 800941c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	460c      	mov	r4, r1
 8009422:	4606      	mov	r6, r0
 8009424:	4611      	mov	r1, r2
 8009426:	4620      	mov	r0, r4
 8009428:	4617      	mov	r7, r2
 800942a:	f7ff ffdb 	bl	80093e4 <__mcmp>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d110      	bne.n	8009454 <__mdiff+0x38>
 8009432:	4629      	mov	r1, r5
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fd0d 	bl	8008e54 <_Balloc>
 800943a:	b930      	cbnz	r0, 800944a <__mdiff+0x2e>
 800943c:	4b39      	ldr	r3, [pc, #228]	; (8009524 <__mdiff+0x108>)
 800943e:	4602      	mov	r2, r0
 8009440:	f240 2132 	movw	r1, #562	; 0x232
 8009444:	4838      	ldr	r0, [pc, #224]	; (8009528 <__mdiff+0x10c>)
 8009446:	f000 fd03 	bl	8009e50 <__assert_func>
 800944a:	2301      	movs	r3, #1
 800944c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009454:	bfa4      	itt	ge
 8009456:	463b      	movge	r3, r7
 8009458:	4627      	movge	r7, r4
 800945a:	4630      	mov	r0, r6
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	bfa6      	itte	ge
 8009460:	461c      	movge	r4, r3
 8009462:	2500      	movge	r5, #0
 8009464:	2501      	movlt	r5, #1
 8009466:	f7ff fcf5 	bl	8008e54 <_Balloc>
 800946a:	b920      	cbnz	r0, 8009476 <__mdiff+0x5a>
 800946c:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <__mdiff+0x108>)
 800946e:	4602      	mov	r2, r0
 8009470:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009474:	e7e6      	b.n	8009444 <__mdiff+0x28>
 8009476:	693e      	ldr	r6, [r7, #16]
 8009478:	60c5      	str	r5, [r0, #12]
 800947a:	6925      	ldr	r5, [r4, #16]
 800947c:	f107 0114 	add.w	r1, r7, #20
 8009480:	f104 0914 	add.w	r9, r4, #20
 8009484:	f100 0e14 	add.w	lr, r0, #20
 8009488:	f107 0210 	add.w	r2, r7, #16
 800948c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009490:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009494:	46f2      	mov	sl, lr
 8009496:	2700      	movs	r7, #0
 8009498:	f859 3b04 	ldr.w	r3, [r9], #4
 800949c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094a0:	fa1f f883 	uxth.w	r8, r3
 80094a4:	fa17 f78b 	uxtah	r7, r7, fp
 80094a8:	0c1b      	lsrs	r3, r3, #16
 80094aa:	eba7 0808 	sub.w	r8, r7, r8
 80094ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094b6:	fa1f f888 	uxth.w	r8, r8
 80094ba:	141f      	asrs	r7, r3, #16
 80094bc:	454d      	cmp	r5, r9
 80094be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094c2:	f84a 3b04 	str.w	r3, [sl], #4
 80094c6:	d8e7      	bhi.n	8009498 <__mdiff+0x7c>
 80094c8:	1b2b      	subs	r3, r5, r4
 80094ca:	3b15      	subs	r3, #21
 80094cc:	f023 0303 	bic.w	r3, r3, #3
 80094d0:	3304      	adds	r3, #4
 80094d2:	3415      	adds	r4, #21
 80094d4:	42a5      	cmp	r5, r4
 80094d6:	bf38      	it	cc
 80094d8:	2304      	movcc	r3, #4
 80094da:	4419      	add	r1, r3
 80094dc:	4473      	add	r3, lr
 80094de:	469e      	mov	lr, r3
 80094e0:	460d      	mov	r5, r1
 80094e2:	4565      	cmp	r5, ip
 80094e4:	d30e      	bcc.n	8009504 <__mdiff+0xe8>
 80094e6:	f10c 0203 	add.w	r2, ip, #3
 80094ea:	1a52      	subs	r2, r2, r1
 80094ec:	f022 0203 	bic.w	r2, r2, #3
 80094f0:	3903      	subs	r1, #3
 80094f2:	458c      	cmp	ip, r1
 80094f4:	bf38      	it	cc
 80094f6:	2200      	movcc	r2, #0
 80094f8:	441a      	add	r2, r3
 80094fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094fe:	b17b      	cbz	r3, 8009520 <__mdiff+0x104>
 8009500:	6106      	str	r6, [r0, #16]
 8009502:	e7a5      	b.n	8009450 <__mdiff+0x34>
 8009504:	f855 8b04 	ldr.w	r8, [r5], #4
 8009508:	fa17 f488 	uxtah	r4, r7, r8
 800950c:	1422      	asrs	r2, r4, #16
 800950e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009512:	b2a4      	uxth	r4, r4
 8009514:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009518:	f84e 4b04 	str.w	r4, [lr], #4
 800951c:	1417      	asrs	r7, r2, #16
 800951e:	e7e0      	b.n	80094e2 <__mdiff+0xc6>
 8009520:	3e01      	subs	r6, #1
 8009522:	e7ea      	b.n	80094fa <__mdiff+0xde>
 8009524:	0800b004 	.word	0x0800b004
 8009528:	0800b0f8 	.word	0x0800b0f8

0800952c <__ulp>:
 800952c:	b082      	sub	sp, #8
 800952e:	ed8d 0b00 	vstr	d0, [sp]
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	4912      	ldr	r1, [pc, #72]	; (8009580 <__ulp+0x54>)
 8009536:	4019      	ands	r1, r3
 8009538:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800953c:	2900      	cmp	r1, #0
 800953e:	dd05      	ble.n	800954c <__ulp+0x20>
 8009540:	2200      	movs	r2, #0
 8009542:	460b      	mov	r3, r1
 8009544:	ec43 2b10 	vmov	d0, r2, r3
 8009548:	b002      	add	sp, #8
 800954a:	4770      	bx	lr
 800954c:	4249      	negs	r1, r1
 800954e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009552:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009556:	f04f 0200 	mov.w	r2, #0
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	da04      	bge.n	800956a <__ulp+0x3e>
 8009560:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009564:	fa41 f300 	asr.w	r3, r1, r0
 8009568:	e7ec      	b.n	8009544 <__ulp+0x18>
 800956a:	f1a0 0114 	sub.w	r1, r0, #20
 800956e:	291e      	cmp	r1, #30
 8009570:	bfda      	itte	le
 8009572:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009576:	fa20 f101 	lsrle.w	r1, r0, r1
 800957a:	2101      	movgt	r1, #1
 800957c:	460a      	mov	r2, r1
 800957e:	e7e1      	b.n	8009544 <__ulp+0x18>
 8009580:	7ff00000 	.word	0x7ff00000

08009584 <__b2d>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	6905      	ldr	r5, [r0, #16]
 8009588:	f100 0714 	add.w	r7, r0, #20
 800958c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009590:	1f2e      	subs	r6, r5, #4
 8009592:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009596:	4620      	mov	r0, r4
 8009598:	f7ff fd52 	bl	8009040 <__hi0bits>
 800959c:	f1c0 0320 	rsb	r3, r0, #32
 80095a0:	280a      	cmp	r0, #10
 80095a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009620 <__b2d+0x9c>
 80095a6:	600b      	str	r3, [r1, #0]
 80095a8:	dc14      	bgt.n	80095d4 <__b2d+0x50>
 80095aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80095ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80095b2:	42b7      	cmp	r7, r6
 80095b4:	ea41 030c 	orr.w	r3, r1, ip
 80095b8:	bf34      	ite	cc
 80095ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095be:	2100      	movcs	r1, #0
 80095c0:	3015      	adds	r0, #21
 80095c2:	fa04 f000 	lsl.w	r0, r4, r0
 80095c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80095ca:	ea40 0201 	orr.w	r2, r0, r1
 80095ce:	ec43 2b10 	vmov	d0, r2, r3
 80095d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d4:	42b7      	cmp	r7, r6
 80095d6:	bf3a      	itte	cc
 80095d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80095e0:	2100      	movcs	r1, #0
 80095e2:	380b      	subs	r0, #11
 80095e4:	d017      	beq.n	8009616 <__b2d+0x92>
 80095e6:	f1c0 0c20 	rsb	ip, r0, #32
 80095ea:	fa04 f500 	lsl.w	r5, r4, r0
 80095ee:	42be      	cmp	r6, r7
 80095f0:	fa21 f40c 	lsr.w	r4, r1, ip
 80095f4:	ea45 0504 	orr.w	r5, r5, r4
 80095f8:	bf8c      	ite	hi
 80095fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80095fe:	2400      	movls	r4, #0
 8009600:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009604:	fa01 f000 	lsl.w	r0, r1, r0
 8009608:	fa24 f40c 	lsr.w	r4, r4, ip
 800960c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009610:	ea40 0204 	orr.w	r2, r0, r4
 8009614:	e7db      	b.n	80095ce <__b2d+0x4a>
 8009616:	ea44 030c 	orr.w	r3, r4, ip
 800961a:	460a      	mov	r2, r1
 800961c:	e7d7      	b.n	80095ce <__b2d+0x4a>
 800961e:	bf00      	nop
 8009620:	3ff00000 	.word	0x3ff00000

08009624 <__d2b>:
 8009624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009628:	4689      	mov	r9, r1
 800962a:	2101      	movs	r1, #1
 800962c:	ec57 6b10 	vmov	r6, r7, d0
 8009630:	4690      	mov	r8, r2
 8009632:	f7ff fc0f 	bl	8008e54 <_Balloc>
 8009636:	4604      	mov	r4, r0
 8009638:	b930      	cbnz	r0, 8009648 <__d2b+0x24>
 800963a:	4602      	mov	r2, r0
 800963c:	4b25      	ldr	r3, [pc, #148]	; (80096d4 <__d2b+0xb0>)
 800963e:	4826      	ldr	r0, [pc, #152]	; (80096d8 <__d2b+0xb4>)
 8009640:	f240 310a 	movw	r1, #778	; 0x30a
 8009644:	f000 fc04 	bl	8009e50 <__assert_func>
 8009648:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800964c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009650:	bb35      	cbnz	r5, 80096a0 <__d2b+0x7c>
 8009652:	2e00      	cmp	r6, #0
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	d028      	beq.n	80096aa <__d2b+0x86>
 8009658:	4668      	mov	r0, sp
 800965a:	9600      	str	r6, [sp, #0]
 800965c:	f7ff fd10 	bl	8009080 <__lo0bits>
 8009660:	9900      	ldr	r1, [sp, #0]
 8009662:	b300      	cbz	r0, 80096a6 <__d2b+0x82>
 8009664:	9a01      	ldr	r2, [sp, #4]
 8009666:	f1c0 0320 	rsb	r3, r0, #32
 800966a:	fa02 f303 	lsl.w	r3, r2, r3
 800966e:	430b      	orrs	r3, r1
 8009670:	40c2      	lsrs	r2, r0
 8009672:	6163      	str	r3, [r4, #20]
 8009674:	9201      	str	r2, [sp, #4]
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	61a3      	str	r3, [r4, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	bf14      	ite	ne
 800967e:	2202      	movne	r2, #2
 8009680:	2201      	moveq	r2, #1
 8009682:	6122      	str	r2, [r4, #16]
 8009684:	b1d5      	cbz	r5, 80096bc <__d2b+0x98>
 8009686:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800968a:	4405      	add	r5, r0
 800968c:	f8c9 5000 	str.w	r5, [r9]
 8009690:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009694:	f8c8 0000 	str.w	r0, [r8]
 8009698:	4620      	mov	r0, r4
 800969a:	b003      	add	sp, #12
 800969c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096a4:	e7d5      	b.n	8009652 <__d2b+0x2e>
 80096a6:	6161      	str	r1, [r4, #20]
 80096a8:	e7e5      	b.n	8009676 <__d2b+0x52>
 80096aa:	a801      	add	r0, sp, #4
 80096ac:	f7ff fce8 	bl	8009080 <__lo0bits>
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	6163      	str	r3, [r4, #20]
 80096b4:	2201      	movs	r2, #1
 80096b6:	6122      	str	r2, [r4, #16]
 80096b8:	3020      	adds	r0, #32
 80096ba:	e7e3      	b.n	8009684 <__d2b+0x60>
 80096bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096c4:	f8c9 0000 	str.w	r0, [r9]
 80096c8:	6918      	ldr	r0, [r3, #16]
 80096ca:	f7ff fcb9 	bl	8009040 <__hi0bits>
 80096ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096d2:	e7df      	b.n	8009694 <__d2b+0x70>
 80096d4:	0800b004 	.word	0x0800b004
 80096d8:	0800b0f8 	.word	0x0800b0f8

080096dc <__ratio>:
 80096dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e0:	4688      	mov	r8, r1
 80096e2:	4669      	mov	r1, sp
 80096e4:	4681      	mov	r9, r0
 80096e6:	f7ff ff4d 	bl	8009584 <__b2d>
 80096ea:	a901      	add	r1, sp, #4
 80096ec:	4640      	mov	r0, r8
 80096ee:	ec55 4b10 	vmov	r4, r5, d0
 80096f2:	f7ff ff47 	bl	8009584 <__b2d>
 80096f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096fe:	eba3 0c02 	sub.w	ip, r3, r2
 8009702:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009706:	1a9b      	subs	r3, r3, r2
 8009708:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800970c:	ec51 0b10 	vmov	r0, r1, d0
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfd6      	itet	le
 8009714:	460a      	movle	r2, r1
 8009716:	462a      	movgt	r2, r5
 8009718:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800971c:	468b      	mov	fp, r1
 800971e:	462f      	mov	r7, r5
 8009720:	bfd4      	ite	le
 8009722:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009726:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800972a:	4620      	mov	r0, r4
 800972c:	ee10 2a10 	vmov	r2, s0
 8009730:	465b      	mov	r3, fp
 8009732:	4639      	mov	r1, r7
 8009734:	f7f7 f892 	bl	800085c <__aeabi_ddiv>
 8009738:	ec41 0b10 	vmov	d0, r0, r1
 800973c:	b003      	add	sp, #12
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009742 <__copybits>:
 8009742:	3901      	subs	r1, #1
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	1149      	asrs	r1, r1, #5
 8009748:	6914      	ldr	r4, [r2, #16]
 800974a:	3101      	adds	r1, #1
 800974c:	f102 0314 	add.w	r3, r2, #20
 8009750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009754:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009758:	1f05      	subs	r5, r0, #4
 800975a:	42a3      	cmp	r3, r4
 800975c:	d30c      	bcc.n	8009778 <__copybits+0x36>
 800975e:	1aa3      	subs	r3, r4, r2
 8009760:	3b11      	subs	r3, #17
 8009762:	f023 0303 	bic.w	r3, r3, #3
 8009766:	3211      	adds	r2, #17
 8009768:	42a2      	cmp	r2, r4
 800976a:	bf88      	it	hi
 800976c:	2300      	movhi	r3, #0
 800976e:	4418      	add	r0, r3
 8009770:	2300      	movs	r3, #0
 8009772:	4288      	cmp	r0, r1
 8009774:	d305      	bcc.n	8009782 <__copybits+0x40>
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	f853 6b04 	ldr.w	r6, [r3], #4
 800977c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009780:	e7eb      	b.n	800975a <__copybits+0x18>
 8009782:	f840 3b04 	str.w	r3, [r0], #4
 8009786:	e7f4      	b.n	8009772 <__copybits+0x30>

08009788 <__any_on>:
 8009788:	f100 0214 	add.w	r2, r0, #20
 800978c:	6900      	ldr	r0, [r0, #16]
 800978e:	114b      	asrs	r3, r1, #5
 8009790:	4298      	cmp	r0, r3
 8009792:	b510      	push	{r4, lr}
 8009794:	db11      	blt.n	80097ba <__any_on+0x32>
 8009796:	dd0a      	ble.n	80097ae <__any_on+0x26>
 8009798:	f011 011f 	ands.w	r1, r1, #31
 800979c:	d007      	beq.n	80097ae <__any_on+0x26>
 800979e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097a2:	fa24 f001 	lsr.w	r0, r4, r1
 80097a6:	fa00 f101 	lsl.w	r1, r0, r1
 80097aa:	428c      	cmp	r4, r1
 80097ac:	d10b      	bne.n	80097c6 <__any_on+0x3e>
 80097ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d803      	bhi.n	80097be <__any_on+0x36>
 80097b6:	2000      	movs	r0, #0
 80097b8:	bd10      	pop	{r4, pc}
 80097ba:	4603      	mov	r3, r0
 80097bc:	e7f7      	b.n	80097ae <__any_on+0x26>
 80097be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097c2:	2900      	cmp	r1, #0
 80097c4:	d0f5      	beq.n	80097b2 <__any_on+0x2a>
 80097c6:	2001      	movs	r0, #1
 80097c8:	e7f6      	b.n	80097b8 <__any_on+0x30>

080097ca <_calloc_r>:
 80097ca:	b513      	push	{r0, r1, r4, lr}
 80097cc:	434a      	muls	r2, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	9201      	str	r2, [sp, #4]
 80097d2:	f7fb ffb1 	bl	8005738 <_malloc_r>
 80097d6:	4604      	mov	r4, r0
 80097d8:	b118      	cbz	r0, 80097e2 <_calloc_r+0x18>
 80097da:	9a01      	ldr	r2, [sp, #4]
 80097dc:	2100      	movs	r1, #0
 80097de:	f7fb ff53 	bl	8005688 <memset>
 80097e2:	4620      	mov	r0, r4
 80097e4:	b002      	add	sp, #8
 80097e6:	bd10      	pop	{r4, pc}

080097e8 <__ssputs_r>:
 80097e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ec:	688e      	ldr	r6, [r1, #8]
 80097ee:	429e      	cmp	r6, r3
 80097f0:	4682      	mov	sl, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	4690      	mov	r8, r2
 80097f6:	461f      	mov	r7, r3
 80097f8:	d838      	bhi.n	800986c <__ssputs_r+0x84>
 80097fa:	898a      	ldrh	r2, [r1, #12]
 80097fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009800:	d032      	beq.n	8009868 <__ssputs_r+0x80>
 8009802:	6825      	ldr	r5, [r4, #0]
 8009804:	6909      	ldr	r1, [r1, #16]
 8009806:	eba5 0901 	sub.w	r9, r5, r1
 800980a:	6965      	ldr	r5, [r4, #20]
 800980c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009814:	3301      	adds	r3, #1
 8009816:	444b      	add	r3, r9
 8009818:	106d      	asrs	r5, r5, #1
 800981a:	429d      	cmp	r5, r3
 800981c:	bf38      	it	cc
 800981e:	461d      	movcc	r5, r3
 8009820:	0553      	lsls	r3, r2, #21
 8009822:	d531      	bpl.n	8009888 <__ssputs_r+0xa0>
 8009824:	4629      	mov	r1, r5
 8009826:	f7fb ff87 	bl	8005738 <_malloc_r>
 800982a:	4606      	mov	r6, r0
 800982c:	b950      	cbnz	r0, 8009844 <__ssputs_r+0x5c>
 800982e:	230c      	movs	r3, #12
 8009830:	f8ca 3000 	str.w	r3, [sl]
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800983a:	81a3      	strh	r3, [r4, #12]
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009844:	6921      	ldr	r1, [r4, #16]
 8009846:	464a      	mov	r2, r9
 8009848:	f7ff faea 	bl	8008e20 <memcpy>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009856:	81a3      	strh	r3, [r4, #12]
 8009858:	6126      	str	r6, [r4, #16]
 800985a:	6165      	str	r5, [r4, #20]
 800985c:	444e      	add	r6, r9
 800985e:	eba5 0509 	sub.w	r5, r5, r9
 8009862:	6026      	str	r6, [r4, #0]
 8009864:	60a5      	str	r5, [r4, #8]
 8009866:	463e      	mov	r6, r7
 8009868:	42be      	cmp	r6, r7
 800986a:	d900      	bls.n	800986e <__ssputs_r+0x86>
 800986c:	463e      	mov	r6, r7
 800986e:	4632      	mov	r2, r6
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	4641      	mov	r1, r8
 8009874:	f000 fb60 	bl	8009f38 <memmove>
 8009878:	68a3      	ldr	r3, [r4, #8]
 800987a:	6822      	ldr	r2, [r4, #0]
 800987c:	1b9b      	subs	r3, r3, r6
 800987e:	4432      	add	r2, r6
 8009880:	60a3      	str	r3, [r4, #8]
 8009882:	6022      	str	r2, [r4, #0]
 8009884:	2000      	movs	r0, #0
 8009886:	e7db      	b.n	8009840 <__ssputs_r+0x58>
 8009888:	462a      	mov	r2, r5
 800988a:	f000 fb6f 	bl	8009f6c <_realloc_r>
 800988e:	4606      	mov	r6, r0
 8009890:	2800      	cmp	r0, #0
 8009892:	d1e1      	bne.n	8009858 <__ssputs_r+0x70>
 8009894:	6921      	ldr	r1, [r4, #16]
 8009896:	4650      	mov	r0, sl
 8009898:	f7fb fefe 	bl	8005698 <_free_r>
 800989c:	e7c7      	b.n	800982e <__ssputs_r+0x46>
	...

080098a0 <_svfiprintf_r>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	4698      	mov	r8, r3
 80098a6:	898b      	ldrh	r3, [r1, #12]
 80098a8:	061b      	lsls	r3, r3, #24
 80098aa:	b09d      	sub	sp, #116	; 0x74
 80098ac:	4607      	mov	r7, r0
 80098ae:	460d      	mov	r5, r1
 80098b0:	4614      	mov	r4, r2
 80098b2:	d50e      	bpl.n	80098d2 <_svfiprintf_r+0x32>
 80098b4:	690b      	ldr	r3, [r1, #16]
 80098b6:	b963      	cbnz	r3, 80098d2 <_svfiprintf_r+0x32>
 80098b8:	2140      	movs	r1, #64	; 0x40
 80098ba:	f7fb ff3d 	bl	8005738 <_malloc_r>
 80098be:	6028      	str	r0, [r5, #0]
 80098c0:	6128      	str	r0, [r5, #16]
 80098c2:	b920      	cbnz	r0, 80098ce <_svfiprintf_r+0x2e>
 80098c4:	230c      	movs	r3, #12
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	e0d1      	b.n	8009a72 <_svfiprintf_r+0x1d2>
 80098ce:	2340      	movs	r3, #64	; 0x40
 80098d0:	616b      	str	r3, [r5, #20]
 80098d2:	2300      	movs	r3, #0
 80098d4:	9309      	str	r3, [sp, #36]	; 0x24
 80098d6:	2320      	movs	r3, #32
 80098d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80098e0:	2330      	movs	r3, #48	; 0x30
 80098e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a8c <_svfiprintf_r+0x1ec>
 80098e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098ea:	f04f 0901 	mov.w	r9, #1
 80098ee:	4623      	mov	r3, r4
 80098f0:	469a      	mov	sl, r3
 80098f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098f6:	b10a      	cbz	r2, 80098fc <_svfiprintf_r+0x5c>
 80098f8:	2a25      	cmp	r2, #37	; 0x25
 80098fa:	d1f9      	bne.n	80098f0 <_svfiprintf_r+0x50>
 80098fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009900:	d00b      	beq.n	800991a <_svfiprintf_r+0x7a>
 8009902:	465b      	mov	r3, fp
 8009904:	4622      	mov	r2, r4
 8009906:	4629      	mov	r1, r5
 8009908:	4638      	mov	r0, r7
 800990a:	f7ff ff6d 	bl	80097e8 <__ssputs_r>
 800990e:	3001      	adds	r0, #1
 8009910:	f000 80aa 	beq.w	8009a68 <_svfiprintf_r+0x1c8>
 8009914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009916:	445a      	add	r2, fp
 8009918:	9209      	str	r2, [sp, #36]	; 0x24
 800991a:	f89a 3000 	ldrb.w	r3, [sl]
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 80a2 	beq.w	8009a68 <_svfiprintf_r+0x1c8>
 8009924:	2300      	movs	r3, #0
 8009926:	f04f 32ff 	mov.w	r2, #4294967295
 800992a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800992e:	f10a 0a01 	add.w	sl, sl, #1
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	9307      	str	r3, [sp, #28]
 8009936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800993a:	931a      	str	r3, [sp, #104]	; 0x68
 800993c:	4654      	mov	r4, sl
 800993e:	2205      	movs	r2, #5
 8009940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009944:	4851      	ldr	r0, [pc, #324]	; (8009a8c <_svfiprintf_r+0x1ec>)
 8009946:	f7f6 fc53 	bl	80001f0 <memchr>
 800994a:	9a04      	ldr	r2, [sp, #16]
 800994c:	b9d8      	cbnz	r0, 8009986 <_svfiprintf_r+0xe6>
 800994e:	06d0      	lsls	r0, r2, #27
 8009950:	bf44      	itt	mi
 8009952:	2320      	movmi	r3, #32
 8009954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009958:	0711      	lsls	r1, r2, #28
 800995a:	bf44      	itt	mi
 800995c:	232b      	movmi	r3, #43	; 0x2b
 800995e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009962:	f89a 3000 	ldrb.w	r3, [sl]
 8009966:	2b2a      	cmp	r3, #42	; 0x2a
 8009968:	d015      	beq.n	8009996 <_svfiprintf_r+0xf6>
 800996a:	9a07      	ldr	r2, [sp, #28]
 800996c:	4654      	mov	r4, sl
 800996e:	2000      	movs	r0, #0
 8009970:	f04f 0c0a 	mov.w	ip, #10
 8009974:	4621      	mov	r1, r4
 8009976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800997a:	3b30      	subs	r3, #48	; 0x30
 800997c:	2b09      	cmp	r3, #9
 800997e:	d94e      	bls.n	8009a1e <_svfiprintf_r+0x17e>
 8009980:	b1b0      	cbz	r0, 80099b0 <_svfiprintf_r+0x110>
 8009982:	9207      	str	r2, [sp, #28]
 8009984:	e014      	b.n	80099b0 <_svfiprintf_r+0x110>
 8009986:	eba0 0308 	sub.w	r3, r0, r8
 800998a:	fa09 f303 	lsl.w	r3, r9, r3
 800998e:	4313      	orrs	r3, r2
 8009990:	9304      	str	r3, [sp, #16]
 8009992:	46a2      	mov	sl, r4
 8009994:	e7d2      	b.n	800993c <_svfiprintf_r+0x9c>
 8009996:	9b03      	ldr	r3, [sp, #12]
 8009998:	1d19      	adds	r1, r3, #4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	9103      	str	r1, [sp, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bfbb      	ittet	lt
 80099a2:	425b      	neglt	r3, r3
 80099a4:	f042 0202 	orrlt.w	r2, r2, #2
 80099a8:	9307      	strge	r3, [sp, #28]
 80099aa:	9307      	strlt	r3, [sp, #28]
 80099ac:	bfb8      	it	lt
 80099ae:	9204      	strlt	r2, [sp, #16]
 80099b0:	7823      	ldrb	r3, [r4, #0]
 80099b2:	2b2e      	cmp	r3, #46	; 0x2e
 80099b4:	d10c      	bne.n	80099d0 <_svfiprintf_r+0x130>
 80099b6:	7863      	ldrb	r3, [r4, #1]
 80099b8:	2b2a      	cmp	r3, #42	; 0x2a
 80099ba:	d135      	bne.n	8009a28 <_svfiprintf_r+0x188>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	1d1a      	adds	r2, r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	9203      	str	r2, [sp, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	bfb8      	it	lt
 80099c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80099cc:	3402      	adds	r4, #2
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a9c <_svfiprintf_r+0x1fc>
 80099d4:	7821      	ldrb	r1, [r4, #0]
 80099d6:	2203      	movs	r2, #3
 80099d8:	4650      	mov	r0, sl
 80099da:	f7f6 fc09 	bl	80001f0 <memchr>
 80099de:	b140      	cbz	r0, 80099f2 <_svfiprintf_r+0x152>
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	eba0 000a 	sub.w	r0, r0, sl
 80099e6:	fa03 f000 	lsl.w	r0, r3, r0
 80099ea:	9b04      	ldr	r3, [sp, #16]
 80099ec:	4303      	orrs	r3, r0
 80099ee:	3401      	adds	r4, #1
 80099f0:	9304      	str	r3, [sp, #16]
 80099f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f6:	4826      	ldr	r0, [pc, #152]	; (8009a90 <_svfiprintf_r+0x1f0>)
 80099f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099fc:	2206      	movs	r2, #6
 80099fe:	f7f6 fbf7 	bl	80001f0 <memchr>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d038      	beq.n	8009a78 <_svfiprintf_r+0x1d8>
 8009a06:	4b23      	ldr	r3, [pc, #140]	; (8009a94 <_svfiprintf_r+0x1f4>)
 8009a08:	bb1b      	cbnz	r3, 8009a52 <_svfiprintf_r+0x1b2>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	3307      	adds	r3, #7
 8009a0e:	f023 0307 	bic.w	r3, r3, #7
 8009a12:	3308      	adds	r3, #8
 8009a14:	9303      	str	r3, [sp, #12]
 8009a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a18:	4433      	add	r3, r6
 8009a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a1c:	e767      	b.n	80098ee <_svfiprintf_r+0x4e>
 8009a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a22:	460c      	mov	r4, r1
 8009a24:	2001      	movs	r0, #1
 8009a26:	e7a5      	b.n	8009974 <_svfiprintf_r+0xd4>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	3401      	adds	r4, #1
 8009a2c:	9305      	str	r3, [sp, #20]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	f04f 0c0a 	mov.w	ip, #10
 8009a34:	4620      	mov	r0, r4
 8009a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a3a:	3a30      	subs	r2, #48	; 0x30
 8009a3c:	2a09      	cmp	r2, #9
 8009a3e:	d903      	bls.n	8009a48 <_svfiprintf_r+0x1a8>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0c5      	beq.n	80099d0 <_svfiprintf_r+0x130>
 8009a44:	9105      	str	r1, [sp, #20]
 8009a46:	e7c3      	b.n	80099d0 <_svfiprintf_r+0x130>
 8009a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e7f0      	b.n	8009a34 <_svfiprintf_r+0x194>
 8009a52:	ab03      	add	r3, sp, #12
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	462a      	mov	r2, r5
 8009a58:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <_svfiprintf_r+0x1f8>)
 8009a5a:	a904      	add	r1, sp, #16
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7fb ff65 	bl	800592c <_printf_float>
 8009a62:	1c42      	adds	r2, r0, #1
 8009a64:	4606      	mov	r6, r0
 8009a66:	d1d6      	bne.n	8009a16 <_svfiprintf_r+0x176>
 8009a68:	89ab      	ldrh	r3, [r5, #12]
 8009a6a:	065b      	lsls	r3, r3, #25
 8009a6c:	f53f af2c 	bmi.w	80098c8 <_svfiprintf_r+0x28>
 8009a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a72:	b01d      	add	sp, #116	; 0x74
 8009a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a78:	ab03      	add	r3, sp, #12
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <_svfiprintf_r+0x1f8>)
 8009a80:	a904      	add	r1, sp, #16
 8009a82:	4638      	mov	r0, r7
 8009a84:	f7fc f9f6 	bl	8005e74 <_printf_i>
 8009a88:	e7eb      	b.n	8009a62 <_svfiprintf_r+0x1c2>
 8009a8a:	bf00      	nop
 8009a8c:	0800b254 	.word	0x0800b254
 8009a90:	0800b25e 	.word	0x0800b25e
 8009a94:	0800592d 	.word	0x0800592d
 8009a98:	080097e9 	.word	0x080097e9
 8009a9c:	0800b25a 	.word	0x0800b25a

08009aa0 <__sfputc_r>:
 8009aa0:	6893      	ldr	r3, [r2, #8]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	b410      	push	{r4}
 8009aa8:	6093      	str	r3, [r2, #8]
 8009aaa:	da08      	bge.n	8009abe <__sfputc_r+0x1e>
 8009aac:	6994      	ldr	r4, [r2, #24]
 8009aae:	42a3      	cmp	r3, r4
 8009ab0:	db01      	blt.n	8009ab6 <__sfputc_r+0x16>
 8009ab2:	290a      	cmp	r1, #10
 8009ab4:	d103      	bne.n	8009abe <__sfputc_r+0x1e>
 8009ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aba:	f7fd bcd3 	b.w	8007464 <__swbuf_r>
 8009abe:	6813      	ldr	r3, [r2, #0]
 8009ac0:	1c58      	adds	r0, r3, #1
 8009ac2:	6010      	str	r0, [r2, #0]
 8009ac4:	7019      	strb	r1, [r3, #0]
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <__sfputs_r>:
 8009ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	460f      	mov	r7, r1
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	18d5      	adds	r5, r2, r3
 8009ad8:	42ac      	cmp	r4, r5
 8009ada:	d101      	bne.n	8009ae0 <__sfputs_r+0x12>
 8009adc:	2000      	movs	r0, #0
 8009ade:	e007      	b.n	8009af0 <__sfputs_r+0x22>
 8009ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae4:	463a      	mov	r2, r7
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f7ff ffda 	bl	8009aa0 <__sfputc_r>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d1f3      	bne.n	8009ad8 <__sfputs_r+0xa>
 8009af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009af4 <_vfiprintf_r>:
 8009af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af8:	460d      	mov	r5, r1
 8009afa:	b09d      	sub	sp, #116	; 0x74
 8009afc:	4614      	mov	r4, r2
 8009afe:	4698      	mov	r8, r3
 8009b00:	4606      	mov	r6, r0
 8009b02:	b118      	cbz	r0, 8009b0c <_vfiprintf_r+0x18>
 8009b04:	6983      	ldr	r3, [r0, #24]
 8009b06:	b90b      	cbnz	r3, 8009b0c <_vfiprintf_r+0x18>
 8009b08:	f7fe fd00 	bl	800850c <__sinit>
 8009b0c:	4b89      	ldr	r3, [pc, #548]	; (8009d34 <_vfiprintf_r+0x240>)
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	d11b      	bne.n	8009b4a <_vfiprintf_r+0x56>
 8009b12:	6875      	ldr	r5, [r6, #4]
 8009b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b16:	07d9      	lsls	r1, r3, #31
 8009b18:	d405      	bmi.n	8009b26 <_vfiprintf_r+0x32>
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	059a      	lsls	r2, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <_vfiprintf_r+0x32>
 8009b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b22:	f7ff f904 	bl	8008d2e <__retarget_lock_acquire_recursive>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	071b      	lsls	r3, r3, #28
 8009b2a:	d501      	bpl.n	8009b30 <_vfiprintf_r+0x3c>
 8009b2c:	692b      	ldr	r3, [r5, #16]
 8009b2e:	b9eb      	cbnz	r3, 8009b6c <_vfiprintf_r+0x78>
 8009b30:	4629      	mov	r1, r5
 8009b32:	4630      	mov	r0, r6
 8009b34:	f7fd fce8 	bl	8007508 <__swsetup_r>
 8009b38:	b1c0      	cbz	r0, 8009b6c <_vfiprintf_r+0x78>
 8009b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b3c:	07dc      	lsls	r4, r3, #31
 8009b3e:	d50e      	bpl.n	8009b5e <_vfiprintf_r+0x6a>
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295
 8009b44:	b01d      	add	sp, #116	; 0x74
 8009b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4a:	4b7b      	ldr	r3, [pc, #492]	; (8009d38 <_vfiprintf_r+0x244>)
 8009b4c:	429d      	cmp	r5, r3
 8009b4e:	d101      	bne.n	8009b54 <_vfiprintf_r+0x60>
 8009b50:	68b5      	ldr	r5, [r6, #8]
 8009b52:	e7df      	b.n	8009b14 <_vfiprintf_r+0x20>
 8009b54:	4b79      	ldr	r3, [pc, #484]	; (8009d3c <_vfiprintf_r+0x248>)
 8009b56:	429d      	cmp	r5, r3
 8009b58:	bf08      	it	eq
 8009b5a:	68f5      	ldreq	r5, [r6, #12]
 8009b5c:	e7da      	b.n	8009b14 <_vfiprintf_r+0x20>
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	0598      	lsls	r0, r3, #22
 8009b62:	d4ed      	bmi.n	8009b40 <_vfiprintf_r+0x4c>
 8009b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b66:	f7ff f8e3 	bl	8008d30 <__retarget_lock_release_recursive>
 8009b6a:	e7e9      	b.n	8009b40 <_vfiprintf_r+0x4c>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b70:	2320      	movs	r3, #32
 8009b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b7a:	2330      	movs	r3, #48	; 0x30
 8009b7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d40 <_vfiprintf_r+0x24c>
 8009b80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b84:	f04f 0901 	mov.w	r9, #1
 8009b88:	4623      	mov	r3, r4
 8009b8a:	469a      	mov	sl, r3
 8009b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b90:	b10a      	cbz	r2, 8009b96 <_vfiprintf_r+0xa2>
 8009b92:	2a25      	cmp	r2, #37	; 0x25
 8009b94:	d1f9      	bne.n	8009b8a <_vfiprintf_r+0x96>
 8009b96:	ebba 0b04 	subs.w	fp, sl, r4
 8009b9a:	d00b      	beq.n	8009bb4 <_vfiprintf_r+0xc0>
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7ff ff93 	bl	8009ace <__sfputs_r>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	f000 80aa 	beq.w	8009d02 <_vfiprintf_r+0x20e>
 8009bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bb0:	445a      	add	r2, fp
 8009bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 80a2 	beq.w	8009d02 <_vfiprintf_r+0x20e>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc8:	f10a 0a01 	add.w	sl, sl, #1
 8009bcc:	9304      	str	r3, [sp, #16]
 8009bce:	9307      	str	r3, [sp, #28]
 8009bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8009bd6:	4654      	mov	r4, sl
 8009bd8:	2205      	movs	r2, #5
 8009bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bde:	4858      	ldr	r0, [pc, #352]	; (8009d40 <_vfiprintf_r+0x24c>)
 8009be0:	f7f6 fb06 	bl	80001f0 <memchr>
 8009be4:	9a04      	ldr	r2, [sp, #16]
 8009be6:	b9d8      	cbnz	r0, 8009c20 <_vfiprintf_r+0x12c>
 8009be8:	06d1      	lsls	r1, r2, #27
 8009bea:	bf44      	itt	mi
 8009bec:	2320      	movmi	r3, #32
 8009bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bf2:	0713      	lsls	r3, r2, #28
 8009bf4:	bf44      	itt	mi
 8009bf6:	232b      	movmi	r3, #43	; 0x2b
 8009bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009c00:	2b2a      	cmp	r3, #42	; 0x2a
 8009c02:	d015      	beq.n	8009c30 <_vfiprintf_r+0x13c>
 8009c04:	9a07      	ldr	r2, [sp, #28]
 8009c06:	4654      	mov	r4, sl
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f04f 0c0a 	mov.w	ip, #10
 8009c0e:	4621      	mov	r1, r4
 8009c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c14:	3b30      	subs	r3, #48	; 0x30
 8009c16:	2b09      	cmp	r3, #9
 8009c18:	d94e      	bls.n	8009cb8 <_vfiprintf_r+0x1c4>
 8009c1a:	b1b0      	cbz	r0, 8009c4a <_vfiprintf_r+0x156>
 8009c1c:	9207      	str	r2, [sp, #28]
 8009c1e:	e014      	b.n	8009c4a <_vfiprintf_r+0x156>
 8009c20:	eba0 0308 	sub.w	r3, r0, r8
 8009c24:	fa09 f303 	lsl.w	r3, r9, r3
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	9304      	str	r3, [sp, #16]
 8009c2c:	46a2      	mov	sl, r4
 8009c2e:	e7d2      	b.n	8009bd6 <_vfiprintf_r+0xe2>
 8009c30:	9b03      	ldr	r3, [sp, #12]
 8009c32:	1d19      	adds	r1, r3, #4
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	9103      	str	r1, [sp, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfbb      	ittet	lt
 8009c3c:	425b      	neglt	r3, r3
 8009c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c42:	9307      	strge	r3, [sp, #28]
 8009c44:	9307      	strlt	r3, [sp, #28]
 8009c46:	bfb8      	it	lt
 8009c48:	9204      	strlt	r2, [sp, #16]
 8009c4a:	7823      	ldrb	r3, [r4, #0]
 8009c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c4e:	d10c      	bne.n	8009c6a <_vfiprintf_r+0x176>
 8009c50:	7863      	ldrb	r3, [r4, #1]
 8009c52:	2b2a      	cmp	r3, #42	; 0x2a
 8009c54:	d135      	bne.n	8009cc2 <_vfiprintf_r+0x1ce>
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	1d1a      	adds	r2, r3, #4
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	9203      	str	r2, [sp, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bfb8      	it	lt
 8009c62:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c66:	3402      	adds	r4, #2
 8009c68:	9305      	str	r3, [sp, #20]
 8009c6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d50 <_vfiprintf_r+0x25c>
 8009c6e:	7821      	ldrb	r1, [r4, #0]
 8009c70:	2203      	movs	r2, #3
 8009c72:	4650      	mov	r0, sl
 8009c74:	f7f6 fabc 	bl	80001f0 <memchr>
 8009c78:	b140      	cbz	r0, 8009c8c <_vfiprintf_r+0x198>
 8009c7a:	2340      	movs	r3, #64	; 0x40
 8009c7c:	eba0 000a 	sub.w	r0, r0, sl
 8009c80:	fa03 f000 	lsl.w	r0, r3, r0
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	4303      	orrs	r3, r0
 8009c88:	3401      	adds	r4, #1
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c90:	482c      	ldr	r0, [pc, #176]	; (8009d44 <_vfiprintf_r+0x250>)
 8009c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c96:	2206      	movs	r2, #6
 8009c98:	f7f6 faaa 	bl	80001f0 <memchr>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d03f      	beq.n	8009d20 <_vfiprintf_r+0x22c>
 8009ca0:	4b29      	ldr	r3, [pc, #164]	; (8009d48 <_vfiprintf_r+0x254>)
 8009ca2:	bb1b      	cbnz	r3, 8009cec <_vfiprintf_r+0x1f8>
 8009ca4:	9b03      	ldr	r3, [sp, #12]
 8009ca6:	3307      	adds	r3, #7
 8009ca8:	f023 0307 	bic.w	r3, r3, #7
 8009cac:	3308      	adds	r3, #8
 8009cae:	9303      	str	r3, [sp, #12]
 8009cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb2:	443b      	add	r3, r7
 8009cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb6:	e767      	b.n	8009b88 <_vfiprintf_r+0x94>
 8009cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	e7a5      	b.n	8009c0e <_vfiprintf_r+0x11a>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	3401      	adds	r4, #1
 8009cc6:	9305      	str	r3, [sp, #20]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	f04f 0c0a 	mov.w	ip, #10
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cd4:	3a30      	subs	r2, #48	; 0x30
 8009cd6:	2a09      	cmp	r2, #9
 8009cd8:	d903      	bls.n	8009ce2 <_vfiprintf_r+0x1ee>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0c5      	beq.n	8009c6a <_vfiprintf_r+0x176>
 8009cde:	9105      	str	r1, [sp, #20]
 8009ce0:	e7c3      	b.n	8009c6a <_vfiprintf_r+0x176>
 8009ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e7f0      	b.n	8009cce <_vfiprintf_r+0x1da>
 8009cec:	ab03      	add	r3, sp, #12
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	462a      	mov	r2, r5
 8009cf2:	4b16      	ldr	r3, [pc, #88]	; (8009d4c <_vfiprintf_r+0x258>)
 8009cf4:	a904      	add	r1, sp, #16
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7fb fe18 	bl	800592c <_printf_float>
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	1c78      	adds	r0, r7, #1
 8009d00:	d1d6      	bne.n	8009cb0 <_vfiprintf_r+0x1bc>
 8009d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d04:	07d9      	lsls	r1, r3, #31
 8009d06:	d405      	bmi.n	8009d14 <_vfiprintf_r+0x220>
 8009d08:	89ab      	ldrh	r3, [r5, #12]
 8009d0a:	059a      	lsls	r2, r3, #22
 8009d0c:	d402      	bmi.n	8009d14 <_vfiprintf_r+0x220>
 8009d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d10:	f7ff f80e 	bl	8008d30 <__retarget_lock_release_recursive>
 8009d14:	89ab      	ldrh	r3, [r5, #12]
 8009d16:	065b      	lsls	r3, r3, #25
 8009d18:	f53f af12 	bmi.w	8009b40 <_vfiprintf_r+0x4c>
 8009d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d1e:	e711      	b.n	8009b44 <_vfiprintf_r+0x50>
 8009d20:	ab03      	add	r3, sp, #12
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	462a      	mov	r2, r5
 8009d26:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <_vfiprintf_r+0x258>)
 8009d28:	a904      	add	r1, sp, #16
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7fc f8a2 	bl	8005e74 <_printf_i>
 8009d30:	e7e4      	b.n	8009cfc <_vfiprintf_r+0x208>
 8009d32:	bf00      	nop
 8009d34:	0800b038 	.word	0x0800b038
 8009d38:	0800b058 	.word	0x0800b058
 8009d3c:	0800b018 	.word	0x0800b018
 8009d40:	0800b254 	.word	0x0800b254
 8009d44:	0800b25e 	.word	0x0800b25e
 8009d48:	0800592d 	.word	0x0800592d
 8009d4c:	08009acf 	.word	0x08009acf
 8009d50:	0800b25a 	.word	0x0800b25a
 8009d54:	00000000 	.word	0x00000000

08009d58 <nan>:
 8009d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d60 <nan+0x8>
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	00000000 	.word	0x00000000
 8009d64:	7ff80000 	.word	0x7ff80000

08009d68 <__sread>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d70:	f000 f922 	bl	8009fb8 <_read_r>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	bfab      	itete	ge
 8009d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d7c:	181b      	addge	r3, r3, r0
 8009d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d82:	bfac      	ite	ge
 8009d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d86:	81a3      	strhlt	r3, [r4, #12]
 8009d88:	bd10      	pop	{r4, pc}

08009d8a <__swrite>:
 8009d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8e:	461f      	mov	r7, r3
 8009d90:	898b      	ldrh	r3, [r1, #12]
 8009d92:	05db      	lsls	r3, r3, #23
 8009d94:	4605      	mov	r5, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	4616      	mov	r6, r2
 8009d9a:	d505      	bpl.n	8009da8 <__swrite+0x1e>
 8009d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da0:	2302      	movs	r3, #2
 8009da2:	2200      	movs	r2, #0
 8009da4:	f000 f8b6 	bl	8009f14 <_lseek_r>
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	4632      	mov	r2, r6
 8009db6:	463b      	mov	r3, r7
 8009db8:	4628      	mov	r0, r5
 8009dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	f000 b835 	b.w	8009e2c <_write_r>

08009dc2 <__sseek>:
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dca:	f000 f8a3 	bl	8009f14 <_lseek_r>
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	bf15      	itete	ne
 8009dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dde:	81a3      	strheq	r3, [r4, #12]
 8009de0:	bf18      	it	ne
 8009de2:	81a3      	strhne	r3, [r4, #12]
 8009de4:	bd10      	pop	{r4, pc}

08009de6 <__sclose>:
 8009de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dea:	f000 b84f 	b.w	8009e8c <_close_r>

08009dee <strncmp>:
 8009dee:	b510      	push	{r4, lr}
 8009df0:	b16a      	cbz	r2, 8009e0e <strncmp+0x20>
 8009df2:	3901      	subs	r1, #1
 8009df4:	1884      	adds	r4, r0, r2
 8009df6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009dfa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d103      	bne.n	8009e0a <strncmp+0x1c>
 8009e02:	42a0      	cmp	r0, r4
 8009e04:	d001      	beq.n	8009e0a <strncmp+0x1c>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1f5      	bne.n	8009df6 <strncmp+0x8>
 8009e0a:	1a98      	subs	r0, r3, r2
 8009e0c:	bd10      	pop	{r4, pc}
 8009e0e:	4610      	mov	r0, r2
 8009e10:	e7fc      	b.n	8009e0c <strncmp+0x1e>

08009e12 <__ascii_wctomb>:
 8009e12:	b149      	cbz	r1, 8009e28 <__ascii_wctomb+0x16>
 8009e14:	2aff      	cmp	r2, #255	; 0xff
 8009e16:	bf85      	ittet	hi
 8009e18:	238a      	movhi	r3, #138	; 0x8a
 8009e1a:	6003      	strhi	r3, [r0, #0]
 8009e1c:	700a      	strbls	r2, [r1, #0]
 8009e1e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e22:	bf98      	it	ls
 8009e24:	2001      	movls	r0, #1
 8009e26:	4770      	bx	lr
 8009e28:	4608      	mov	r0, r1
 8009e2a:	4770      	bx	lr

08009e2c <_write_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_write_r+0x20>)
 8009e30:	4604      	mov	r4, r0
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	2200      	movs	r2, #0
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f7f9 f9dc 	bl	80031f8 <_write>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_write_r+0x1e>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_write_r+0x1e>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	200005c0 	.word	0x200005c0

08009e50 <__assert_func>:
 8009e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e52:	4614      	mov	r4, r2
 8009e54:	461a      	mov	r2, r3
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <__assert_func+0x2c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	68d8      	ldr	r0, [r3, #12]
 8009e5e:	b14c      	cbz	r4, 8009e74 <__assert_func+0x24>
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <__assert_func+0x30>)
 8009e62:	9100      	str	r1, [sp, #0]
 8009e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e68:	4906      	ldr	r1, [pc, #24]	; (8009e84 <__assert_func+0x34>)
 8009e6a:	462b      	mov	r3, r5
 8009e6c:	f000 f81e 	bl	8009eac <fiprintf>
 8009e70:	f000 f8b4 	bl	8009fdc <abort>
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <__assert_func+0x38>)
 8009e76:	461c      	mov	r4, r3
 8009e78:	e7f3      	b.n	8009e62 <__assert_func+0x12>
 8009e7a:	bf00      	nop
 8009e7c:	2000000c 	.word	0x2000000c
 8009e80:	0800b265 	.word	0x0800b265
 8009e84:	0800b272 	.word	0x0800b272
 8009e88:	0800b2a0 	.word	0x0800b2a0

08009e8c <_close_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d06      	ldr	r5, [pc, #24]	; (8009ea8 <_close_r+0x1c>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4604      	mov	r4, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	f7f9 f9ca 	bl	8003230 <_close>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d102      	bne.n	8009ea6 <_close_r+0x1a>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	b103      	cbz	r3, 8009ea6 <_close_r+0x1a>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	200005c0 	.word	0x200005c0

08009eac <fiprintf>:
 8009eac:	b40e      	push	{r1, r2, r3}
 8009eae:	b503      	push	{r0, r1, lr}
 8009eb0:	4601      	mov	r1, r0
 8009eb2:	ab03      	add	r3, sp, #12
 8009eb4:	4805      	ldr	r0, [pc, #20]	; (8009ecc <fiprintf+0x20>)
 8009eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eba:	6800      	ldr	r0, [r0, #0]
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	f7ff fe19 	bl	8009af4 <_vfiprintf_r>
 8009ec2:	b002      	add	sp, #8
 8009ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec8:	b003      	add	sp, #12
 8009eca:	4770      	bx	lr
 8009ecc:	2000000c 	.word	0x2000000c

08009ed0 <_fstat_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4d07      	ldr	r5, [pc, #28]	; (8009ef0 <_fstat_r+0x20>)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	4611      	mov	r1, r2
 8009edc:	602b      	str	r3, [r5, #0]
 8009ede:	f7f9 f9b3 	bl	8003248 <_fstat>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d102      	bne.n	8009eec <_fstat_r+0x1c>
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	b103      	cbz	r3, 8009eec <_fstat_r+0x1c>
 8009eea:	6023      	str	r3, [r4, #0]
 8009eec:	bd38      	pop	{r3, r4, r5, pc}
 8009eee:	bf00      	nop
 8009ef0:	200005c0 	.word	0x200005c0

08009ef4 <_isatty_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d06      	ldr	r5, [pc, #24]	; (8009f10 <_isatty_r+0x1c>)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	f7f9 f9b2 	bl	8003268 <_isatty>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_isatty_r+0x1a>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_isatty_r+0x1a>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	200005c0 	.word	0x200005c0

08009f14 <_lseek_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d07      	ldr	r5, [pc, #28]	; (8009f34 <_lseek_r+0x20>)
 8009f18:	4604      	mov	r4, r0
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	602a      	str	r2, [r5, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	f7f9 f9ab 	bl	800327e <_lseek>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_lseek_r+0x1e>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_lseek_r+0x1e>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	200005c0 	.word	0x200005c0

08009f38 <memmove>:
 8009f38:	4288      	cmp	r0, r1
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	eb01 0402 	add.w	r4, r1, r2
 8009f40:	d902      	bls.n	8009f48 <memmove+0x10>
 8009f42:	4284      	cmp	r4, r0
 8009f44:	4623      	mov	r3, r4
 8009f46:	d807      	bhi.n	8009f58 <memmove+0x20>
 8009f48:	1e43      	subs	r3, r0, #1
 8009f4a:	42a1      	cmp	r1, r4
 8009f4c:	d008      	beq.n	8009f60 <memmove+0x28>
 8009f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f56:	e7f8      	b.n	8009f4a <memmove+0x12>
 8009f58:	4402      	add	r2, r0
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	428a      	cmp	r2, r1
 8009f5e:	d100      	bne.n	8009f62 <memmove+0x2a>
 8009f60:	bd10      	pop	{r4, pc}
 8009f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f6a:	e7f7      	b.n	8009f5c <memmove+0x24>

08009f6c <_realloc_r>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	4607      	mov	r7, r0
 8009f70:	4614      	mov	r4, r2
 8009f72:	460e      	mov	r6, r1
 8009f74:	b921      	cbnz	r1, 8009f80 <_realloc_r+0x14>
 8009f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	f7fb bbdc 	b.w	8005738 <_malloc_r>
 8009f80:	b922      	cbnz	r2, 8009f8c <_realloc_r+0x20>
 8009f82:	f7fb fb89 	bl	8005698 <_free_r>
 8009f86:	4625      	mov	r5, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8c:	f000 f82d 	bl	8009fea <_malloc_usable_size_r>
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d20f      	bcs.n	8009fb4 <_realloc_r+0x48>
 8009f94:	4621      	mov	r1, r4
 8009f96:	4638      	mov	r0, r7
 8009f98:	f7fb fbce 	bl	8005738 <_malloc_r>
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d0f2      	beq.n	8009f88 <_realloc_r+0x1c>
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	f7fe ff3b 	bl	8008e20 <memcpy>
 8009faa:	4631      	mov	r1, r6
 8009fac:	4638      	mov	r0, r7
 8009fae:	f7fb fb73 	bl	8005698 <_free_r>
 8009fb2:	e7e9      	b.n	8009f88 <_realloc_r+0x1c>
 8009fb4:	4635      	mov	r5, r6
 8009fb6:	e7e7      	b.n	8009f88 <_realloc_r+0x1c>

08009fb8 <_read_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d07      	ldr	r5, [pc, #28]	; (8009fd8 <_read_r+0x20>)
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	4608      	mov	r0, r1
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f7f9 f8f9 	bl	80031be <_read>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_read_r+0x1e>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_read_r+0x1e>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	200005c0 	.word	0x200005c0

08009fdc <abort>:
 8009fdc:	b508      	push	{r3, lr}
 8009fde:	2006      	movs	r0, #6
 8009fe0:	f000 f834 	bl	800a04c <raise>
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	f7f9 f8e0 	bl	80031aa <_exit>

08009fea <_malloc_usable_size_r>:
 8009fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fee:	1f18      	subs	r0, r3, #4
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	bfbc      	itt	lt
 8009ff4:	580b      	ldrlt	r3, [r1, r0]
 8009ff6:	18c0      	addlt	r0, r0, r3
 8009ff8:	4770      	bx	lr

08009ffa <_raise_r>:
 8009ffa:	291f      	cmp	r1, #31
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4604      	mov	r4, r0
 800a000:	460d      	mov	r5, r1
 800a002:	d904      	bls.n	800a00e <_raise_r+0x14>
 800a004:	2316      	movs	r3, #22
 800a006:	6003      	str	r3, [r0, #0]
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a010:	b112      	cbz	r2, 800a018 <_raise_r+0x1e>
 800a012:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a016:	b94b      	cbnz	r3, 800a02c <_raise_r+0x32>
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 f831 	bl	800a080 <_getpid_r>
 800a01e:	462a      	mov	r2, r5
 800a020:	4601      	mov	r1, r0
 800a022:	4620      	mov	r0, r4
 800a024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a028:	f000 b818 	b.w	800a05c <_kill_r>
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d00a      	beq.n	800a046 <_raise_r+0x4c>
 800a030:	1c59      	adds	r1, r3, #1
 800a032:	d103      	bne.n	800a03c <_raise_r+0x42>
 800a034:	2316      	movs	r3, #22
 800a036:	6003      	str	r3, [r0, #0]
 800a038:	2001      	movs	r0, #1
 800a03a:	e7e7      	b.n	800a00c <_raise_r+0x12>
 800a03c:	2400      	movs	r4, #0
 800a03e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a042:	4628      	mov	r0, r5
 800a044:	4798      	blx	r3
 800a046:	2000      	movs	r0, #0
 800a048:	e7e0      	b.n	800a00c <_raise_r+0x12>
	...

0800a04c <raise>:
 800a04c:	4b02      	ldr	r3, [pc, #8]	; (800a058 <raise+0xc>)
 800a04e:	4601      	mov	r1, r0
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	f7ff bfd2 	b.w	8009ffa <_raise_r>
 800a056:	bf00      	nop
 800a058:	2000000c 	.word	0x2000000c

0800a05c <_kill_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	; (800a07c <_kill_r+0x20>)
 800a060:	2300      	movs	r3, #0
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	4611      	mov	r1, r2
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	f7f9 f88e 	bl	800318a <_kill>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	d102      	bne.n	800a078 <_kill_r+0x1c>
 800a072:	682b      	ldr	r3, [r5, #0]
 800a074:	b103      	cbz	r3, 800a078 <_kill_r+0x1c>
 800a076:	6023      	str	r3, [r4, #0]
 800a078:	bd38      	pop	{r3, r4, r5, pc}
 800a07a:	bf00      	nop
 800a07c:	200005c0 	.word	0x200005c0

0800a080 <_getpid_r>:
 800a080:	f7f9 b87b 	b.w	800317a <_getpid>

0800a084 <_init>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	bf00      	nop
 800a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08a:	bc08      	pop	{r3}
 800a08c:	469e      	mov	lr, r3
 800a08e:	4770      	bx	lr

0800a090 <_fini>:
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	bf00      	nop
 800a094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a096:	bc08      	pop	{r3}
 800a098:	469e      	mov	lr, r3
 800a09a:	4770      	bx	lr
